{"file_contents":{"AGENTS.md":{"content":"# Repository Guidelines\n\n## Project Structure & Module Organization\n- `src/app`: Next.js App Router pages and API routes. Public routes in `src/app/(public)`, protected in `src/app/(protected)`, APIs under `src/app/api/*`.\n- `src/components`: Reusable UI and feature components (e.g., `src/components/ui/button.tsx`).\n- `src/lib`: Utilities, auth, DB helpers, and domain modules (e.g., `src/lib/db.ts`, `src/lib/credits/*`).\n- `src/hooks`: Custom React hooks.\n- `prisma`: Prisma schema and migrations; requires `DATABASE_URL`.\n- `public`: Static assets. See `docs/architecture.md` for a high-level view.\n\n## Build, Test, and Development Commands\n- `npm run dev`: Start local dev server at `http://localhost:3000`.\n- `npm run build`: Generate Prisma client and build the Next.js app.\n- `npm start`: Run the production build.\n- `npm run lint`: Lint with Next.js/TypeScript rules.\n- `npm run typecheck`: TypeScript type checking only.\n- `npm run db:push` | `db:migrate` | `db:studio`: Prisma schema push, interactive migration, and DB UI.\n\n## Coding Style & Naming Conventions\n- TypeScript throughout; prefer 2-space indentation and no trailing semicolons (match existing files).\n- File names: kebab-case (e.g., `credit-status.tsx`). Exported React components use PascalCase.\n- Path alias `@/*` maps to `src/*` (e.g., `import { cn } from '@/lib/utils'`).\n- ESLint config extends `next/core-web-vitals` and `next/typescript`. Fix issues before PRs.\n\n## Data Access Rules\n- Never import or use the Prisma client (`@/lib/db`) in Client Components or client-side code. Perform all database access on the server via:\n  - Server Components (App Router),\n  - API routes under `src/app/api/*`, or\n  - Server Actions.\n- For client UIs that need data, either:\n  - Fetch in a Server Component and pass as props, or\n  - Use a custom hook built on TanStack Query that calls an API route through `@/lib/api-client`.\n\n## Testing Guidelines\n- No test runner is preconfigured. If adding tests, prefer Vitest/Jest + React Testing Library.\n- Co-locate tests as `*.test.ts(x)` near source or under `__tests__/` (excluded from build). Keep tests deterministic and fast.\n- Aim for meaningful coverage on business logic and API handlers; snapshot sparingly.\n\n## Commit & Pull Request Guidelines\n- Use Conventional Commits when possible (e.g., `feat:`, `fix:`, `docs:`). Keep messages imperative and scoped.\n- PRs must include: concise description, linked issues, screenshots for UI, and steps to validate locally.\n- Ensure `npm run lint`, `npm run typecheck`, and `npm run build` pass before requesting review.\n\n## Security & Configuration Tips\n- Do not commit secrets. Copy `.env.example` to `.env.local` and fill required keys (Clerk, `DATABASE_URL`, optional Stripe).\n- After schema changes, run `npm run db:migrate` and document notable model updates in the PR.\n\n## Credits Integration\n- Backend config `src/lib/credits/feature-config.ts` is the single source of truth.\n- Keys type derives from the config: `export type FeatureKey = keyof typeof FEATURE_CREDIT_COSTS`.\n- Examples: `ai_text_chat` (1) and `ai_image_generation` (5), mapped to Prisma `OperationType`.\n- Use `validateCreditsForFeature`/`deductCreditsForFeature` from `src/lib/credits/deduct.ts` in API routes.\n  - Prefer typing a variable as `FeatureKey` rather than hardcoding strings to get compile-time checks.\n - One-time credit packs: map Stripe Price IDs in `src/lib/clerk/credit-packs.ts`. The Clerk webhook (`/api/webhooks/clerk`) adds credits on `invoice.payment_succeeded` via `addUserCredits`.\n\n## Agent Guides\n- `agents/security-check.md`: Pre-merge security review checklist.\n- `agents/frontend-development.md`: UI implementation with App Router, Tailwind, and forms.\n- `agents/backend-development.md`: API routes with Zod validation, auth, and Prisma.\n- `agents/database-development.md`: Prisma schema changes, migrations, and indexing.\n- `agents/architecture-planning.md`: Lightweight planning template before coding.\n","size_bytes":3974},"CLAUDE.md":{"content":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Development Commands\n\n### Running the Application\n```bash\nnpm run dev          # Start development server (port 3000)\nnpm run build        # Build for production (runs prisma generate first)\nnpm run start        # Start production server\n```\n\n### Code Quality\n```bash\nnpm run lint         # Run ESLint\nnpm run typecheck    # TypeScript type checking (tsc --noEmit)\n```\n\n### Database Management\n```bash\nnpm run db:push      # Push schema changes to database\nnpm run db:migrate   # Run database migrations\nnpm run db:reset     # Reset database (drop all data and recreate schema)\nnpm run db:studio    # Open Prisma Studio for database management\n```\n\n## Architecture Overview\n\n### Tech Stack\n- **Framework**: Next.js 15.3.5 with App Router\n- **Authentication**: Clerk (with middleware protection)\n- **Database**: PostgreSQL with Prisma ORM\n- **Styling**: Tailwind CSS v4 with Radix UI components\n- **State Management**: React Query (TanStack Query)\n- **Forms**: React Hook Form with Zod validation\n- **Language**: TypeScript (non-strict mode)\n\n### Project Structure\n\n```\nsrc/\n├── app/\n│   ├── (public)/          # Unauthenticated routes\n│   │   ├── sign-in/       # Clerk sign-in page\n│   │   ├── sign-up/       # Clerk sign-up page\n│   │   └── page.tsx       # Landing page\n│   ├── (protected)/       # Authenticated routes (client-side protection)\n│   │   ├── dashboard/     # Main dashboard\n│   │   ├── billing/       # Subscription management\n│   │   └── layout.tsx     # Protected layout with sidebar\n│   ├── admin/             # Admin panel routes\n│   │   ├── settings/      # Admin settings (split into features & plans)\n│   │   │   ├── features/  # Feature cost configuration\n│   │   │   ├── plans/     # Billing plans management (Clerk sync)\n│   │   │   └── page.tsx   # Settings overview with navigation cards\n│   │   ├── users/         # User management\n│   │   ├── credits/       # Credit management\n│   │   └── usage/         # Usage analytics\n│   └── api/               # API routes (server-side)\n│       ├── credits/       # Credit system endpoints\n│       └── admin/         # Admin API endpoints\n├── components/\n│   ├── ui/                # Radix UI + Tailwind components\n│   ├── app/               # Application-specific components (sidebar, topbar)\n│   └── providers/         # React Query and theme providers\n├── lib/\n│   ├── db.ts              # Prisma client singleton\n│   ├── auth-utils.ts      # Authentication helpers\n│   ├── api-client.ts      # HTTP client for TanStack Query\n│   └── utils.ts           # Utility functions (cn for className merging)\n└── hooks/                 # Custom React hooks\n    ├── admin/             # Admin-specific TanStack Query hooks\n    └── use-*.ts           # General application hooks\n```\n\n### Authentication Flow\n- Clerk handles authentication with middleware protection\n- Public routes: `/`, `/sign-in/*`, `/sign-up/*`, `/api/health`\n- Protected routes use client-side `useAuth` hook to verify authentication\n- API routes use server-side `auth()` from Clerk\n- Users are automatically created in database on first authentication via `getUserFromClerkId`\n\n### Database Schema (Key Models)\n- **User**: Linked to Clerk via `clerkId`, owns workspaces and AI agents\n- **Workspace**: Container for AI agents with context artifacts\n- **AIAgent**: Configurable agents with capabilities and system prompts\n- **CreditBalance**: Tracks user credits (synced with Clerk)\n\n### API Pattern\nAll API routes follow this pattern:\n1. Authenticate user with `await auth()` from Clerk\n2. Get or create database user with `getUserFromClerkId()`\n3. Verify resource ownership when applicable\n4. Return JSON response with appropriate status codes\n\n### Component Architecture\n- All components use `\"use client\"` directive when needed for interactivity\n- UI components are built with Radix UI primitives + Tailwind styling\n- Form components use React Hook Form with Zod schemas\n- Data fetching uses TanStack Query for caching and state management\n\n### Data Fetching with TanStack Query\nThis project uses TanStack Query (React Query) for all client-side API requests with a consistent approach:\n\n#### API Client Pattern\n- **Centralized HTTP Client**: All API calls use the `api` utility from `@/lib/api-client`\n- **Error Handling**: Automatic error parsing and type-safe error responses\n- **Type Safety**: Generic API client with TypeScript support\n\n```typescript\n// Example API client usage\nimport { api } from '@/lib/api-client';\n\n// GET request\nconst data = await api.get<UserData>('/api/users/me');\n\n// POST request with data\nconst result = await api.post('/api/users', { name: 'John' });\n```\n\n#### Custom Hooks Pattern\nAll data fetching is encapsulated in custom hooks following these conventions:\n\n**Query Hooks (GET requests):**\n```typescript\nexport function useUsers() {\n  return useQuery<User[]>({\n    queryKey: ['users'],\n    queryFn: () => api.get('/api/users'),\n    staleTime: 5 * 60_000, // 5 minutes\n    gcTime: 10 * 60_000, // 10 minutes\n  });\n}\n```\n\n**Mutation Hooks (POST/PUT/DELETE requests):**\n```typescript\nexport function useCreateUser() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (userData: CreateUserData) =>\n      api.post('/api/users', userData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n    },\n  });\n}\n```\n\n#### Hook Organization\n- **`src/hooks/use-*.ts`**: General application hooks\n- **`src/hooks/admin/use-admin-*.ts`**: Admin-specific hooks\n- Each hook file exports related query and mutation hooks\n- Hooks include proper TypeScript interfaces for request/response data\n\n#### Caching Strategy\n- **Query Keys**: Structured as arrays for easy invalidation (e.g., `['users', userId]`)\n- **Stale Time**: Varies by data type (30s for real-time, 5min for settings)\n- **Garbage Collection**: Automatic cleanup of unused cache entries\n- **Background Refetching**: Keeps data fresh when window gains focus\n\n#### Error Handling\n- **ApiError Class**: Custom error type with status codes and response details\n- **Consistent Error States**: All hooks provide standardized error information\n- **User Feedback**: Automatic toast notifications for mutation errors\n\n#### Important Rules\n- **NEVER use fetch() directly** in client components - always use custom hooks\n- **Server-side API routes** can use fetch() for external service calls\n- **All mutations** should invalidate relevant queries for cache consistency\n- **Loading states** are automatically handled by TanStack Query\n\n### Environment Variables Required\n- `NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY` - Clerk public key\n- `CLERK_SECRET_KEY` - Clerk secret key\n- `CLERK_WEBHOOK_SECRET` - For Clerk webhooks\n- `DATABASE_URL` - PostgreSQL connection string\n- Additional Clerk URLs and optional Stripe keys (see .env.example)\n\n### Path Aliases\n- `@/*` maps to `./src/*`\n- Components import example: `import { Button } from \"@/components/ui/button\"`\n\n### TypeScript Configuration\n- Strict mode is disabled (`\"strict\": false`)\n- Path aliases configured for `@/` imports\n- No implicit any warnings (`\"noImplicitAny\": false`)\n\n### Admin Settings Management\nThe admin settings have been split into specialized pages for better organization:\n\n#### Settings Structure\n- **`/admin/settings`**: Overview page with navigation cards to sub-settings\n- **`/admin/settings/features`**: Feature cost configuration (credits per functionality)\n- **`/admin/settings/plans`**: Billing plans management (Clerk synchronization)\n\n#### Billing Plans Management (Clerk Sync-Only)\n- **Sync-Only Approach**: Plans cannot be created manually in the UI\n- **Clerk Integration**: All plans must be created in Clerk Dashboard first\n- **Synchronization Process**:\n  1. Create billing plans in Clerk Dashboard\n  2. Use \"Sync with Clerk\" button to import plans\n  3. Configure credits and display names locally\n  4. Save changes to persist settings\n- **Local Configuration**: Only plan names and credit allocations are editable\n- **Plan IDs**: Read-only, sourced directly from Clerk\n- **Status Management**: Plans can be activated/deactivated locally\n\n#### Feature Costs Configuration\n- **Direct Management**: Feature costs can be edited directly\n- **Validation**: Ensures non-negative integer values for credits\n- **Real-time Updates**: Changes reflected immediately with proper validation\n\n### Important Patterns\n- Database access only through Prisma client singleton in `lib/db.ts`\n- Authentication utilities centralized in `lib/auth-utils.ts`\n- Protected routes use client-side redirect in layout component\n- Glass morphism UI design with backdrop blur effects\n- Responsive design with mobile-first approach\n- Admin settings follow sync-first approach for external integrations\n","size_bytes":9119},"README.md":{"content":"# Template SaaS em Next.js\n\nUm template pronto para produção em Next.js com autenticação (Clerk), banco de dados (PostgreSQL + Prisma), billing e sistema de créditos. Inclui UI com Radix + Tailwind, TypeScript e estrutura organizada para acelerar entregas.\n\n> Template mantido pela **AI Coders Academy** — saiba mais em [`https://www.aicoders.academy/`](https://www.aicoders.academy/). Suporte: `suporte@aicoders.academy`.\n\n## Recursos\n- 🔐 Autenticação: Clerk com rotas protegidas e middleware.\n- 💾 Banco: PostgreSQL + Prisma ORM, modelos prontos (usuários, créditos, billing).\n- 💳 Pagamentos: pronto para integração com Stripe e webhooks.\n- 🪙 Créditos: rastreamento/consumo de créditos por operação.\n- 🤖 AI Chat: integração com Vercel AI SDK com provedores selecionáveis (OpenAI, Anthropic, Google, Mistral e OpenRouter) e streaming.\n- 📎 Anexos no Chat: upload de arquivos para Vercel Blob e anexos clicáveis na conversa.\n- 🎨 UI: Radix UI + Tailwind CSS.\n- 🔒 Type-safe: TypeScript do frontend ao backend.\n\n## Primeiros Passos\n### Pré-requisitos\n- Node.js 18+\n- Banco PostgreSQL\n- Conta no Clerk (obrigatório)\n- (Opcional) Conta no Stripe\n\n### Configuração\n1. Clonar o repositório:\n```bash\ngit clone <your-repo-url>\ncd nextjs-saas-template\n```\n2. Instalar dependências:\n```bash\nnpm install\n```\n3. Variáveis de ambiente:\n```bash\ncp .env.example .env.local\n```\n4. Editar `.env.local`:\n   - Clerk: `NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY`, `CLERK_SECRET_KEY` (e `CLERK_WEBHOOK_SECRET` se usar webhooks)\n   - Banco: `DATABASE_URL`\n   - App: `NEXT_PUBLIC_APP_URL`\n   - Analytics (opcional): `NEXT_PUBLIC_GTM_ID`, `NEXT_PUBLIC_GA_ID`, `NEXT_PUBLIC_FACEBOOK_PIXEL_ID`\n   - Stripe (opcional): `STRIPE_SECRET_KEY`, `STRIPE_WEBHOOK_SECRET`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`\n   - AI (opcional): `OPENAI_API_KEY`, `ANTHROPIC_API_KEY`, `GOOGLE_GENERATIVE_AI_API_KEY`, `MISTRAL_API_KEY`, `OPENROUTER_API_KEY`\n   - Uploads (opcional): `BLOB_READ_WRITE_TOKEN` (Vercel Blob)\n5. Preparar o banco (dev):\n```bash\nnpm run db:push\n```\n6. Iniciar o servidor de desenvolvimento:\n```bash\nnpm run dev\n```\nAcesse http://localhost:3000.\n\n## AI Chat (Vercel AI SDK)\n- Rota de API: `POST /api/ai/chat` usa `ai` (Vercel AI SDK) com `streamText` para respostas via SSE.\n- Provedores suportados: OpenAI, Anthropic, Google, Mistral e OpenRouter (compatível com OpenAI via `baseURL`).\n- Página protegida: `/ai-chat` com seletor de provedor/modelo e chat com streaming.\n- Geração de imagem (OpenRouter): alternar “Modo: Imagem” na página; envia para `POST /api/ai/image` e retorna imagens como data URLs.\n - Anexos: botão de clipe para enviar arquivo ao Vercel Blob e inserir links nos prompts.\n\nCréditos\n- Custos por feature e créditos por plano são configuráveis pelo admin:\n  - Página: `/admin/settings` (abas: custos e planos/mensalidade de créditos)\n  - API pública: `GET /api/credits/settings` para a UI\n  - Custos padrão: `ai_text_chat` e `ai_image_generation` (sobrepostos por overrides)\n- Créditos por plano: defina `Free` e mapeie IDs do Clerk (`cplan_*`) para `{ name, credits }` no Admin (persistidos em `AdminSettings`)\n- Enforced no backend via `validateCreditsForFeature`/`deductCreditsForFeature` e integrados na UI via `useCredits().getCost()`/`canPerformOperation()`.\n- Reembolso automático:\n  - Chat: se a chamada ao provedor falhar após o débito, o sistema reembolsa e retorna 502\n  - Imagem: reembolsa em respostas inválidas/erros ou sem imagens\n\nConfiguração\n- Defina as chaves no `.env.local` (somente as que for usar):\n  - `OPENAI_API_KEY`, `ANTHROPIC_API_KEY`, `GOOGLE_GENERATIVE_AI_API_KEY`, `MISTRAL_API_KEY`, `OPENROUTER_API_KEY`\n- Abra `/ai-chat`, selecione provedor/modelo e envie mensagens.\n\nExtensão\n- Para adicionar modelos, edite `MODELS` em `src/app/(protected)/ai-chat/page.tsx`.\n- Para novos provedores, use os clients do SDK (`@ai-sdk/*`) e ajuste `getModel` em `src/app/api/ai/chat/route.ts`.\n\n### Uploads de Arquivos (Vercel Blob)\n- API: `POST /api/upload` (multipart/form-data com campo `file`). Requer sessão (Clerk).\n- Armazena em `uploads/<clerkUserId>/<timestamp>-<arquivo>` no Blob Store vinculado ao token.\n- Retorna `{ url, pathname, contentType, size, name }`.\n- Habilitar: defina `BLOB_READ_WRITE_TOKEN` em `.env.local`. O token já inclui Store/Região; não é preciso configurar no código.\n- Base URL padrão: `https://blob.vercel-storage.com` (ou domínio customizado se configurado no Vercel Blob).\n- Detalhes: veja `docs/uploads.md`.\n\n## Estrutura do Projeto\n```\nsrc/\n├── app/\n│   ├── (public)/         # Rotas públicas (landing, auth)\n│   ├── (protected)/      # Rotas protegidas (dashboard, billing)\n│   └── api/              # API Routes (App Router)\n├── components/\n│   ├── ui/               # Componentes de UI reutilizáveis\n│   └── credits/          # Componentes do sistema de créditos\n├── hooks/                # Hooks React personalizados\n└── lib/                  # Auth, DB, utilidades, domínios e queries\n    └── queries/          # Camada de acesso a dados (DAL) para uso em Server Components\n```\n\n### Marca & Metadados\n- Configuração central da marca: `src/lib/brand-config.ts`\n  - Nome, descrição, palavras-chave, URL pública, logos/ícones e imagem OG\n  - IDs de analytics/pixels (GTM, GA4, Meta Pixel)\n- Usos:\n  - Metadados globais em `src/app/layout.tsx`\n  - Header/Footer públicos\n  - Injeção de pixels via `AnalyticsPixels`\n- Guia: veja `docs/brand-config.md`\n\n## Recursos Principais\n### Autenticação\n- Páginas de login/cadastro com Clerk\n- Rotas protegidas via middleware (`src/middleware.ts`)\n\n### Banco de Dados\n- Prisma ORM + PostgreSQL\n- Modelos para usuários e créditos\n\n### Acesso a Dados (padrão atualizado)\n- Nunca importe o Prisma Client (`@/lib/db`) em Client Components ou no browser.\n- Server Components não devem executar queries diretamente via Prisma. Em vez disso, consuma funções da camada de queries em `src/lib/queries/*`.\n  - Exemplo: `getActivePlansSorted()` em `src/lib/queries/plans.ts` usado por `src/app/(public)/page.tsx`.\n- API Routes (`src/app/api/*`) e Server Actions podem usar Prisma diretamente ou reutilizar funções da camada de queries.\n\n### Créditos & Billing\n- Utils de validação/uso em `src/lib/credits/*`\n- Páginas de assinatura e handlers de webhook\n\n#### Créditos: Fonte de Verdade no Servidor\n- A UI lê o saldo sempre do backend: `GET /api/credits/me`.\n- `useCredits()` usa React Query para buscar e manter atualizado (30s e ao focar a janela).\n- Após consumir créditos (ex.: chat ou imagem), a UI chama `refresh()` para refetch imediato.\n- Hook: `src/hooks/use-credits.ts` expõe `{ credits, isLoading, canPerformOperation, getCost, refresh }` e lê `GET /api/credits/settings` para custos dinâmicos.\n- Health check de enums/Prisma: `GET /api/admin/health/credits-enum` (somente admin) valida o mapeamento `Feature → OperationType`.\n\n#### Packs de Créditos (compra avulsa)\n- Para crédito avulso (fora da assinatura), mapeie os `Stripe Price IDs` para a quantidade de créditos em `src/lib/clerk/credit-packs.ts`.\n  - Exemplo:\n    ```ts\n    export const CREDIT_PACK_PRICE_TO_CREDITS = {\n      'price_small_pack': 100,\n      'price_medium_pack': 500,\n    }\n    ```\n- O webhook do Clerk em `src/app/api/webhooks/clerk/route.ts` soma os créditos correspondentes quando recebe `invoice.payment_succeeded` contendo esses prices.\n- Preencha seus Price IDs reais no arquivo acima. Se o pagamento for apenas renovação de assinatura, os créditos são atualizados pelos eventos `subscription.updated`.\n\n#### Créditos no Backend (configuração e uso)\n- Defaults: `src/lib/credits/feature-config.ts` (mapeadas para `OperationType`)\n- Overrides persistentes (admin): `AdminSettings` + helpers em `src/lib/credits/settings.ts`\n  - `getFeatureCost(feature)` e `getPlanCredits(planId)` retornam valores efetivos\n- Validação e desconto transacional:\n```ts\nimport { validateCreditsForFeature, deductCreditsForFeature } from '@/lib/credits/deduct'\nimport { type FeatureKey } from '@/lib/credits/feature-config'\n\nconst feature: FeatureKey = 'ai_text_chat'\nawait validateCreditsForFeature(clerkUserId, feature)\n\nawait deductCreditsForFeature({\n  clerkUserId,\n  feature,\n  projectId,\n  details: { tasks: 3 },\n  quantity: 3,\n})\n```\nObservação: ajuste `FEATURE_CREDIT_COSTS` como base e/ou use `/admin/settings` para overrides.\n\n#### Planos do Clerk → Créditos\n- No Admin (`/admin/settings`), mapeie seus IDs de planos do Clerk (`cplan_*`) para um `name` (exibição interna) e `credits` (mensais).\n- Não há plano gratuito fixo no código. Se houver, crie-o no Clerk e mapeie o ID do plano com nome e créditos no Admin.\n- O webhook em `src/app/api/webhooks/clerk/route.ts` usa `getPlanCredits(planId)` passando o `subscription.plan_id` para atualizar o saldo mensal.\n\nImportação de Planos (Clerk)\n- No Admin → Settings (aba Planos), você pode:\n  - Detectar planos via hook do Clerk (quando disponível) e adicioná-los rapidamente\n  - Tentar importar via API do backend (`GET /api/admin/clerk/plans`, requer `CLERK_SECRET_KEY`)\n  - Colar um JSON com a lista de planos e nomes\n\n### Painel Admin\n- Acesso: `/admin` (SSR guard + middleware). Configure `.env.local`: `ADMIN_EMAILS` ou `ADMIN_USER_IDS`.\n- Funcionalidades:\n  - Usuários: listar, ajustar créditos, excluir\n  - Convidar usuário por e‑mail (via Clerk) com toasts\n  - Convites pendentes: visualizar, reenviar e revogar\n  - Sincronizar usuários do Clerk → DB (backup caso webhook falhe)\n- Requisitos Clerk para convites:\n  - Invitations e envio de e‑mails habilitados no projeto Clerk\n  - Redirect permitido: `${NEXT_PUBLIC_APP_URL}/sign-up`\n- APIs Admin relevantes:\n  - `POST /api/admin/users/invite`\n  - `GET  /api/admin/users/invitations`\n  - `POST /api/admin/users/invitations/:id/resend`\n  - `POST /api/admin/users/invitations/:id/revoke`\n  - `POST /api/admin/users/sync` ({ pageSize?, maxPages? })\n  - `GET  /api/admin/health/credits-enum`\n  - `PUT  /api/admin/credits/:id` (ajuste por saldo)\n  - `PUT  /api/admin/users/:id/credits` (ajuste via ID do usuário)\n  - `DELETE /api/admin/users/:id` (desativa o usuário – soft delete)\n  - `POST   /api/admin/users/:id/activate` (reativa o usuário)\n\nNotas Prisma\n- O Prisma Client é gerado em `prisma/generated/client`.\n- O código usa esse client gerado (não `@prisma/client`) para evitar divergências de enums/tipos em runtime.\n- Atalho de tipos: `src/lib/prisma-types.ts` reexporta `OperationType` do client gerado.\n\n## Scripts\n- `npm run dev` — Dev server\n- `npm run build` — Gera Prisma Client e build de produção\n- `npm start` — Servidor em produção\n- `npm run lint` — Lint do Next/TypeScript\n- `npm run typecheck` — Verificação de tipos\n- `npm run db:push` — Sincroniza schema (dev)\n- `npm run db:migrate` — Migrações Prisma\n- `npm run db:studio` — Prisma Studio\n\n## Deploy\nPronto para Vercel/Netlify/Node. Na Vercel:\n- Configure variáveis de `.env.example` (Clerk, `DATABASE_URL`, Stripe, etc.)\n- Use runtime Node (não Edge) para endpoints com Prisma\n- Aponte webhooks (Clerk/Stripe) para rotas em `src/app/api/webhooks/*`\n\n### Variáveis de Ambiente (produção)\n- `NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY`\n- `CLERK_SECRET_KEY`\n- `DATABASE_URL`\n- Outras de `.env.example`, conforme necessário\n\n## Guias de Agentes\nUse estes guias/prompts ao iniciar tarefas ou revisões:\n- `AGENTS.md` — Diretrizes do Repositório (estrutura, scripts, estilo, PRs)\n- `agents/README.md` — Índice dos Guias\n- `agents/security-check.md` — Verificação de Segurança\n- `agents/frontend-development.md` — Desenvolvimento Frontend\n- `agents/backend-development.md` — Desenvolvimento Backend\n- `agents/database-development.md` — Banco de Dados\n- `agents/architecture-planning.md` — Arquitetura & Planejamento\n\n## Guia Interno de Desenvolvimento (pt-BR)\nGuia detalhado para Clerk, banco, deploy na Vercel e uso de agentes.\n\n### Variáveis de Ambiente (copie de `.env.example` para `.env.local`)\n- Clerk:\n  - `NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY` (pública)\n  - `CLERK_SECRET_KEY` (secreta)\n  - `CLERK_WEBHOOK_SECRET` (webhooks)\n- URLs do Clerk (padrões do template):\n  - `NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in`\n  - `NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up`\n  - `NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard`\n  - `NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/dashboard`\n- Banco: `DATABASE_URL=postgresql://user:password@host:5432/saas_template`\n- App: `NEXT_PUBLIC_APP_URL=http://localhost:3000`\n- Stripe (opcional): `STRIPE_SECRET_KEY`, `STRIPE_WEBHOOK_SECRET`, `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY`\n\n### Configurar Clerk\n1) Crie um app em dashboard.clerk.com e copie as chaves.\n2) Defina `NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY` e `CLERK_SECRET_KEY` em `.env.local`.\n3) Redirects/origens autorizadas:\n   - Dev: `http://localhost:3000`\n   - Produção: domínio `.vercel.app` e custom domain\n4) Rotas de auth: `src/app/(public)/sign-in` e `src/app/(public)/sign-up`. Rotas protegidas: `src/app/(protected)`.\n5) Webhooks (opcional): configure endpoint e `CLERK_WEBHOOK_SECRET`.\n\n### Acesso Admin\n- Defina ao menos um admin via variáveis de ambiente:\n  - `ADMIN_EMAILS=admin@seudominio.com,ops@seudominio.com`\n  - ou `ADMIN_USER_IDS=usr_123,usr_456` (IDs do Clerk)\n- Acesse o painel: `/admin` (somente admins conseguem entrar). As APIs em `src/app/api/admin/*` validam admin no servidor.\n\n### Configurar Banco de Dados (Prisma + Postgres)\nOpção A — Docker local:\n```\ndocker run --name saas-postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=saas_template -p 5432:5432 -d postgres:16\n```\n`DATABASE_URL=postgresql://postgres:postgres@localhost:5432/saas_template`\n\nOpção B — Gerenciado (Neon, Supabase, RDS): crie a base e copie a URL.\n\nSincronizar/Migrar:\n- Rápido (dev): `npm run db:push`\n- Versionado (recomendado): `npm run db:migrate`\n- Inspecionar: `npm run db:studio`\n\nObservações:\n- `npm run dev` e `npm run build` executam `prisma generate` automaticamente.\n- O Prisma Client é gerado em `prisma/generated/client` e não é versionado (gitignored). Se faltar, rode `npx prisma generate`.\n- Mantenha `userId`/`workspaceId` em modelos multi-tenant.\n\n### Rodar Localmente\n1) `npm install`\n2) Configure `.env.local`\n3) Inicie banco (`db:push` ou `db:migrate`)\n4) `npm run dev` → http://localhost:3000\n5) Valide sign-in/sign-up e acesso às rotas protegidas\n\n## Webhooks do Clerk (Local)\nUse um túnel público para receber os eventos do Clerk no seu ambiente local.\n\nPassos rápidos\n- Inicie o app: `npm run dev`\n- Inicie um túnel (escolha uma opção):\n  - Cloudflare Tunnel (recomendado): `npm run tunnel:cf`\n  - ngrok (alternativa): `npm run tunnel:ngrok`\n- No Clerk → Webhooks → Add endpoint\n  - URL: `https://<URL-DO-TUNEL>/api/webhooks/clerk`\n  - Copie o “Signing secret” e adicione em `.env.local`: `CLERK_WEBHOOK_SECRET=whsec_...`\n- Envie um “Test event” no Clerk para validar.\n\nNotas\n- A rota do webhook está em `src/app/api/webhooks/clerk/route.ts` e valida as assinaturas Svix.\n- Algumas versões do Vercel CLI não suportam `vercel dev --tunnel`. Use Cloudflare/ngrok se o túnel do Vercel não estiver disponível.\n- Guia completo: veja `docs/dev-webhooks.md`.\n\n## Documentação Complementar\n- Admin detalhado: `docs/admin.md`\n- Créditos e sincronização: `docs/credits.md`\n- Uploads de arquivos: `docs/uploads.md`\n\n\n### Deploy na Vercel\n1) Importe o repositório\n2) Configure variáveis de ambiente (Clerk, `DATABASE_URL`, Stripe)\n3) Build & Runtime:\n   - Build padrão do Next (gera Prisma Client)\n   - Runtime Node (não Edge) para Prisma\n4) Banco: use provedor acessível pela Vercel (Neon/Supabase); habilite pooling se necessário\n5) Clerk produção: adicione domínios `.vercel.app` e customizados\n6) Webhooks: aponte Stripe/Clerk para `src/app/api/webhooks/*` e defina `*_WEBHOOK_SECRET`\n7) Pós-deploy: teste auth, rotas protegidas, acesso ao DB e créditos\n\n### Usar os Agents (prompts)\n- Leia `AGENTS.md` e `agents/README.md`\n- Copie o prompt do arquivo em `agents/` pertinente e inclua contexto (arquivos/rotas/contratos)\n- Anexe o guia do agente na descrição do PR\n - Para recursos que consomem créditos, use as keys: `ai_text_chat` e `ai_image_generation` (custos em `src/lib/credits/feature-config.ts`)\n\n### Prompts Rápidos (exemplos)\n- Frontend (App Router + UI):\n```\nImplemente a tela \"Billing\" em `src/app/(protected)/billing/page.tsx` usando `Button`, `Card` e `Form` de `src/components/ui`.\nValide com react-hook-form + Zod. Estilize com Tailwind. Liste passos de validação manual e gere screenshots.\n```\n- API Route (Zod + Prisma + Auth):\n```\nCrie `src/app/api/api-keys/route.ts` com POST/GET. Valide body/query via Zod, autentique com Clerk (`@/lib/api-auth`).\nUse Prisma com escopo por userId. Respostas via NextResponse.json com status corretos.\nInclua um teste manual (curl/HTTPie) no PR.\n```\n- Banco (Prisma):\n```\nAdicione um campo `avatar` opcional ao modelo `AIAgent`. Rode `npm run db:migrate` e ajuste selects/usos.\n```\n- Arquitetura (planejamento rápido):\n```\nListe objetivos, URLs, componentes reutilizados/novos, campos/modelos Prisma afetados, endpoints, regras de auth/tenancy, indicadores de sucesso e plano de rollout.\n```\n- Segurança (pré-merge):\n```\nVerifique segredos, validação de entrada (Zod), escopo Prisma por usuário/workspace, respostas de erro sem vazamento, webhooks (assinatura/idempotência) e consumo de créditos.\n```\n\n### Solução de Problemas (FAQ)\n- Prisma em produção: use runtime Node e confirme `prisma generate` no build\n- Login falha no deploy: verifique domínios/redirects no Clerk e variáveis na Vercel\n- `DATABASE_URL` inválida: teste conexão localmente; confirme SSL/Pooling no provedor\n- Tipos/ESLint: execute `npm run typecheck` e `npm run lint` antes do PR\n\n## Licença\nMIT\n","size_bytes":17932},"next.config.ts":{"content":"import type { NextConfig } from \"next\";\nimport path from \"path\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  // 禁用 Next.js 热重载，由 nodemon 处理重编译\n  reactStrictMode: false,\n  // Configure for Replit environment\n  serverExternalPackages: ['@prisma/client'],\n  // Allow cross-origin requests for Replit proxy\n  allowedDevOrigins: ['f81561b4-03d6-4284-88be-174420d2dab7-00-g127c3pfumcx.spock.replit.dev', '127.0.0.1'],\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'images.unsplash.com',\n      },\n      {\n        protocol: 'https',\n        hostname: 'html.tailus.io',\n      },\n    ],\n  },\n  webpack: (config, { dev }) => {\n    // Configure path aliases\n    config.resolve.alias = {\n      ...config.resolve.alias,\n      '@': path.resolve(__dirname, './src'),\n    };\n    return config;\n  },\n\n};\n\nexport default nextConfig;\n","size_bytes":949},"playwright.config.ts":{"content":"import { defineConfig, devices } from '@playwright/test'\n\nconst IS_CI = !!process.env.CI\n\nexport default defineConfig({\n  testDir: './tests/e2e',\n  fullyParallel: true,\n  timeout: 30_000,\n  expect: {\n    timeout: 5_000,\n  },\n  retries: IS_CI ? 2 : 0,\n  reporter: IS_CI ? [['html', { outputFolder: 'playwright-report', open: 'never' }]] : 'list',\n  use: {\n    baseURL: process.env.PLAYWRIGHT_BASE_URL || 'http://127.0.0.1:3100',\n    trace: 'on-first-retry',\n    screenshot: 'only-on-failure',\n    video: IS_CI ? 'retain-on-failure' : 'off',\n    viewport: { width: 1280, height: 720 },\n  },\n  webServer: {\n    command: 'npm run dev:e2e',\n    url: 'http://127.0.0.1:3100',\n    reuseExistingServer: !IS_CI,\n    stdout: 'pipe',\n    stderr: 'pipe',\n    timeout: 120_000,\n  },\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n  ],\n})\n","size_bytes":874},"prevc-template.md":{"content":"# Feature Planning Template\n\nUse this template to plan new features.\n\n## Feature Overview\n**Feature Name**: [Feature Name]\n**Description**: [Brief description of what this feature does]\n**Priority**: [High/Medium/Low]\n**Estimated Effort**: [Small/Medium/Large]\n\n## Feature\n\n### 1. Plan\n**Objective**: Define requirements, scope, and technical approach\n\n#### Requirements\n- [ ] **Functional Requirements**\n  - [List what the feature should do]\n  - [User stories or use cases]\n  \n- [ ] **Non-Functional Requirements**\n  - [Performance requirements]\n  - [Security considerations]\n  - [Accessibility needs]\n\n#### Technical Specifications\n- [ ] **Database Changes**\n  - [New models/tables needed]\n  - [Schema modifications]\n  - [Prisma migrations required]\n\n- [ ] **API Endpoints**\n  - [List of endpoints to create/modify]\n  - [Authentication requirements]\n  - [Input/output schemas]\n\n- [ ] **UI Components**\n  - [New components needed]\n  - [Existing components to modify]\n  - [Design patterns to follow]\n\n#### Architecture Considerations\n- [ ] **Authentication & Authorization**\n  - [Clerk integration requirements]\n  - [Permission levels needed]\n  \n- [ ] **State Management**\n  - [React Query patterns]\n  - [Client vs server state]\n  \n- [ ] **Routing**\n  - [New routes needed]\n  - [Protected vs public routes]\n\n\n#### Technology Research\n- [ ] **Dependencies**\n  - [New packages to install]\n  - [Version compatibility checks]\n  \n- [ ] **Best Practices**\n  - [Industry standards for this feature type]\n  - [Security best practices]\n  \n- [ ] **Integration Points**\n  - [Third-party services]\n  - [Internal system dependencies]\n\n#### Reference Documentation\n- [ ] **Project Documentation (local)**\n  - [Docs index](./docs/README.md)\n  - [Architecture](./docs/architecture.md)\n  - [Backend](./docs/backend.md)\n  - [Frontend](./docs/frontend.md)\n  - [Components](./docs/components.md)\n  - [API](./docs/api.md)\n  - [Authentication](./docs/authentication.md)\n  - [Database](./docs/database.md)\n  - [Development Guidelines](./docs/development-guidelines.md)\n\n\n\n### Phases\n#### Tasks\n\n- [ ] **Define Project Phases**\n  - [List main development phases]\n  - [Define milestones and objectives for each phase]\n  - [Establish dependencies between phases]\n  - [Estimate approximate duration]\n\n- [ ] **Tasks per Phase**\n  - [Detail specific tasks]\n  - [Prioritize by importance/dependency]\n  - [Assign suggested owners]\n  - [Define completion criteria]\n\n- [ ] **Schedule and Milestones**\n  - [Establish key dates]\n  - [Define checkpoints]\n  - [Plan buffers for contingencies]\n  - [Align with team availability]\n\n- [ ] **Required Resources**\n  - [List technical resources]\n  - [Identify training needs]\n  - [Plan team allocation]\n  - [Estimate costs per phase]\n\n\n## AI Agents & Tools to Consider\nSee [agents/README.md](./agents/README.md) and the [./agents](./agents) directory for available agents.\n","size_bytes":2879},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\nimport tailwindcssAnimate from \"tailwindcss-animate\";\n\nconst config: Config = {\n    darkMode: \"class\",\n    content: [\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n  \textend: {\n  \t\tcolors: {\n  \t\t\tbackground: 'hsl(var(--background))',\n  \t\t\tforeground: 'hsl(var(--foreground))',\n  \t\t\tcard: {\n  \t\t\t\tDEFAULT: 'hsl(var(--card))',\n  \t\t\t\tforeground: 'hsl(var(--card-foreground))'\n  \t\t\t},\n  \t\t\tpopover: {\n  \t\t\t\tDEFAULT: 'hsl(var(--popover))',\n  \t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n  \t\t\t},\n  \t\t\tprimary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--primary))',\n  \t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n  \t\t\t},\n  \t\t\tsecondary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n  \t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n  \t\t\t},\n  \t\t\tmuted: {\n  \t\t\t\tDEFAULT: 'hsl(var(--muted))',\n  \t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n  \t\t\t},\n  \t\t\taccent: {\n  \t\t\t\tDEFAULT: 'hsl(var(--accent))',\n  \t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n  \t\t\t},\n  \t\t\tdestructive: {\n  \t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n  \t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n  \t\t\t},\n  \t\t\tborder: 'hsl(var(--border))',\n  \t\t\tinput: 'hsl(var(--input))',\n  \t\t\tring: 'hsl(var(--ring))',\n  \t\t\tchart: {\n  \t\t\t\t'1': 'hsl(var(--chart-1))',\n  \t\t\t\t'2': 'hsl(var(--chart-2))',\n  \t\t\t\t'3': 'hsl(var(--chart-3))',\n  \t\t\t\t'4': 'hsl(var(--chart-4))',\n  \t\t\t\t'5': 'hsl(var(--chart-5))'\n  \t\t\t}\n  \t\t},\n  \t\tborderRadius: {\n  \t\t\tlg: 'var(--radius)',\n  \t\t\tmd: 'calc(var(--radius) - 2px)',\n  \t\t\tsm: 'calc(var(--radius) - 4px)'\n  \t\t}\n  \t}\n  },\n  plugins: [tailwindcssAnimate],\n};\nexport default config;\n","size_bytes":1708},"agents/README.md":{"content":"# Agent Guides Index\n\nUse these concise prompts when kicking off tasks. Each guide includes context for this Next.js + Prisma + Clerk stack and clear deliverables to paste into PRs.\n\n- `security-check.md`: Pre-merge security review (authZ/authN, input validation, Prisma scoping, webhooks, credits, dependencies).\n- `frontend-development.md`: App Router pages/components, Page Metadata System, Tailwind, forms with Zod + react-hook-form, React Query, a11y, and quality gates.\n- `backend-development.md`: API route contracts, Zod validation, Clerk-based auth, Prisma access patterns, credits integration, safe responses.\n- `database-development.md`: Prisma schema evolution, migrations, tenancy modeling, defaults/constraints, indexing, example model snippet.\n- `architecture-planning.md`: Planning template covering goals, flows, data, APIs, security, performance, and rollout.\n\nTip: Link the relevant guide in your PR description and check `npm run lint`, `npm run typecheck`, and `npm run build` before review.\n","size_bytes":1013},"agents/architecture-planning.md":{"content":"# Architecture & Planning – Prompt\n\nObjective\n- Define a minimal, pragmatic plan before implementation: scope, flows, data, APIs, and risks.\n\nContext\n- Next.js App Router (`src/app`), UI components in `src/components/*`, Page Metadata System in `src/contexts/page-metadata.tsx`, server logic in API routes, Prisma models in `prisma/schema.prisma`. Domain includes Users, Features, Credits, and AI integrations.\n\nDeliverables (paste in PR description or `docs/architecture.md`)\n- Problem & Goals: 2–3 bullets with outcomes and non-goals.\n- User Flows: Primary flow(s) with URL map (e.g., `/dashboard/...`). Sketch components reused/added. For protected routes, specify page metadata (title, description, breadcrumbs).\n- Data Model Impact: New/changed Prisma models/fields, relations, indexes, and cascade rules.\n- API Surface: New/changed endpoints with method, path, request/response examples, errors. For credit-gated features, specify the feature key (e.g., `ai_text_chat` or `ai_image_generation`) and expected cost.\n  - For AI usage, define keys and costs explicitly and ensure `OperationType` enums exist and are mapped.\n- External AI: If integrating LLMs, list supported providers/models, env keys required, and fallback/allowlist behavior for invalid inputs.\n- Security & Tenancy: Auth requirements, ownership checks, rate/credit usage, webhook needs.\n- Performance: Expected query patterns and indexes; SSR vs Client components. For client-side data fetching, specify TanStack Query strategy (query vs mutation, caching behavior, invalidation patterns).\n- Frontend Data Flow: Define custom hooks needed for TanStack Query integration, query keys structure, and cache management strategy.\n- Rollout: Migration plan, flags/toggles, metrics to watch.\n\nProcess Steps\n1) Clarify: Restate the requirement; confirm constraints and acceptance criteria.\n2) Inventory: Identify affected routes, components, models, and scripts.\n3) Draft: Produce the Deliverables above with concise snippets.\n4) Review: Sanity-check with `npm run typecheck`, `npm run build` assumptions and Prisma design.\n5) Plan Tasks: Break into small, independently shippable PRs.\n\nTips\n- Reuse existing patterns (credits, auth helpers, UI primitives) before adding new abstractions.\n- Prefer explicit data ownership via `userId`/`workspaceId`. Index what you filter by.\n- For AI: proxy calls via server routes only; never expose API keys in the client. Consider rate-limits and credit gating.\n  - Credit gating: require credits before invoking providers; deduct on request. Decide if images charge per-request or per-image (`quantity`).\n- Frontend Integration: All client-side API calls must use TanStack Query through custom hooks. Never use `fetch()` directly in components. Plan hook architecture and error handling patterns early.\n\n## TanStack Query Architecture Planning\n\nWhen planning features that involve client-side data fetching, consider:\n\n### Custom Hook Strategy\n- **Query Hooks**: For data fetching (GET operations)\n  - Structure: `use{Resource}(params?)` (e.g., `useUsers(filters)`)\n  - Query Keys: `[domain, resource, params]` format for cache management\n  - Error handling via API client, success data returned directly\n- **Mutation Hooks**: For data modifications (POST/PUT/DELETE operations)\n  - Structure: `use{Action}{Resource}()` (e.g., `useCreateUser()`, `useUpdateUser()`)\n  - Include optimistic updates and cache invalidation strategies\n  - Toast notifications for success/error states\n\n### Cache Management Planning\n- **Stale Time**: How long data remains fresh (typically 1-5 minutes for user data)\n- **GC Time**: How long data stays in cache when inactive (typically 5-30 minutes)\n- **Invalidation**: Which mutations should invalidate which queries\n- **Background Refetch**: Whether data should refetch when window regains focus\n\n### Hook Architecture Examples\n\n#### Simple Resource Hook\n```typescript\n// For basic CRUD operations\nexport function useUsers(params: UserFilters = {}) {\n  return useQuery({\n    queryKey: ['admin', 'users', params],\n    queryFn: () => api.get('/api/admin/users', { params }),\n    staleTime: 2 * 60_000, // 2 minutes\n  });\n}\n```\n\n#### Paginated Resource Hook\n```typescript\n// For data with cursor/offset pagination\nexport function useInfiniteUsers(filters: UserFilters = {}) {\n  return useInfiniteQuery({\n    queryKey: ['admin', 'users', 'infinite', filters],\n    queryFn: ({ pageParam }) => api.get('/api/admin/users', {\n      params: { ...filters, cursor: pageParam }\n    }),\n    getNextPageParam: (lastPage) => lastPage.nextCursor,\n  });\n}\n```\n\n#### Mutation with Cache Updates\n```typescript\n// For operations that modify data\nexport function useUpdateUser() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: UserUpdate }) =>\n      api.put(`/api/admin/users/${id}`, data),\n    onSuccess: (updatedUser, variables) => {\n      // Update specific user in cache\n      queryClient.setQueryData(['admin', 'users', variables.id], updatedUser);\n      // Invalidate user lists\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n    },\n  });\n}\n```\n\n### Planning Considerations\n- **Data Relationships**: How updates to one resource affect others\n- **Real-time Needs**: Whether data needs real-time updates (consider WebSocket integration)\n- **Offline Support**: Whether mutations should queue when offline\n- **Background Sync**: Automatic refetching strategies for stale data\n\nBilling & Credits\n- If adding one-time credit purchases, document the flow: checkout → Stripe invoice → Clerk webhook (`invoice.payment_succeeded`) → `addUserCredits`.\n- Record which Stripe Price IDs correspond to credit packs and update `src/lib/clerk/credit-packs.ts` in the PR.\n- For subscriptions, confirm plan→credits mapping and refresh path via `subscription.updated`.\n","size_bytes":5869},"agents/backend-development.md":{"content":"# Backend Development – Prompt\n\nObjective\n- Implement API routes and server logic with strict validation, auth, and Prisma access control.\n\nContext\n- App Router API files live under `src/app/api/**/route.ts`. DB client in `src/lib/db.ts`. Auth helpers in `src/lib/api-auth.ts` and `src/lib/auth-utils.ts`. Credits logic in `src/lib/credits/*`.\n  - Feature costs: `src/lib/credits/feature-config.ts` (examples: `ai_text_chat`=1, `ai_image_generation`=5)\n  - Server Components use the query layer `src/lib/queries/*` (no direct Prisma in Server Components). API routes can use Prisma directly or reuse these query functions.\n\nSteps\n- Define endpoint contract: method(s), URL, request/response schema, errors.\n- Validation: Use Zod schemas for body/query. Reject unknown fields. Parse early.\n- Auth: Resolve the current user/session via Clerk helpers. Enforce tenant scoping by `userId`.\n- Data: Use Prisma CRUD with narrow `select`/`include`. Wrap multi-step changes in a transaction where needed.\n  - Never expose Prisma or raw DB access to client code. Keep `@/lib/db` imports server-only.\n- Credits: For billable operations, validate and deduct with:\n  - `validateCreditsForFeature(clerkUserId, feature as FeatureKey)` where `feature` is typed as `FeatureKey`\n  - `deductCreditsForFeature({ clerkUserId, feature, projectId, details, quantity })`\n- Responses: Return `NextResponse.json(data, { status })`. Do not leak internals in messages.\n- Webhooks: Verify signatures (Svix) and ensure idempotency keys.\n\nAI Providers (Vercel AI SDK)\n- API route example: `src/app/api/ai/chat/route.ts` uses `streamText` from `ai` and provider clients from `@ai-sdk/*`.\n- Providers supported: OpenAI, Anthropic, Google, Mistral, OpenRouter (OpenAI-compatible via `baseURL`).\n- Env keys (set only what you use): `OPENAI_API_KEY`, `ANTHROPIC_API_KEY`, `GOOGLE_GENERATIVE_AI_API_KEY`, `MISTRAL_API_KEY`, `OPENROUTER_API_KEY`.\n- Validation: allowlist `provider` and ensure `model` is valid for that provider.\n- Security: never leak keys to client; proxy requests server-side only. Consider rate limiting and credit gating for production.\n\nCredits for AI usage\n- Text chat: use `ai_text_chat` (1 credit) in `/api/ai/chat`.\n- Image generation: use `ai_image_generation` (5 credits) in `/api/ai/image` (optionally scale with `quantity: count`).\n- Call order: `validateCreditsForFeature` then `deductCreditsForFeature` before invoking provider.\n\nImage Generation (OpenRouter)\n- Endpoint: `POST /api/ai/image` (auth required), validates `{ model, prompt, size?, count? }`.\n- Transport: OpenRouter `chat/completions` with image modality; returns `{ images: string[] }` (data URLs).\n- Defaults: uses `google/gemini-2.5-flash-image-preview` unless overridden by body `model`.\n\nExample\n```ts\n// src/app/api/example/route.ts\nimport { NextResponse } from 'next/server'\nimport { z } from 'zod'\nimport { db } from '@/lib/db'\nimport { requireUser } from '@/lib/api-auth'\nimport { validateCreditsForFeature, deductCreditsForFeature } from '@/lib/credits/deduct'\nimport { type FeatureKey } from '@/lib/credits/feature-config'\n\nconst Body = z.object({ name: z.string().min(1) })\n\nexport async function POST(req: Request) {\n  const user = await requireUser()\n  const { name } = Body.parse(await req.json())\n  const feature: FeatureKey = 'ai_text_chat'\n  await validateCreditsForFeature(user.id, feature)\n  // Example using ApiKey model (projects/tasks removed)\n  const item = await db.apiKey.create({ data: { name, key: crypto.randomUUID(), userId: user.id } })\n  await deductCreditsForFeature({ clerkUserId: user.id, feature, details: { created: true, resource: 'apiKey' } })\n  return NextResponse.json({ item }, { status: 201 })\n}\n```\n\nQuality Gates\n- `npm run lint`, `npm run typecheck`, `npm run build` must pass. Add minimal logging; avoid PII.\n\nDeliverables\n- Route code + short PR notes (contract, validation, auth, test plan). Update `.env.example` if new env vars.\n\nCredits & Billing\n- Use centralized helpers: `validateCreditsForFeature` and `deductCreditsForFeature` from `src/lib/credits/deduct.ts`. Type feature keys via `FeatureKey`.\n- Monthly subscriptions: handled by Clerk webhook events `subscription.created/updated/deleted` and `subscriptionItem.active/updated` using `refreshUserCredits`.\n- One-time credit packs: map Stripe Price IDs to credit amounts in `src/lib/clerk/credit-packs.ts`. The Clerk webhook adds credits on `invoice.payment_succeeded` via `addUserCredits`.\n- Never trust client-provided amounts; only award credits for whitelisted price IDs.\n- If extending webhooks, consider idempotency with invoice IDs to avoid double-crediting on retries.\n - If using Clerk Billing plans, map `cplan_*` IDs to internal plan keys in `src/lib/clerk/plan-mapping.ts`.\n\n## Frontend Integration Considerations\n\nWhen developing API routes, consider how the frontend will consume them through TanStack Query:\n\n### Response Patterns\n- **Consistent Error Format**: Use standard error responses that the API client can parse\n- **Typed Interfaces**: Define TypeScript interfaces for request/response data that can be shared with frontend hooks\n- **Pagination**: Use consistent pagination patterns across all list endpoints\n- **Filter Parameters**: Support standard query parameters for filtering, sorting, and searching\n\n### Example API Route with Frontend Integration\n\n```typescript\n// src/app/api/admin/users/route.ts\nimport { NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { db } from '@/lib/db';\nimport { requireAdmin } from '@/lib/api-auth';\n\n// Schema for query parameters\nconst QuerySchema = z.object({\n  page: z.coerce.number().min(1).default(1),\n  pageSize: z.coerce.number().min(1).max(100).default(50),\n  search: z.string().optional(),\n  includeUsageCount: z.coerce.boolean().default(false),\n});\n\n// Response type that frontend hooks will use\nexport interface UsersResponse {\n  users: User[];\n  pagination: {\n    page: number;\n    pageSize: number;\n    total: number;\n    pages: number;\n  };\n}\n\nexport async function GET(request: Request) {\n  const admin = await requireAdmin();\n  const { searchParams } = new URL(request.url);\n\n  const { page, pageSize, search, includeUsageCount } = QuerySchema.parse(\n    Object.fromEntries(searchParams)\n  );\n\n  // Build query with proper filtering\n  const where = search\n    ? {\n        OR: [\n          { name: { contains: search, mode: 'insensitive' } },\n          { email: { contains: search, mode: 'insensitive' } },\n        ],\n      }\n    : {};\n\n  const [users, total] = await Promise.all([\n    db.user.findMany({\n      where,\n      skip: (page - 1) * pageSize,\n      take: pageSize,\n      include: {\n        creditBalance: true,\n        ...(includeUsageCount && {\n          _count: { select: { usageHistory: true } }\n        }),\n      },\n      orderBy: { createdAt: 'desc' },\n    }),\n    db.user.count({ where }),\n  ]);\n\n  const response: UsersResponse = {\n    users,\n    pagination: {\n      page,\n      pageSize,\n      total,\n      pages: Math.ceil(total / pageSize),\n    },\n  };\n\n  return NextResponse.json(response);\n}\n```\n\n### Error Handling for Frontend\n```typescript\n// Return consistent error format that API client can parse\nif (validation.error) {\n  return NextResponse.json(\n    {\n      error: 'Validation failed',\n      message: validation.error.message,\n      details: validation.error.issues\n    },\n    { status: 400 }\n  );\n}\n\n// Server errors should not leak internal details\ncatch (error) {\n  console.error('API Error:', error);\n  return NextResponse.json(\n    {\n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    },\n    { status: 500 }\n  );\n}\n```\n\n### Cache-Friendly Design\n- **ETags**: Consider adding ETags for cacheable resources\n- **Last-Modified**: Include timestamps for data freshness validation\n- **Proper HTTP Status Codes**: Use appropriate status codes for cache behavior\n- **Immutable Resources**: Design APIs to support optimistic updates where possible\n\n### API Documentation\nWhen creating new endpoints, document them in `docs/api.md` with:\n- Request/response schemas\n- Error responses\n- Frontend hook usage examples\n- Query parameter options\n","size_bytes":8164},"agents/database-development.md":{"content":"# Database Development – Prompt\n\nObjective\n- Safely evolve the Prisma schema and data access while preserving integrity and tenancy.\n\nContext\n- Prisma schema at `prisma/schema.prisma`. Postgres datasource via `DATABASE_URL`. Generated client used from `src/lib/db.ts`. Core models relate to `User`, Features, Credits, and AI endpoints.\n - Usage logging uses `UsageHistory.operationType` (enum `OperationType`). Feature keys in code map to this enum via `src/lib/credits/feature-config.ts`.\n - Server Components consume data through the query layer `src/lib/queries/*` (do not import Prisma directly in Server Components).\n\nSteps\n- Model changes: Edit `prisma/schema.prisma`. Prefer explicit relations, `@@index`, and correct `onDelete` behavior.\n- Migration: For new fields/models, run `npm run db:migrate` (interactive) during development; for quick sync in dev-only cases, `npm run db:push`.\n- Code updates: Regenerate client via `npm run build` or `prisma generate`. Update queries/selects in affected files.\n- Tenancy: Ensure new entities reference `userId` and/or `workspaceId` where appropriate. Avoid cross-tenant access.\n- Defaults & Constraints: Use `@default`, `@unique`, and enums to encode rules. Avoid nullable fields unless truly optional.\n- Performance: Add `@@index` on frequent filters (e.g., `userId`, `workspaceId`, `timestamp`).\n\nExample Snippet\n```prisma\nmodel Example {\n  id        String   @id @default(cuid())\n  name      String\n  userId    String\n  workspaceId String\n  createdAt DateTime @default(now())\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  // add relations as needed for your feature set\n  @@index([userId])\n  @@index([workspaceId])\n}\n```\n\nQuality Gates\n- Run: `npm run db:migrate`, `npm run build`. Sanity-check reads/writes in impacted flows.\n- PR: Describe data changes, migration risks, and rollback/forward plan.\n\n## Frontend Integration Considerations\n\nWhen modifying the database schema, consider how changes will affect TanStack Query patterns:\n\n### Query Optimization\n- **Selective Loading**: Use `select` and `include` strategically to minimize data transfer\n- **Pagination**: Support both offset and cursor-based pagination for different UI patterns\n- **Filtering**: Design indexes to support common filter combinations used in admin interfaces\n\n### Hook-Friendly Patterns\n```typescript\n// Good: Structure data for easy cache management\nconst users = await db.user.findMany({\n  select: {\n    id: true,\n    name: true,\n    email: true,\n    creditBalance: { select: { credits: true } },\n    _count: { select: { usageHistory: true } }\n  },\n  orderBy: { createdAt: 'desc' }\n});\n\n// Consider how this data will be used in hooks:\n// - Individual user updates (queryKey: ['users', userId])\n// - User lists (queryKey: ['users', filters])\n// - Credit balance updates (queryKey: ['credits', userId])\n```\n\n### Cache Invalidation Planning\n- **Cascading Updates**: When one model changes, which queries need invalidation?\n- **Optimistic Updates**: Structure responses to support optimistic UI updates\n- **Real-time Considerations**: Design with potential WebSocket updates in mind\n\n### Performance for Client Queries\n- **Index Strategy**: Index fields commonly used in WHERE clauses from frontend filters\n- **Relation Loading**: Minimize N+1 queries through proper `include` strategies\n- **Response Size**: Keep response payloads reasonable for client-side caching\n","size_bytes":3443},"agents/frontend-development.md":{"content":"# Frontend Development – Prompt\n\nObjective\n- Implement or modify UI in the Next.js App Router with accessible, type-safe components.\n\nContext\n- Routes under `src/app` with segments `(public)` and `(protected)`. UI components in `src/components/ui/*`, shared pieces in `src/components/*`. Styles via Tailwind (see `src/app/globals.css`). Path alias `@/*` → `src/*`.\n\nSteps\n- Plan route placement: public vs protected, file path under `src/app/.../page.tsx`.\n- Page Metadata: For protected routes, use `usePageConfig` hook from `@/hooks/use-page-config` to set title, description, and breadcrumbs. The layout handles rendering automatically.\n- Scaffold UI using existing primitives: `Button`, `Card`, `Dialog`, `Form` in `src/components/ui`. Compose with `cn` from `@/lib/utils`.\n- Forms: Use `react-hook-form` + Zod resolvers. Show inline validation. Keep server errors visible but not verbose.\n- Data fetching: Prefer Server Components where possible. For client-side mutations/queries, use TanStack Query with custom hooks. **NEVER use fetch() directly in components** - always use custom hooks that wrap TanStack Query and the API client from `@/lib/api-client`.\n  - Never import or use the Prisma client (`@/lib/db`) in Client Components.\n  - Server Components should not query Prisma directly. Use the query layer in `src/lib/queries/*` and pass results as props.\n- Auth: Use Clerk components/hooks where needed. Respect middleware-protected routes.\n- Accessibility: Labels, focus states, keyboard nav. Avoid `dangerouslySetInnerHTML`.\n- Styling: Tailwind utility-first, follow existing patterns; keep component APIs minimal and typed.\n- Credits UI: avoid hardcoding costs on the client. Drive feedback from backend responses or expose an endpoint that reads `feature-config.ts`.\n\nQuality Gates\n- Run: `npm run dev` (iterate), `npm run lint`, `npm run typecheck`, `npm run build` (sanity check).\n- Visual: Add screenshots/GIFs to PR. Keep DOM size reasonable and avoid layout shift.\n\nDeliverables\n- Code changes + brief PR description, screenshots, and validation steps. Note any new props or UI patterns introduced.\n\nAI Chat (Vercel AI SDK)\n- Page example: `src/app/(protected)/ai-chat/page.tsx` using `useChat` from `@ai-sdk/react`.\n- Provider/model selectors: update `PROVIDERS` and `MODELS` constants when adding support.\n- Streaming: messages stream in-place; keep container scrollable with sensible max height.\n- UX: show an initial hint when the chat is empty; disable submit while streaming.\n- Image mode: toggle \"Modo: Imagem\" uses OpenRouter (`POST /api/ai/image`) and displays returned images inline.\n - Credits UI: use `useCredits()` to show remaining credits and disable submit if the user cannot afford the action (1 for chat, 5 for image).\n\n## TanStack Query Integration\n\n### Data Fetching Rules\n1. **Custom Hooks Only**: Never call `useQuery` or `useMutation` directly in components. Use existing custom hooks or create new ones.\n2. **API Client**: All HTTP requests must use the `api` client from `@/lib/api-client`.\n3. **Query Keys**: Structure as arrays for easy cache invalidation: `['domain', 'resource', params]`\n4. **Error Handling**: Let the API client handle HTTP errors automatically.\n\n### Hook Patterns\n\n#### Query Hook Example\n```typescript\n// hooks/use-feature.ts\nimport { api } from '@/lib/api-client';\n\nexport interface FeatureData {\n  id: string;\n  name: string;\n  isEnabled: boolean;\n}\n\nexport function useFeature(id: string) {\n  return useQuery<FeatureData>({\n    queryKey: ['features', id],\n    queryFn: () => api.get(`/api/features/${id}`),\n    staleTime: 5 * 60_000, // 5 minutes\n    gcTime: 10 * 60_000, // 10 minutes\n  });\n}\n```\n\n#### Mutation Hook Example\n```typescript\n// hooks/use-update-feature.ts\nexport function useUpdateFeature() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<FeatureData> }) =>\n      api.put(`/api/features/${id}`, data),\n    onSuccess: (data, variables) => {\n      toast({ title: \"Feature updated successfully\" });\n      queryClient.invalidateQueries({ queryKey: ['features'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to update feature\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    },\n  });\n}\n```\n\n#### Component Usage\n```typescript\n// components/feature-form.tsx\nexport function FeatureForm({ featureId }: { featureId: string }) {\n  const { data, isLoading, error } = useFeature(featureId);\n  const updateFeature = useUpdateFeature();\n\n  if (isLoading) return <Skeleton />;\n  if (error) return <ErrorAlert message={error.message} />;\n\n  const handleSubmit = (formData: Partial<FeatureData>) => {\n    updateFeature.mutate({ id: featureId, data: formData });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* Form content */}\n      <button\n        type=\"submit\"\n        disabled={updateFeature.isPending}\n      >\n        {updateFeature.isPending ? 'Updating...' : 'Update Feature'}\n      </button>\n    </form>\n  );\n}\n```\n\n### Available Hooks\n\n#### User & Admin Management\n- `useCredits()` - User credit balance and operations\n- `useSubscription()` - Subscription status\n- `useDashboard()` - Admin dashboard data\n- `useAdminUsers(params)` - Admin user management with pagination and search\n- `useAdminCredits(params)` - Admin credit management and transactions\n- `useAdminInvitations()` - Admin invitation management\n- `useAdminSettings()` - Admin settings configuration\n\n#### Plans & Billing\n- `useAdminPlans()` - Fetch billing plans from database\n- `useClerkPlans()` - Sync plans from Clerk (manual trigger)\n- `useCreatePlan()` - Create new billing plan\n- `useUpdatePlan()` - Update existing plan configuration\n- `useDeletePlan()` - Delete billing plan\n\n#### Storage & Files\n- `useStorage(params)` - Storage object management with search/filters\n- `useDeleteStorageItem()` - Delete storage objects with cache invalidation\n\n#### Analytics & Usage\n- `useUsage(params)` - Usage analytics with date/feature filtering\n\n#### AI Features\n- `useOpenRouterModels(capability)` - Fetch available AI models (text/image)\n- `useGenerateImage()` - AI image generation mutation with credit handling\n\n### Cache Management\n- Mutations automatically invalidate related queries\n- Use structured query keys for precise cache control\n- Configure appropriate `staleTime` and `gcTime` based on data freshness needs\n","size_bytes":6455},"agents/qa-agent.md":{"content":"# QA Agent – Prompt\n\n## Objective\nEnsure product changes meet quality standards by combining automated coverage, targeted manual validation, and reporting. Use this agent when planning or executing QA tasks across the Next.js SaaS template.\n\n## Context\n- Automated E2E coverage lives in `tests/e2e` and uses Playwright (`playwright.config.ts`).\n- Auth bypass for tests: `E2E_AUTH_BYPASS=1`, server launched via `npm run dev:e2e`.\n- Admin-specific validation guidance: see `docs/testing/admin-qa-guide.md`.\n- Environment: Prisma DB (`DATABASE_URL`), Clerk keys, feature flags defined under `src/lib/**`.\n\n## Workflow\n1. **Review Requirements**\n   - Clarify acceptance criteria; gather linked docs/designs.\n   - Identify impacted domains (frontend, API, background jobs, credits).\n2. **Test Planning**\n   - Map scenarios (happy path, edge cases, failure modes).\n   - Decide automation vs manual coverage; update or extend Playwright specs when feasible.\n   - Document expectations in the PR description or corresponding guide under `docs/testing/`.\n3. **Environment Setup**\n   - Sync dependencies (`npm install`) and DB (`npm run db:migrate`).\n   - Seed representative data (users, credits, uploads) or leverage stubs in automation.\n4. **Execute Tests**\n   - Automated: `npm run test:e2e`, `npm run lint`, `npm run typecheck`, `npm run build`.\n   - Manual: follow checklists (admin, webhook, pricing, etc.). Capture screenshots for UI regressions.\n   - Monitor logs (`npm run dev`) for runtime errors.\n5. **Report & Iterate**\n   - Log defects with repro steps, expected vs actual, environment details.\n   - When issues surface, collaborate with dev to add regression coverage.\n   - Update documentation after closing gaps.\n\n## Automation Guidelines\n- Prefer API stubbing in Playwright for deterministic runs; only hit live external services when contracts are stable.\n- Wrap toast/snackbar assertions with `page.getByRole('status')` to avoid duplicate matches and timing flakiness.\n- Use data-test attributes sparingly; rely on accessible roles/names first.\n- Store new helpers or fixtures under `tests/e2e/utils` (create path as needed) to share logic across specs.\n- When adding suites, keep them under 60s per run; break flows into multiple tests if necessary.\n\n## Manual Regression Pointers\n- Validate role-based access after disabling `E2E_AUTH_BYPASS`.\n- Double-check credit accounting against seed data or real transactions.\n- Confirm email/webhook side effects in staging environments.\n- Inspect browser console for warnings/errors while navigating major routes.\n\n## Deliverables\n- Updated/added automated tests with passing CI run.\n- QA summary: scenarios executed, defects found, outstanding risks.\n- Documentation updates (guides, READMEs) reflecting new flows or procedures.\n\nUse this agent prompt when you need consistent QA planning, execution, or when crafting responses that focus on testing strategy and validation steps.\n","size_bytes":2939},"agents/security-check.md":{"content":"# Security Check – Prompt\n\nObjective\n- Perform a focused security review for new/changed code before merge.\n\nContext\n- App: Next.js App Router (`src/app`). Auth via Clerk. DB: Prisma/Postgres. Credit system in `src/lib/credits/*`. Webhooks in `src/app/api/webhooks` using Svix.\n\nInputs\n- PR diff or feature branch, relevant env keys (`.env.local`), affected routes/components.\n\nChecklist\n- Secrets & Config: No secrets in code or logs. Reads from env only. Update `.env.example` if new vars.\n- AuthZ/AuthN: Protected routes live under `src/app/(protected)`. API handlers must derive user from Clerk (`@/lib/api-auth`/`auth-utils`) and enforce ownership/tenancy.\n- Input Validation: Validate all `POST/PUT/PATCH` bodies and query params with Zod. Reject unknown fields. Example: `const data = Schema.parse(await req.json())`.\n- API Routes: Confirm allowed methods, consistent status codes, no sensitive error leakage. Return `NextResponse.json({ error }, { status })`.\n- Data Access: Prisma queries must scope by `userId`/`workspaceId`. Avoid raw SQL. Check cascade rules in schema for unintended deletes.\n- Webhooks: Verify signatures (Svix) before processing. Handle idempotency and replay.\n- Credits & Billing: Use centralized helpers `validateCreditsForFeature`/`deductCreditsForFeature` and `feature-config.ts`.\n- Verify the feature key (`ai_text_chat` or `ai_image_generation`) and configured cost.\n  - Ensure transactional deduction and proper `UsageHistory` logging.\n  - For one-time credit packs, only award credits for whitelisted Stripe Price IDs from `src/lib/clerk/credit-packs.ts`.\n  - Do not trust client-provided credit amounts. Consider idempotency (invoice IDs) to prevent double-credit on retries.\n  - If using Clerk Billing, ensure plan ID mapping (`cplan_*` → internal key) is complete in `src/lib/clerk/plan-mapping.ts` and that webhook handles `subscriptionItem.*` events.\n- Client Security: No dangerous `dangerouslySetInnerHTML`. Sanitize any user HTML. Avoid leaking PII to logs or analytics.\n- TanStack Query Security: Ensure all client-side data fetching uses custom hooks with the centralized API client. Verify error handling doesn't expose sensitive server details. Check that mutation optimistic updates don't bypass validation.\n- Dependencies: Prefer maintained libs. If adding one, justify and check licenses. Run `npm run build && npm run lint && npm run typecheck`.\n\nAI Providers\n- Keys: Confirm provider API keys are only used server-side; no client exposure.\n- Allowlist: Validate `provider` and `model` inputs against known lists.\n- Transport: Use official SDKs (`ai`, `@ai-sdk/*`); avoid direct fetch with raw keys.\n- Abuse: Add rate limits/credit checks for chat endpoints to prevent misuse and cost spikes.\n - Credits: Verify `/api/ai/chat` uses `ai_text_chat` (1 credit) and `/api/ai/image` uses `ai_image_generation` (5 credits), with quantity applied for multiple images if supported.\n\n## TanStack Query Security Considerations\n\nWhen reviewing frontend data fetching changes:\n\n### API Client Security\n- **Centralized Error Handling**: Verify the API client properly sanitizes error messages before displaying to users\n- **Authentication Headers**: Ensure auth tokens are handled securely and not logged\n- **Request Validation**: Check that client-side validation doesn't replace server-side validation\n\n### Cache Security\n- **Sensitive Data**: Review what data is cached client-side; avoid caching sensitive information\n- **Cache Poisoning**: Ensure optimistic updates can't bypass server validation\n- **Memory Leaks**: Check that sensitive data is properly cleared from cache when needed\n\n### Hook Security Patterns\n```typescript\n// Good: Server validates everything\nexport function useUpdateUser() {\n  return useMutation({\n    mutationFn: (data) => api.put('/api/users/me', data), // Server validates\n    onError: (error) => {\n      // Don't expose server errors directly\n      toast({\n        title: \"Update failed\",\n        description: \"Please try again\"  // Generic message\n      });\n    }\n  });\n}\n\n// Bad: Client-only validation\nexport function useDeleteUser() {\n  return useMutation({\n    mutationFn: (id) => {\n      if (!isAdmin()) throw new Error(\"Unauthorized\"); // Client check only\n      return api.delete(`/api/users/${id}`);\n    }\n  });\n}\n```\n\n### Review Checklist\n- [ ] No direct `fetch()` calls in components\n- [ ] All API calls go through centralized client\n- [ ] Error messages don't leak server details\n- [ ] Optimistic updates don't bypass server validation\n- [ ] Sensitive data isn't cached unnecessarily\n- [ ] Auth headers handled securely\n\nDeliverable\n- Short report in the PR with: risks (severity, likelihood), impacted code paths, concrete fixes, and follow-ups (if any).\n","size_bytes":4747},"docs/README.md":{"content":"# Documentation Index\n\nWelcome to the Next.js SaaS Template documentation. This comprehensive guide will help you understand, develop, and maintain this production-ready SaaS application.\n\n## Quick Start\n\nIf you're new to this project, start here:\n\n1. **[Architecture Overview](./architecture.md)** - Understand the system design and architectural decisions\n2. **[Development Guidelines](./development-guidelines.md)** - Learn the coding standards and best practices\n3. **[Authentication](./authentication.md)** - Set up and understand the Clerk authentication system\n4. **[Database](./database.md)** - Configure and work with the PostgreSQL database and Prisma ORM\n\n## Documentation Structure\n\n### Core Architecture\n- **[Architecture](./architecture.md)** - System architecture, layers, and design principles\n- **[Database](./database.md)** - Schema design, Prisma operations, and data management\n- **[Authentication](./authentication.md)** - Clerk integration, security patterns, and user management\n- **[Page Metadata System](./page-metadata-system.md)** - Centralized page headers and breadcrumbs management\n\n### Development Guides\n- **[Frontend](./frontend.md)** - React components, Next.js patterns, and client-side development\n- **[Backend](./backend.md)** - API routes, server-side logic, and data processing\n- **[Components](./components.md)** - UI component library, patterns, and usage guidelines\n- **[API](./api.md)** - Complete API reference with endpoints and examples\n- **[AI Chat](./ai-chat.md)** - Vercel AI SDK integration, providers, and chat UI\n  - Credits: 1 credit per text chat, 5 per image request, enforced in API routes\n\n### Best Practices\n- **[Development Guidelines](./development-guidelines.md)** - Code standards, testing, and workflow practices\n\n## Technology Stack\n\nThis SaaS template is built with modern technologies:\n\n### Core Framework\n- **Next.js 15.3.5** - Full-stack React framework with App Router\n- **React 19** - UI library with latest features\n- **TypeScript** - Type-safe development\n\n### Authentication & Database\n- **Clerk** - Complete authentication and user management\n- **PostgreSQL** - Relational database\n- **Prisma ORM** - Type-safe database client\n\n### UI & Styling\n- **Tailwind CSS v4** - Utility-first CSS framework\n- **Radix UI** - Headless component primitives\n- **Lucide React** - Icon library\n\n### State Management\n- **React Query** - Server state management and caching\n- **React Hook Form** - Form handling and validation\n- **Zod** - Runtime validation\n\n## Key Features\n\n### 🔐 Authentication\n- Complete user authentication with Clerk\n- Social logins and email/password\n- Protected routes and middleware\n- User profile management\n\n### 💾 Database Management\n- PostgreSQL with Prisma ORM\n- Complex relational schema\n- Type-safe database operations\n- Migration management\n\n### 🤖 AI Features\n- Configurable AI chat with provider selection\n- Image generation via OpenRouter\n- Extensible provider/model support\n\n### 💳 Credit System\n- Built-in credit tracking\n- Usage analytics\n- Billing integration ready\n- Operation-based credit deduction\n\n### 🎨 Modern UI/UX\n- Glass morphism design\n- Responsive mobile-first design\n- Dark/light theme support\n- Accessible components\n\n## Getting Started\n\n### Prerequisites\n- Node.js 18 or higher\n- PostgreSQL database\n- Clerk account for authentication\n\n### Installation\n\n1. **Clone and install dependencies:**\n```bash\ngit clone <your-repo-url>\ncd nextjs-saas-template\nnpm install\n```\n\n2. **Configure environment variables:**\n```bash\ncp .env.example .env.local\n# Edit .env.local with your configuration\n```\n\n3. **Set up the database:**\n```bash\nnpm run db:push\n```\n\n4. **Start the development server:**\n```bash\nnpm run dev\n```\n\nVisit [http://localhost:3000](http://localhost:3000) to see your application.\n\n## Development Workflow\n\n### Daily Development\n```bash\nnpm run dev          # Start development server\nnpm run typecheck    # Check TypeScript types\nnpm run lint         # Run ESLint\n```\n\n### Database Operations\n```bash\nnpm run db:push      # Push schema changes\nnpm run db:migrate   # Run migrations\nnpm run db:studio    # Open Prisma Studio\n```\n\n### Production Build\n```bash\nnpm run build        # Build for production\nnpm run start        # Start production server\n```\n\n## Project Structure\n\n```\nnextjs-saas-template/\n├── docs/                    # Documentation (this folder)\n├── prisma/                  # Database schema and migrations\n├── src/\n│   ├── app/                # Next.js App Router\n│   │   ├── (public)/       # Public routes\n│   │   ├── (protected)/    # Protected routes\n│   │   ├── api/           # API endpoints\n│   │   └── layout.tsx     # Root layout\n│   ├── components/        # React components\n│   │   ├── ui/           # Base UI components\n│   │   ├── app/          # Application components\n│   │   └── providers/    # Context providers\n│   ├── contexts/         # React contexts\n│   │   └── page-metadata.tsx # Page metadata system\n│   ├── lib/              # Utilities and configurations\n│   ├── hooks/            # Custom React hooks\n│   └── types/            # TypeScript type definitions\n├── public/               # Static assets\n├── CLAUDE.md            # Claude Code assistant guide\n├── package.json         # Dependencies and scripts\n└── README.md           # Project overview\n```\n\n## Common Tasks\n\n### Adding a New Feature\n\n1. **Plan the feature:**\n   - Define requirements and scope\n   - Design database schema changes\n   - Plan API endpoints needed\n\n2. **Implement backend:**\n   - Update Prisma schema if needed\n   - Create API routes\n   - Add authentication and validation\n\n3. **Implement frontend:**\n   - Create UI components\n   - Add forms and validation\n   - Implement state management\n\n4. **Test and deploy:**\n   - Write unit and integration tests\n   - Run type checking and linting\n   - Deploy and monitor\n\n### Database Schema Changes\n\n1. **Update schema:**\n```bash\n# Edit prisma/schema.prisma\nnpm run db:push  # For development\n# or\nnpm run db:migrate  # For production\n```\n\n2. **Generate types:**\n```bash\nnpx prisma generate\n```\n\n### Adding New API Endpoints\n\n1. **Create route file:**\n```typescript\n// src/app/api/your-endpoint/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\n\nexport async function GET(request: NextRequest) {\n  const { userId } = await auth();\n  if (!userId) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n  \n  // Your logic here\n  return NextResponse.json({ data: result });\n}\n```\n\n2. **Add validation:**\n```typescript\nimport { z } from 'zod';\n\nconst schema = z.object({\n  name: z.string().min(1),\n  description: z.string().optional(),\n});\n\nconst validatedData = schema.parse(await request.json());\n```\n\n3. **Test the endpoint:**\n```typescript\n// __tests__/api/your-endpoint.test.ts\nimport { GET } from '@/app/api/your-endpoint/route';\n// Add your tests\n```\n\n## Troubleshooting\n\n### Common Issues\n\n#### Database Connection Errors\n- Check your `DATABASE_URL` environment variable\n- Ensure PostgreSQL is running\n- Verify database credentials and permissions\n\n#### Authentication Issues\n- Verify Clerk environment variables\n- Check middleware configuration\n- Ensure public/protected routes are properly configured\n\n#### Build Errors\n- Run `npm run typecheck` to identify TypeScript issues\n- Check for missing dependencies\n- Verify environment variables are set\n\n#### Performance Issues\n- Use React DevTools to identify rendering issues\n- Check database query performance with Prisma Studio\n- Monitor API response times\n\n### Getting Help\n\n1. **Check the documentation** - Most issues are covered in these docs\n2. **Review error messages** - They often point to the exact problem\n3. **Use debugging tools** - Next.js DevTools, React DevTools, and browser developer tools\n4. **Check logs** - Both client and server console logs\n\n## Contributing\n\n### Code Standards\n- Follow the patterns outlined in [Development Guidelines](./development-guidelines.md)\n- Write tests for new features\n- Update documentation when adding features\n- Use TypeScript for type safety\n\n### Pull Request Process\n1. Create a feature branch\n2. Implement your changes\n3. Add/update tests\n4. Update documentation\n5. Submit pull request with clear description\n\n### Testing\n```bash\nnpm test              # Run tests\nnpm run test:watch    # Run tests in watch mode\nnpm run test:coverage # Generate coverage report\n```\n\n## Deployment\n\n### Environment Variables\nEnsure all required environment variables are set in your deployment platform:\n\n```env\n# Required for all environments\nDATABASE_URL=\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=\nCLERK_SECRET_KEY=\nCLERK_WEBHOOK_SECRET=\n\n# Production specific\nNEXT_PUBLIC_APP_URL=https://your-domain.com\n```\n\n### Deployment Platforms\nThis template works with:\n- **Vercel** (recommended for Next.js)\n- **Netlify**\n- **Railway**\n- **Heroku**\n- **DigitalOcean App Platform**\n\n### Database Hosting\nRecommended PostgreSQL hosting providers:\n- **Supabase** (includes auth, but we use Clerk)\n- **PlanetScale** (MySQL alternative)\n- **Railway** (PostgreSQL)\n- **Heroku Postgres**\n- **Amazon RDS**\n\n## Performance and Monitoring\n\n### Performance Best Practices\n- Use Server Components by default\n- Implement proper loading states\n- Optimize database queries\n- Use React Query for caching\n- Optimize images with Next.js Image\n\n### Monitoring\n- Set up error tracking (Sentry, Bugsnag)\n- Monitor API performance\n- Track user analytics\n- Monitor database performance\n\n## Security\n\n### Security Checklist\n- ✅ Authentication with Clerk\n- ✅ Protected API routes\n- ✅ Input validation with Zod\n- ✅ SQL injection prevention with Prisma\n- ✅ XSS protection with React\n- ✅ Environment variable security\n- ✅ HTTPS in production\n\n### Security Best Practices\n- Never commit secrets to version control\n- Use environment variables for all configuration\n- Validate all user input\n- Implement proper error handling\n- Keep dependencies updated\n- Regular security audits\n\n## Maintenance\n\n### Regular Tasks\n- **Dependencies:** Update npm packages regularly\n- **Database:** Monitor and optimize query performance\n- **Security:** Keep dependencies updated for security patches\n- **Monitoring:** Check error rates and performance metrics\n- **Backups:** Ensure database backups are working\n\n### Updating Dependencies\n```bash\nnpm update            # Update all dependencies\nnpm audit             # Check for security vulnerabilities\nnpm audit fix         # Fix automatically fixable issues\n```\n\n---\n\n## Next Steps\n\n1. **Read the Architecture Overview** to understand the system design\n2. **Set up your development environment** following the Getting Started guide\n3. **Explore the codebase** using the structure outlined in each documentation section\n4. **Start building your features** following the development guidelines\n\nHappy coding! 🚀\n","size_bytes":11056},"docs/admin.md":{"content":"# Admin Panel\n\nAdministrative routes and features of the app.\n\n## Access\n- URL: `/admin` (SSR guard in layout + middleware check)\n- Configure `.env.local`:\n  - `ADMIN_EMAILS=admin@yourdomain.com,ops@yourdomain.com`\n  - or `ADMIN_USER_IDS=usr_123,usr_456` (Clerk user IDs)\n\n## Clerk Prerequisites\n- `CLERK_SECRET_KEY` set (admin API)\n- Invitations and email delivery enabled in Clerk\n- Allowed redirect: `${NEXT_PUBLIC_APP_URL}/sign-up`\n\n## Features\n- Users\n  - List users with balance and usage\n  - Adjust credits (balance)\n  - Delete user (removes usage and balance)\n- Settings (tabbed)\n  - Custos por Funcionalidade\n    - Edit feature credit costs (e.g., `ai_text_chat`, `ai_image_generation`)\n  - Planos de Assinatura (Clerk)\n    - Map Clerk plan IDs to: Plan Name (free-form) and Monthly Credits\n    - Import helpers: Auto (usePlans), via API (`GET /api/admin/clerk/plans`), or paste JSON\n    - Values are persisted and used by webhooks to refresh balances on renewals/changes\n- Storage\n  - Browse uploads with user attribution\n  - Search by name/type/url/user\n  - Open file in new tab\n  - Delete file (best-effort remote delete + soft-delete record)\n- Invitations\n  - Invite user by email\n  - View pending invitations\n  - Resend / Revoke invitation\n- Sync\n  - Sync Clerk users and plans into the local DB\n  - Admin UI provides options and a second confirmation:\n    - Sincronizar usuários: create/update users and ensure a 0-credits balance exists\n    - Sincronizar planos/assinaturas: query Clerk Billing for each user’s subscription\n    - Aplicar créditos do plano: set credits based on the mapped plan in `Plan`\n    - Sobrescrever créditos: apply a custom credits amount to all users with an active plan\n\n## Admin APIs\n- `POST /api/admin/users/invite`\n  - Body: `{ email: string, name?: string }`\n  - Invites via Clerk; if the user already exists, ensures user/balance exists in DB.\n- `GET /api/admin/users/invitations`\n  - Lists pending (not accepted, not revoked) invitations\n- `POST /api/admin/users/invitations/:id/resend`\n- `POST /api/admin/users/invitations/:id/revoke`\n- `POST /api/admin/users/sync`\n  - Body (partial):\n    - `syncUsers?: boolean` (default true)\n    - `syncPlans?: boolean` (default true)\n    - `setCredits?: boolean` (default true)\n    - `overrideCredits?: number` (optional; overrides mapped plan credits)\n    - `pageSize?: number` (default 100), `maxPages?: number` (default 50)\n    - `debug?: boolean` (adds processing info to the response)\n  - Behavior:\n    - Users: creates/updates `User` and ensures a `CreditBalance` row with 0 credits exists\n    - Plans: calls Clerk `GET /v1/users/{user_id}/billing/subscription` and resolves plan by `plan_id`\n    - Credits: when `setCredits` is true and plan is mapped in `Plan`, updates credits; uses `overrideCredits` if provided\n  - Response fields: `processed`, `createdUsers`, `createdBalances`, `activeSubscriptions`, `creditsRefreshed`, and when `debug` is true: `{ debug: { pagesProcessed, unmappedPlanIds } }`\n- `PUT /api/admin/credits/:id`\n  - Adjust by `CreditBalance` record\n- `PUT /api/admin/users/:id/credits`\n  - Adjust by `User.id`\n- `GET /api/admin/health/credits-enum`\n  - Verifies `Feature → OperationType` mapping\n- `GET /api/admin/storage` — list uploads\n- `DELETE /api/admin/storage/:id` — delete one upload\n- `GET /api/admin/settings` (admin only)\n  - Returns `{ featureCosts, planCredits, billingPlans }` (billingPlans composed from `Plan` rows)\n- `PUT /api/admin/settings` (admin only)\n  - Body (partial): `{ featureCosts?: { [featureKey]: number } }` (plans managed via dedicated endpoints)\n- `GET /api/admin/plans` — list plans `{ clerkId, name, credits, active }`\n- `POST /api/admin/plans` — create plan by Clerk ID\n- `PUT /api/admin/plans/[clerkId]` — update plan name/credits/active (or `newClerkId` to rename)\n- `DELETE /api/admin/plans/[clerkId]` — remove plan\n- `GET /api/admin/clerk/plans` (admin only)\n  - Attempts to load plans from Clerk Backend API (requires `CLERK_SECRET_KEY`)\n\n## UI\n- Pages: `src/app/admin/*`\n- Toasts for invites, adjustments, and sync\n- SSR guard in `src/app/admin/layout.tsx` (prevents flash for non-admins)\n - Settings page in `src/app/admin/settings/page.tsx`\n - Users → Sync modal includes a double confirmation summarizing the effects of chosen options\n\n## Notes\n- Invitations require email to be configured in Clerk.\n- If Prisma enum mapping fails, use the health check above and verify the code imports the generated client from `prisma/generated/client`.\n","size_bytes":4521},"docs/ai-chat.md":{"content":"# AI Chat – Vercel AI SDK\n\nThis template includes a minimal AI chat that streams responses and lets users pick the LLM provider and model.\n\n## Overview\n- API: `POST /api/ai/chat` – uses Vercel AI SDK (`ai`) and provider clients (`@ai-sdk/*`). Requires auth, validates inputs with Zod, and allowlists providers and models.\n- Providers: OpenAI, Anthropic, Google, Mistral, OpenRouter (OpenAI-compatible via `baseURL`).\n- Page: `/ai-chat` (protected) – dropdowns for provider/model plus a streaming chat UI.\n\n## Environment Variables\nAdd only the keys you need to `.env.local`:\n\n```\nOPENAI_API_KEY=\nANTHROPIC_API_KEY=\nGOOGLE_GENERATIVE_AI_API_KEY=\nMISTRAL_API_KEY=\nOPENROUTER_API_KEY=\n```\n\n## Files\n- API route: `src/app/api/ai/chat/route.ts`\n  - Selects provider and model from body: `{ provider, model, messages, temperature }`\n  - Returns `result.toAIStreamResponse()` for SSE streaming\n- UI page: `src/app/(protected)/ai-chat/page.tsx`\n  - Uses `useChat` from `@ai-sdk/react`\n  - Provider/models dropdowns in `PROVIDERS` and `MODELS` constants\n\n## Add Providers / Models\n- Providers: import `createX()` from `@ai-sdk/x`, initialize with `apiKey`, and extend `getModel(provider, model)` in the API route.\n- Models: append to the `MODELS` map in the chat page and ensure the model ID matches the provider’s format. For direct providers (OpenAI/Anthropic/Google/Mistral), also add the model to the API allowlist. OpenRouter models are validated by an ID pattern (`vendor/model`) rather than a hard allowlist.\n\n## OpenRouter Notes\n- OpenRouter is OpenAI-compatible; use `createOpenAI({ baseURL: 'https://openrouter.ai/api/v1', apiKey: process.env.OPENROUTER_API_KEY })`.\n- Model IDs include vendor prefix (e.g., `anthropic/claude-3.5-sonnet`).\n\n## Security & Limits\n- Never expose provider API keys client-side; all calls proxy through the API route.\n- Auth is enforced on both `/api/ai/chat` and `/api/ai/openrouter/models`.\n- Inputs are validated with Zod; `provider` is allowlisted and `model` is checked per provider (OpenRouter validated by pattern).\n- Rate-limit or require credits for usage in production.\n\n## Credits\n- This template charges credits per AI request by default:\n  - Text chat: 1 credit per request (`feature: ai_text_chat`).\n  - Image generation: 5 credits per request (`feature: ai_image_generation`).\n- Implementation lives in `src/lib/credits/*` with helpers:\n  - `validateCreditsForFeature(clerkUserId, feature[, quantity])`\n  - `deductCreditsForFeature({ clerkUserId, feature, quantity, details })`\n- API integration:\n  - `POST /api/ai/chat` validates and deducts 1 credit before streaming.\n  - `POST /api/ai/image` validates and deducts 5 credits before provider call; can charge per-image via body `count`.\n\n### UI behavior\n- The chat page shows the user’s remaining credits and the cost per action.\n- The submit button is disabled when the user lacks sufficient credits for the selected mode.\n\n## Image Generation (OpenRouter)\n- API: `POST /api/ai/image` — requires auth, Zod-validates `{ model, prompt, size?, count? }` and uses OpenRouter’s OpenAI-compatible chat/completions with image modality.\n- Default model: `google/gemini-2.5-flash-image-preview` (override by passing another OpenRouter image-capable model ID like `vendor/model`).\n- Response: `{ images: string[] }` — data URLs (`data:image/png;base64,...`).\n- UI: The chat page has a “Modo: Imagem” toggle; when enabled, submit triggers image generation and displays results inline.\n\n## Attachments (Vercel Blob)\n- Users can attach a file in the chat composer. Files upload to Vercel Blob via `POST /api/upload` and appear as clickable chips.\n- On send, the chat injects an \"Attachments:\" section with links into the message content so both the model and history can reference them.\n- Setup:\n  - Add `BLOB_READ_WRITE_TOKEN` to `.env.local`.\n  - See docs/uploads.md for details and sample requests.\n\n## Navigation\n- Sidebar entry added: “AI Chat” → `/ai-chat` via `navigationItems` in `src/components/app/sidebar.tsx`.\n","size_bytes":4032},"docs/api.md":{"content":"# API Documentation\n\n## Overview\n\nThe API is built with Next.js App Router API routes, providing RESTful endpoints for the SaaS application. All endpoints are protected with Clerk authentication and follow consistent patterns for error handling, validation, and responses.\n\n## Base URL\n\n```\n\n## Billing & Webhooks\n\n### POST /api/webhooks/clerk\n\nProcesses Clerk webhook events (verified via Svix) for user lifecycle and billing.\n\n- Events handled:\n  - `user.created`/`user.updated`/`user.deleted`: Syncs user and initializes credit balance.\n  - `subscription.created`/`subscription.updated`/`subscription.deleted`: Sets monthly credits based on plan via `refreshUserCredits`.\n  - `invoice.payment_succeeded`: Adds credits for one-time credit-pack purchases.\n\n#### One-time Credit Packs\n- Configure Stripe Price → credits mapping in `src/lib/clerk/credit-packs.ts`:\n  ```ts\n  export const CREDIT_PACK_PRICE_TO_CREDITS = {\n    'price_small_pack': 100,\n    'price_medium_pack': 500,\n  }\n  ```\n- The webhook inspects invoice line items for matching price IDs and calls `addUserCredits(clerkUserId, totalCredits)`.\n- Subscription renewals continue to be applied via `subscription.updated`.\n\nSecurity:\n- Only award credits for whitelisted price IDs; do not trust client-provided amounts.\n- Ensure `CLERK_WEBHOOK_SECRET` is set; reject requests without valid signatures.\nLocal Development: http://localhost:3000/api\nProduction: https://your-domain.com/api\n```\n\n## Authentication\n\nAll API endpoints (except public ones) require authentication via Clerk JWT tokens. The token is automatically included by Clerk's client-side libraries.\n\n### Authorization Header\n\n```bash\nAuthorization: Bearer <clerk_jwt_token>\n```\n\n### Authentication Flow\n\n1. User signs in through Clerk\n2. Client receives JWT token\n3. Token is automatically included in API requests\n4. Server validates token using `auth()` from Clerk\n\n## Standard Response Format\n\n### Success Response\n\n```json\n{\n  \"data\": { /* response data */ },\n  \"success\": true\n}\n```\n\n### Error Response\n\n```json\n{\n  \"error\": \"Error message\",\n  \"success\": false,\n  \"code\": \"OPTIONAL_ERROR_CODE\"\n}\n```\n\n### Validation Error Response\n\n```json\n{\n  \"error\": \"Validation failed\",\n  \"success\": false,\n  \"issues\": [\n    {\n      \"path\": [\"field_name\"],\n      \"message\": \"Validation error message\",\n      \"code\": \"invalid_type\"\n    }\n  ]\n}\n```\n\n## API Endpoints\n\n### Health Check\n\n#### GET /api/health\n\nCheck API and database health status.\n\n**Authentication:** Not required\n\n**Response:**\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-03-15T10:30:00Z\",\n  \"database\": \"connected\"\n}\n```\n\n### User Management\n\n#### GET /api/users/me\n\nGet current user information.\n\n**Authentication:** Required\n\n**Response:**\n```json\n{\n  \"data\": {\n    \"id\": \"user_123\",\n    \"clerkId\": \"user_2abc123\",\n    \"email\": \"user@example.com\",\n    \"name\": \"John Doe\",\n    \"createdAt\": \"2024-03-01T00:00:00Z\",\n    \"updatedAt\": \"2024-03-15T10:30:00Z\"\n  },\n  \"success\": true\n}\n```\n\n**Error Responses:**\n- `401` - Unauthorized\n- `404` - User not found\n- `500` - Internal server error\n\n#### PUT /api/users/me\n\nUpdate current user information.\n\n**Authentication:** Required\n\n**Request Body:**\n```json\n{\n  \"name\": \"John Smith\",\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"notifications\": true\n  }\n}\n```\n\n**Response:**\n```json\n{\n  \"data\": {\n    \"id\": \"user_123\",\n    \"name\": \"John Smith\",\n    \"updatedAt\": \"2024-03-15T10:35:00Z\"\n  },\n  \"success\": true\n}\n```\n\n### Credit System\n\n#### GET /api/credits/me\n\nGet the current user's credit balance.\n\nAuthentication: Required\n\nResponse:\n```\n{\n  \"creditsRemaining\": 85,\n  \"lastSyncedAt\": \"2024-03-15T10:00:00Z\"\n}\n```\n\n#### GET /api/credits/settings\n\nPublic read-only endpoint that returns effective feature costs and plan credits for UI display.\n\nAuthentication: Not required\n\nResponse:\n```\n{\n  \"featureCosts\": { \"ai_text_chat\": 1, \"ai_image_generation\": 5 },\n  \"planCredits\": { \"cplan_abc123\": 500, \"cplan_xyz789\": 2000 }\n}\n```\nNotes:\n- `planCredits` includes Clerk plan IDs (`cplan_*`) configured via `Plan` rows.\n\n### Admin Sync\n\n#### POST /api/admin/users/sync\n\nSync Clerk users and/or plans into the local database.\n\nAuthentication: Admin required\n\nRequest Body (partial; defaults shown):\n```\n{\n  \"syncUsers\": true,\n  \"syncPlans\": true,\n  \"setCredits\": true,\n  \"overrideCredits\": 500,\n  \"pageSize\": 100,\n  \"maxPages\": 50,\n  \"debug\": false\n}\n```\n\nBehavior:\n- Users: creates/updates `User` and ensures a `CreditBalance` row exists (0 credits default)\n- Plans: queries Clerk Billing `GET /v1/users/{user_id}/billing/subscription` and resolves plan ID\n- Credits: when `setCredits` is true and plan is mapped in `Plan`, sets credits to plan credits (or `overrideCredits` if provided)\n\nResponse (success):\n```\n{\n  \"processed\": 120,\n  \"createdUsers\": 5,\n  \"createdBalances\": 5,\n  \"activeSubscriptions\": 25,\n  \"creditsRefreshed\": 25,\n  \"debug\": {\n    \"pagesProcessed\": 2,\n    \"unmappedPlanIds\": [\"cplan_123\", \"cplan_456\"]\n  }\n}\n```\n\nNotes:\n- The Admin UI includes a double confirmation summarizing the effects of selected options.\n- Ensure `CLERK_SECRET_KEY` is set to use the billing endpoint.\n\n#### GET /api/credits/usage\n\nGet detailed credit usage history.\n\n**Authentication:** Required\n\n**Query Parameters:**\n- `page` (number, optional): Page number (default: 1)\n- `limit` (number, optional): Items per page (default: 20, max: 100)\n- `days` (number, optional): Number of days to look back (default: 30)\n\n**Example Request:**\n```\nGET /api/credits/usage?page=1&limit=10&days=7\n```\n\n**Response:**\n```json\n{\n  \"data\": [\n    {\n      \"id\": \"usage_123\",\n      \"operationType\": \"AI_TEXT_CHAT\",\n      \"creditsUsed\": 1,\n      \"timestamp\": \"2024-03-15T09:00:00Z\",\n      \"details\": { \"provider\": \"openrouter\", \"model\": \"openai/gpt-4o-mini\" }\n    }\n  ],\n  \"pagination\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"total\": 25,\n    \"totalPages\": 3\n  },\n  \"success\": true\n}\n```\n\n### AI\n\n#### POST /api/ai/chat\n\nStream text responses from selected LLM providers via Vercel AI SDK.\n\nBody:\n```json\n{ \"provider\": \"openrouter\", \"model\": \"openai/gpt-4o-mini\", \"messages\": [{\"role\":\"user\",\"content\":\"Hello\"}], \"temperature\": 0.4 }\n```\n\nAuth required. Credits enforced: cost from admin settings (`ai_text_chat`). On provider failure, credits are reimbursed and a 502 is returned.\n\n#### POST /api/ai/image\n\nGenerate images via OpenRouter chat/completions with image modality.\n\nBody:\n```json\n{ \"model\": \"google/gemini-2.5-flash-image-preview\", \"prompt\": \"A friendly robot\", \"size\": \"1024x1024\", \"count\": 1 }\n```\n\nAuth required. Credits enforced: cost from admin settings (`ai_image_generation`) per image (`count`). On provider failure or invalid response, credits are reimbursed.\n\n### Admin Settings\n\n#### GET /api/admin/settings\nReturns effective credit settings and plan mappings. Admin-only.\n\nAuthentication: Admin required\n\nResponse:\n```\n{\n  \"featureCosts\": { \"ai_text_chat\": 1, \"ai_image_generation\": 5 },\n  \"planCredits\": { \"cplan_abc123\": 500 },\n  \"billingPlans\": { \"cplan_abc123\": { \"name\": \"Starter\", \"credits\": 500 } }\n}\n```\n\n#### PUT /api/admin/settings\nUpdate overrides for feature costs and plan monthly credits.\n\nAuthentication: Admin required\n\nRequest Body (partial allowed):\n```\n{\n  \"featureCosts\": { \"ai_text_chat\": 2 },\n  \"planCredits\": { \"cplan_abc123\": 600 }\n}\n```\nNotes:\n- Plan credits are keyed by Clerk plan IDs (`cplan_*`). Values are sanitized to non‑negative integers and persisted.\n\n#### GET /api/admin/clerk/plans\nFetch Clerk plans from the Clerk Backend API and normalize them for the Admin import flow.\n\nAuthentication: Admin required\n\nEnvironment requirements:\n- `CLERK_BILLING_API_KEY` (preferred) or `CLERK_SECRET_KEY`\n\nResponse (success):\n```\n{\n  \"plans\": [ { \"id\": \"plan_abc123\", \"name\": \"Starter\" }, ... ]\n}\n```\n\nResponse (error):\n```\n{\n  \"error\": \"Falha ao obter planos do Clerk\",\n  \"attempts\": [ { \"url\": \"https://api.clerk.com/v1/commerce/plans\", \"status\": 404, \"message\": \"...\" } ]\n}\n```\n\nNotes:\n- The endpoint tries multiple Clerk API paths (`/v1/commerce/plans`, `/v1/commerce/products`, `/v1/plans`) and normalizes common shapes.\n- The Admin UI also supports importing by pasting JSON and via the Clerk `usePlans()` hook when available.\n\n### AI Agent Management\n\n#### GET /api/agents\n\nGet AI agents for the current user.\n\n**Authentication:** Required\n\n**Response:**\n```json\n{\n  \"data\": [\n    {\n      \"id\": \"agent_123\",\n      \"name\": \"Code Assistant\",\n      \"description\": \"AI assistant for code review and generation\",\n      \"capabilities\": [\"code_generation\", \"code_review\", \"testing\"],\n      \"workspaceId\": \"workspace_123\",\n      \"createdAt\": \"2024-03-01T00:00:00Z\"\n    }\n  ],\n  \"success\": true\n}\n```\n\n#### POST /api/agents\n\nCreate a new AI agent.\n\n**Authentication:** Required\n\n**Request Body:**\n```json\n{\n  \"name\": \"Design Assistant\",\n  \"description\": \"AI assistant for UI/UX design tasks\",\n  \"systemPrompt\": \"You are a helpful UI/UX design assistant...\",\n  \"capabilities\": [\"design_review\", \"mockup_creation\"],\n  \"workspaceId\": \"workspace_123\"\n}\n```\n\n## Error Codes\n\n### Authentication Errors\n- `401` - Unauthorized (no valid token)\n- `403` - Forbidden (valid token but insufficient permissions)\n\n### Client Errors\n- `400` - Bad Request (invalid request format)\n- `404` - Not Found (resource doesn't exist)\n- `409` - Conflict (resource already exists)\n- `422` - Unprocessable Entity (validation failed)\n- `429` - Too Many Requests (rate limit exceeded)\n\n### Server Errors\n- `500` - Internal Server Error\n- `502` - Bad Gateway\n- `503` - Service Unavailable\n\n### Custom Error Codes\n- `INSUFFICIENT_CREDITS` - User doesn't have enough credits\n\n## Rate Limiting\n\nAPI endpoints are rate limited to prevent abuse:\n\n- **General endpoints:** 100 requests per minute per user\n- **Credit operations:** 20 requests per minute per user\n- **Webhook endpoints:** 1000 requests per minute per IP\n\nRate limit headers are included in responses:\n```\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 95\nX-RateLimit-Reset: 1679472000\n```\n\n## Pagination\n\nList endpoints support cursor-based pagination:\n\n**Query Parameters:**\n- `page` (number): Page number (1-based)\n- `limit` (number): Items per page (max 100)\n\n**Response Format:**\n```json\n{\n  \"data\": [...],\n  \"pagination\": {\n    \"page\": 1,\n    \"limit\": 20,\n    \"total\": 150,\n    \"totalPages\": 8,\n    \"hasNext\": true,\n    \"hasPrev\": false\n  },\n  \"success\": true\n}\n```\n\n## Webhooks\n\n### Clerk Webhooks\n\nThe application listens for Clerk webhooks to sync user data:\n\n#### POST /api/webhooks/clerk\n\nEvents handled:\n- `user.created`/`user.updated`/`user.deleted`: Sync user and initialize credit balance\n- `subscription.created`/`subscription.updated`/`subscription.deleted`: Refresh monthly credits for the associated Clerk plan (`cplan_*`) via `refreshUserCredits`\n- `invoice.payment_succeeded`: Add credits for one‑time credit‑pack purchases\n\nOne‑time Credit Packs:\n- Configure Price→credits mapping in `src/lib/clerk/credit-packs.ts`. Keys should match the price IDs that appear on Clerk invoice line items (for example, Stripe Price IDs if Stripe is your processor):\n  ```ts\n  export const CREDIT_PACK_PRICE_TO_CREDITS = {\n    'price_small_pack': 100,\n    'price_medium_pack': 500,\n  }\n  ```\n- The webhook inspects invoice line items for matching price IDs and calls `addUserCredits(clerkUserId, totalCredits)`.\n\nVerification:\n- Webhooks are verified using `CLERK_WEBHOOK_SECRET` (Svix signature headers required).\n\n## SDK Examples\n\n### JavaScript/TypeScript\n\n```typescript\n// API client example\nclass ApiClient {\n  private baseUrl: string;\n  \n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n  \n  async getCredits() {\n    const response = await fetch(`${this.baseUrl}/api/credits/me`, {\n      headers: {\n        'Authorization': `Bearer ${await getToken()}`,\n      },\n    });\n    \n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status}`);\n    }\n    \n    return response.json();\n  }\n}\n```\n\n### Frontend Integration with TanStack Query\n\nThe frontend uses a standardized approach for API integration with TanStack Query and a centralized API client.\n\n#### API Client Setup\n\n```typescript\n// lib/api-client.ts\nexport class ApiError extends Error {\n  constructor(\n    message: string,\n    public status: number,\n    public response?: Response\n  ) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\nexport async function apiClient<T = any>(\n  url: string,\n  options: RequestInit = {}\n): Promise<T> {\n  const response = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    let errorMessage: string;\n\n    try {\n      const errorJson = JSON.parse(errorText);\n      errorMessage = errorJson.message || errorJson.error || `HTTP ${response.status}`;\n    } catch {\n      errorMessage = errorText || `HTTP ${response.status}`;\n    }\n\n    throw new ApiError(errorMessage, response.status, response);\n  }\n\n  return response.json();\n}\n\n// Convenience methods\nexport const api = {\n  get: <T = any>(url: string, options?: RequestInit) =>\n    apiClient<T>(url, { ...options, method: 'GET' }),\n  post: <T = any>(url: string, data?: any, options?: RequestInit) =>\n    apiClient<T>(url, {\n      ...options,\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n    }),\n  put: <T = any>(url: string, data?: any, options?: RequestInit) =>\n    apiClient<T>(url, {\n      ...options,\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    }),\n  delete: <T = any>(url: string, options?: RequestInit) =>\n    apiClient<T>(url, { ...options, method: 'DELETE' }),\n};\n```\n\n#### Custom Hook Patterns\n\n```typescript\n// hooks/use-credits.ts - Query Hook\nimport { api } from '@/lib/api-client';\n\nexport interface CreditData {\n  plan: string;\n  creditsRemaining: number;\n  creditsTotal: number;\n  billingPeriodEnd: Date | null;\n  percentage: number;\n  isLow: boolean;\n  isEmpty: boolean;\n}\n\nexport function useCredits() {\n  return useQuery<CreditData>({\n    queryKey: ['credits'],\n    queryFn: () => api.get('/api/credits/me'),\n    staleTime: 30_000, // 30 seconds\n    gcTime: 5 * 60_000, // 5 minutes\n    refetchOnWindowFocus: true,\n    refetchInterval: 30000,\n  });\n}\n```\n\n#### Mutation Hook Example\n\n```typescript\n// hooks/admin/use-admin-users.ts - Mutation Hook\nexport function useUpdateUserCredits() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: ({ userId, credits }: { userId: string; credits: number }) =>\n      api.put(`/api/admin/users/${userId}/credits`, { credits }),\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Credits updated\",\n        description: `New balance: ${variables.credits}`\n      });\n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'credits'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error updating credits\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    },\n  });\n}\n```\n\n#### Component Usage\n\n```typescript\n// components/admin/user-credit-form.tsx\nexport function UserCreditForm({ userId }: { userId: string }) {\n  const updateCredits = useUpdateUserCredits();\n  const [credits, setCredits] = useState(0);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateCredits.mutate({ userId, credits });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"number\"\n        value={credits}\n        onChange={(e) => setCredits(Number(e.target.value))}\n        min={0}\n      />\n      <button\n        type=\"submit\"\n        disabled={updateCredits.isPending}\n      >\n        {updateCredits.isPending ? 'Updating...' : 'Update Credits'}\n      </button>\n    </form>\n  );\n}\n```\n\n#### Important Rules\n\n1. **Never use fetch() directly** in client components\n2. **Always use custom hooks** that wrap TanStack Query\n3. **Use the API client** for all HTTP requests\n4. **Structure query keys** consistently: `['domain', 'resource', params]`\n5. **Handle errors** through the API client's error system\n6. **Invalidate caches** properly after mutations\n\n\n## Testing\n\n### API Testing Example\n\n```typescript\n// __tests__/api/credits.test.ts\nimport { GET } from '@/app/api/credits/me/route';\nimport { mockAuth, mockDb } from '@/test-utils';\n\ndescribe('/api/credits/me', () => {\n  beforeEach(() => {\n    mockAuth({ userId: 'user_123' });\n  });\n\n  it('returns credit balance', async () => {\n    mockDb.creditBalance.findUnique.mockResolvedValue({\n      creditsRemaining: 85,\n      lastSyncedAt: new Date(),\n    });\n\n    const response = await GET();\n    const data = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(data.success).toBe(true);\n    expect(data.data.creditsRemaining).toBe(85);\n  });\n\n  it('returns 401 when not authenticated', async () => {\n    mockAuth({ userId: null });\n\n    const response = await GET();\n\n    expect(response.status).toBe(401);\n  });\n});\n```\n","size_bytes":17120},"docs/architecture.md":{"content":"# Architecture Overview\n\n## System Architecture\n\nThis Next.js SaaS template follows a modern, scalable architecture designed for production-ready applications with a focus on maintainability, performance, and developer experience.\n\n## Core Architecture Principles\n\n### 1. Separation of Concerns\n- **Presentation Layer**: React components with Next.js App Router\n- **Business Logic**: Server Components and API routes\n- **Data Layer**: Prisma ORM with PostgreSQL\n- **Authentication**: Clerk as external service\n\n### 2. Type Safety\n- End-to-end TypeScript implementation\n- Zod schemas for runtime validation\n- Prisma for type-safe database queries\n\n### 3. Performance First\n- Server Components by default\n- Client Components only when necessary\n- React Query for intelligent caching\n- Optimistic updates for better UX\n\n## Application Layers\n\n### Frontend Architecture\n\n```\n┌─────────────────────────────────────────┐\n│         Next.js App Router              │\n├─────────────────────────────────────────┤\n│     Server Components (Default)         │\n│     Client Components (Interactive)     │\n├─────────────────────────────────────────┤\n│         React Query Cache               │\n├─────────────────────────────────────────┤\n│      Radix UI + Tailwind CSS           │\n└─────────────────────────────────────────┘\n```\n\n### Backend Architecture\n\n```\n┌─────────────────────────────────────────┐\n│         API Routes (Next.js)           │\n├─────────────────────────────────────────┤\n│      Authentication (Clerk)             │\n├─────────────────────────────────────────┤\n│      Business Logic Layer              │\n├─────────────────────────────────────────┤\n│         Prisma ORM                     │\n├─────────────────────────────────────────┤\n│         PostgreSQL                     │\n└─────────────────────────────────────────┘\n```\n\n## Directory Structure\n\n```\nsrc/\n├── app/                    # Next.js App Router\n│   ├── (public)/          # Public routes group\n│   ├── (protected)/       # Protected routes group\n│   ├── api/              # API endpoints\n│   └── layout.tsx        # Root layout\n├── components/           # React components\n│   ├── ui/              # Base UI components\n│   ├── app/             # Application components\n│   └── providers/       # Context providers\n├── lib/                 # Core utilities\n│   ├── db.ts           # Database client\n│   ├── auth-utils.ts   # Auth helpers\n│   └── utils.ts        # Shared utilities\n├── hooks/              # Custom React hooks\n└── types/              # TypeScript types\n```\n\n## Route Groups\n\n### Public Routes (`/app/(public)/`)\n- Landing page\n- Authentication pages (sign-in, sign-up)\n- Marketing pages\n- No authentication required\n\n### Protected Routes (`/app/(protected)/`)\n- Dashboard\n- User profile\n- Billing/subscription\n- Requires authentication via Clerk\n\n### API Routes (`/app/api/`)\n- RESTful endpoints\n- Server-side authentication\n- Database operations\n- External service integrations\n\n## Data Flow\n\n### Read Operations\n1. User interacts with UI component\n2. React Query fetches from API route\n3. API validates authentication\n4. Prisma queries database\n5. Data returned and cached\n\n### Write Operations\n1. User submits form (React Hook Form)\n2. Zod validates input\n3. API route processes request\n4. Database updated via Prisma\n5. React Query cache invalidated\n6. UI updates optimistically\n\n### Admin Settings Flow\n- Admin updates `/admin/settings` → `PUT /api/admin/settings` saves settings in `AdminSettings` (singleton row).\n- Plan credits are keyed by Clerk plan IDs (`cplan_*`) you define in the Admin UI (persisted as rows in the `Plan` table).\n- Server utilities read: `getFeatureCost`, `getPlanCredits` (accepts Clerk plan IDs).\n- UI reads `GET /api/credits/settings` to display current costs and plan credits inline and to gate actions.\n\n### Refunds on Provider Failures\n- AI Chat and Image routes deduct before provider calls.\n- On provider failures prior to a successful response, APIs call `refundCreditsForFeature` to reimburse and log a negative usage entry with a refund flag.\n\n## State Management\n\n### Local State\n- React `useState` for component state\n- React Hook Form for form state\n- Zustand for complex local state (if needed)\n\n### Server State\n- React Query for data fetching\n- Automatic caching and synchronization\n- Optimistic updates\n- Background refetching\n\n### Global State\n- Clerk for authentication state\n- Theme context for UI preferences\n- React Query for shared server state\n\n## Security Architecture\n\n### Authentication\n- Clerk handles all authentication\n- JWT tokens for session management\n- Middleware protection for routes\n- Server-side validation on API routes\n\n### Authorization\n- Role-based access control (RBAC)\n- Resource ownership verification\n- API key management for external access\n\n### Data Protection\n- Input validation with Zod\n- SQL injection prevention via Prisma\n- XSS protection via React\n- CSRF protection via Next.js\n\n## Performance Optimizations\n\n### Rendering Strategy\n- Server Components for static content\n- Client Components for interactivity\n- Dynamic imports for code splitting\n- Streaming SSR for faster TTFB\n\n### Caching Strategy\n- React Query for API response caching\n- Next.js built-in caching\n- Database query optimization\n- CDN for static assets\n\n### Bundle Optimization\n- Tree shaking with Next.js\n- Dynamic imports for large components\n- Image optimization with Next.js Image\n- Font optimization with Next.js Font\n\n## Scalability Considerations\n\n### Horizontal Scaling\n- Stateless application design\n- Database connection pooling\n- External session storage (Clerk)\n- CDN for global distribution\n\n### Vertical Scaling\n- Efficient database queries\n- Optimized React components\n- Lazy loading strategies\n- Background job processing\n\n## Development Workflow\n\n### Local Development\n1. Clone repository\n2. Install dependencies\n3. Configure environment variables\n4. Run database migrations\n5. Start development server\n\n### Testing Strategy\n- Unit tests for utilities\n- Integration tests for API routes\n- E2E tests for critical user flows\n- Type checking with TypeScript\n\n### Deployment Pipeline\n1. Push to Git repository\n2. Automated CI/CD pipeline\n3. Run tests and type checking\n4. Build production bundle\n5. Deploy to hosting platform\n\n## Technology Decisions\n\n### Why Next.js App Router?\n- Server Components for better performance\n- Built-in routing and API routes\n- Excellent developer experience\n- Production-ready optimizations\n\n### Why Clerk?\n- Complete authentication solution\n- Social login support\n- User management dashboard\n- Webhook support for events\n\n### Why Prisma?\n- Type-safe database queries\n- Excellent developer experience\n- Database migration management\n- Support for multiple databases\n\n### Why React Query?\n- Intelligent caching\n- Optimistic updates\n- Background refetching\n- Offline support\n\n### Why Radix UI + Tailwind?\n- Accessible components\n- Unstyled primitives\n- Tailwind for rapid styling\n- Consistent design system\n","size_bytes":8083},"docs/authentication.md":{"content":"# Authentication Documentation\n\n## Overview\n\nThis application uses Clerk for authentication, providing a complete user management solution with social logins, user profiles, and session management. Authentication is handled both client-side and server-side with proper middleware protection.\n\n## Clerk Integration\n\n### Core Dependencies\n\n```json\n{\n  \"@clerk/backend\": \"^2.6.2\",\n  \"@clerk/nextjs\": \"6.23.0\"\n}\n```\n\n### Environment Configuration\n\n```env\n# Required Clerk environment variables\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...\nCLERK_SECRET_KEY=sk_test_...\nCLERK_WEBHOOK_SECRET=whsec_...\n\n# Clerk URLs (customize as needed)\nNEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in\nNEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up\nNEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard\nNEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/dashboard\n```\n\n### Root Layout Setup\n\n```tsx\n// app/layout.tsx\nimport { ClerkProvider } from '@clerk/nextjs';\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <ClerkProvider>\n      <html lang=\"en\">\n        <body>\n          {children}\n        </body>\n      </html>\n    </ClerkProvider>\n  );\n}\n```\n\n## Middleware Protection\n\n### Route Middleware\n\n```ts\n// middleware.ts\nimport { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';\nimport { NextResponse } from 'next/server';\n\nconst isPublicRoute = createRouteMatcher([\n  '/',\n  '/sign-in(.*)',\n  '/sign-up(.*)',\n  '/api/health',\n  '/api/webhooks/(.*)',\n]);\n\nexport default clerkMiddleware(async (auth, request) => {\n  // Allow public routes without authentication\n  if (isPublicRoute(request)) {\n    // Redirect authenticated users from home to dashboard\n    const authResult = await auth();\n    if (authResult.userId && request.nextUrl.pathname === \"/\") {\n      const url = new URL(\"/dashboard\", request.url);\n      return NextResponse.redirect(url);\n    }\n    return NextResponse.next();\n  }\n  \n  // All other routes require authentication\n  // This will be handled by the protected layout\n  return NextResponse.next();\n});\n\nexport const config = {\n  matcher: ['/((?!.*\\\\..*|_next).*)', '/', '/(api|trpc)(.*)'],\n};\n```\n\n### Route Groups\n\n#### Public Routes (`/app/(public)/`)\n- Landing page (`/`)\n- Sign-in page (`/sign-in`)\n- Sign-up page (`/sign-up`)\n- Marketing pages\n\n#### Protected Routes (`/app/(protected)/`)\n- Dashboard (`/dashboard`)\n- User profile (`/profile`)\n- Billing (`/billing`)\n- Settings\n\n## Client-Side Authentication\n\n### Protected Layout\n\n```tsx\n// app/(protected)/layout.tsx\n\"use client\";\n\nimport { useAuth } from \"@clerk/nextjs\";\nimport { redirect } from \"next/navigation\";\nimport { useEffect } from \"react\";\n\nexport default function ProtectedLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const { isLoaded, isSignedIn } = useAuth();\n\n  // Redirect to sign-in if not authenticated\n  useEffect(() => {\n    if (isLoaded && !isSignedIn) {\n      redirect(\"/sign-in\");\n    }\n  }, [isLoaded, isSignedIn]);\n\n  // Show loading state while checking authentication\n  if (!isLoaded) {\n    return <div className=\"loading\">Loading...</div>;\n  }\n\n  // Render protected content\n  return (\n    <div className=\"protected-layout\">\n      <Sidebar />\n      <main>{children}</main>\n    </div>\n  );\n}\n```\n\n### Client Components\n\n```tsx\n// components/auth/user-button.tsx\nimport { UserButton, useUser } from \"@clerk/nextjs\";\n\nexport function UserProfile() {\n  const { isLoaded, isSignedIn, user } = useUser();\n\n  if (!isLoaded || !isSignedIn) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex items-center gap-4\">\n      <span>Welcome, {user.firstName}!</span>\n      <UserButton \n        appearance={{\n          elements: {\n            avatarBox: \"w-8 h-8\"\n          }\n        }}\n      />\n    </div>\n  );\n}\n```\n\n### Authentication Hooks\n\n```tsx\n// hooks/use-auth.ts\nimport { useAuth as useClerkAuth, useUser } from '@clerk/nextjs';\n\nexport function useAuth() {\n  const { isLoaded, isSignedIn, userId } = useClerkAuth();\n  const { user } = useUser();\n\n  return {\n    isLoaded,\n    isSignedIn,\n    userId,\n    user,\n    isAuthenticated: isLoaded && isSignedIn,\n  };\n}\n\n// Usage in components\nfunction Dashboard() {\n  const { isAuthenticated, user } = useAuth();\n\n  if (!isAuthenticated) {\n    return <div>Please sign in</div>;\n  }\n\n  return <div>Welcome {user?.firstName}!</div>;\n}\n```\n\n## Server-Side Authentication\n\n### API Route Protection\n\n```ts\n// app/api/protected-route/route.ts\nimport { auth } from '@clerk/nextjs/server';\nimport { NextResponse } from 'next/server';\n\nexport async function GET() {\n  // Get authentication status\n  const { userId } = await auth();\n  \n  if (!userId) {\n    return NextResponse.json(\n      { error: 'Unauthorized' }, \n      { status: 401 }\n    );\n  }\n\n  // Proceed with authenticated logic\n  const data = await fetchUserData(userId);\n  return NextResponse.json(data);\n}\n```\n\n### Server Components\n\n```tsx\n// app/(protected)/dashboard/page.tsx\nimport { auth } from '@clerk/nextjs/server';\nimport { redirect } from 'next/navigation';\n\nexport default async function DashboardPage() {\n  const { userId } = await auth();\n  \n  if (!userId) {\n    redirect('/sign-in');\n  }\n\n  const userData = await fetchUserData(userId);\n  \n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <UserData data={userData} />\n    </div>\n  );\n}\n```\n\n## User Management\n\n### User Synchronization\n\nThe application maintains user data in sync between Clerk and the local database through webhooks and utility functions.\n\n```ts\n// lib/auth-utils.ts\nimport { db } from '@/lib/db';\nimport { auth } from '@clerk/nextjs/server';\n\nexport async function getUserFromClerkId(clerkId: string) {\n  let user = await db.user.findUnique({\n    where: { clerkId }\n  });\n\n  if (!user) {\n    // Create user if doesn't exist\n    user = await db.user.create({\n      data: { \n        clerkId,\n        // Additional fields will be populated via webhooks\n      }\n    });\n  }\n\n  return user;\n}\n\nexport async function getCurrentUser() {\n  const { userId } = await auth();\n  if (!userId) return null;\n  \n  return getUserFromClerkId(userId);\n}\n\nexport async function requireAuth() {\n  const { userId } = await auth();\n  if (!userId) {\n    throw new Error('Authentication required');\n  }\n  return userId;\n}\n```\n\n### Authorization Helpers\n\n```ts\n// lib/auth-utils.ts (continued)\n// verifyProjectOwnership removed in this edition (Project module removed)\n\n// Example access check: ensure the resource belongs to the current user\nexport async function verifyOwnership<T extends { userId: string }>(resource: T, userId: string) {\n  const user = await getUserFromClerkId(userId)\n  if (resource.userId !== user.id) {\n    throw new Error('Access denied')\n  }\n  return resource\n}\n```\n\n## Webhooks\n\n### Clerk Webhook Handler\n\n```ts\n// app/api/webhooks/clerk/route.ts\nimport { WebhookEvent } from '@clerk/nextjs/server';\nimport { db } from '@/lib/db';\nimport { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n  try {\n    const payload = await request.json();\n    const event = payload as WebhookEvent;\n\n    switch (event.type) {\n      case 'user.created':\n        await handleUserCreated(event);\n        break;\n        \n      case 'user.updated':\n        await handleUserUpdated(event);\n        break;\n        \n      case 'user.deleted':\n        await handleUserDeleted(event);\n        break;\n        \n      default:\n        console.log(`Unhandled webhook event: ${event.type}`);\n    }\n\n    return NextResponse.json({ received: true });\n  } catch (error) {\n    console.error('Webhook error:', error);\n    return NextResponse.json(\n      { error: 'Webhook handler failed' },\n      { status: 500 }\n    );\n  }\n}\n\nasync function handleUserCreated(event: WebhookEvent) {\n  const { id, email_addresses, first_name, last_name } = event.data;\n  \n  await db.user.create({\n    data: {\n      clerkId: id,\n      email: email_addresses[0]?.email_address,\n      name: `${first_name || ''} ${last_name || ''}`.trim() || null,\n      creditBalance: {\n        create: {\n          clerkUserId: id,\n          creditsRemaining: 100, // Welcome credits\n        }\n      }\n    }\n  });\n}\n\nasync function handleUserUpdated(event: WebhookEvent) {\n  const { id, email_addresses, first_name, last_name } = event.data;\n  \n  await db.user.update({\n    where: { clerkId: id },\n    data: {\n      email: email_addresses[0]?.email_address,\n      name: `${first_name || ''} ${last_name || ''}`.trim() || null,\n    }\n  });\n}\n\nasync function handleUserDeleted(event: WebhookEvent) {\n  await db.user.delete({\n    where: { clerkId: event.data.id }\n  });\n}\n```\n\n### Webhook Verification\n\n```ts\n// lib/webhook-verification.ts\nimport { Webhook } from 'svix';\n\nexport function verifyWebhook(\n  payload: string,\n  headers: Record<string, string>\n) {\n  const webhookSecret = process.env.CLERK_WEBHOOK_SECRET;\n  if (!webhookSecret) {\n    throw new Error('Missing CLERK_WEBHOOK_SECRET');\n  }\n\n  const webhook = new Webhook(webhookSecret);\n  return webhook.verify(payload, headers);\n}\n```\n\n## Custom Sign-in/Sign-up Pages\n\n### Sign-in Page\n\n```tsx\n// app/(public)/sign-in/[[...sign-in]]/page.tsx\nimport { SignIn } from '@clerk/nextjs';\n\nexport default function SignInPage() {\n  return (\n    <div className=\"flex min-h-screen items-center justify-center\">\n      <SignIn \n        appearance={{\n          elements: {\n            rootBox: \"mx-auto\",\n            card: \"bg-white shadow-lg\"\n          }\n        }}\n        redirectUrl=\"/dashboard\"\n      />\n    </div>\n  );\n}\n```\n\n### Sign-up Page\n\n```tsx\n// app/(public)/sign-up/[[...sign-up]]/page.tsx\nimport { SignUp } from '@clerk/nextjs';\n\nexport default function SignUpPage() {\n  return (\n    <div className=\"flex min-h-screen items-center justify-center\">\n      <SignUp \n        appearance={{\n          elements: {\n            rootBox: \"mx-auto\",\n            card: \"bg-white shadow-lg\"\n          }\n        }}\n        redirectUrl=\"/dashboard\"\n      />\n    </div>\n  );\n}\n```\n\n## Customization\n\n### Appearance Customization\n\n```ts\n// lib/clerk-theme.ts\nexport const clerkTheme = {\n  layout: {\n    socialButtonsVariant: 'iconButton' as const,\n    socialButtonsPlacement: 'top' as const,\n  },\n  elements: {\n    formButtonPrimary: 'bg-primary hover:bg-primary/90',\n    card: 'bg-card border border-border',\n    headerTitle: 'text-foreground',\n    headerSubtitle: 'text-muted-foreground',\n    dividerLine: 'bg-border',\n    formFieldInput: 'bg-background border-border',\n    footerActionLink: 'text-primary hover:text-primary/80',\n  },\n  variables: {\n    colorPrimary: 'hsl(var(--primary))',\n    colorBackground: 'hsl(var(--background))',\n    colorInputBackground: 'hsl(var(--background))',\n    colorInputText: 'hsl(var(--foreground))',\n  },\n};\n```\n\n### Usage with Theme\n\n```tsx\n// app/(public)/sign-in/page.tsx\nimport { SignIn } from '@clerk/nextjs';\nimport { clerkTheme } from '@/lib/clerk-theme';\n\nexport default function SignInPage() {\n  return (\n    <SignIn \n      appearance={clerkTheme}\n      redirectUrl=\"/dashboard\"\n    />\n  );\n}\n```\n\n## Role-Based Access Control\n\n### User Roles\n\n```ts\n// lib/roles.ts\nexport enum UserRole {\n  ADMIN = 'admin',\n  USER = 'user',\n  MODERATOR = 'moderator',\n}\n\nexport function hasRole(user: any, role: UserRole): boolean {\n  return user?.publicMetadata?.role === role;\n}\n\nexport function requireRole(user: any, role: UserRole) {\n  if (!hasRole(user, role)) {\n    throw new Error(`Access denied. Required role: ${role}`);\n  }\n}\n```\n\n### Role-based Components\n\n```tsx\n// components/auth/role-guard.tsx\nimport { useUser } from '@clerk/nextjs';\nimport { UserRole, hasRole } from '@/lib/roles';\n\ninterface RoleGuardProps {\n  role: UserRole;\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}\n\nexport function RoleGuard({ role, children, fallback }: RoleGuardProps) {\n  const { user } = useUser();\n  \n  if (!user || !hasRole(user, role)) {\n    return fallback || null;\n  }\n  \n  return <>{children}</>;\n}\n\n// Usage\n<RoleGuard role={UserRole.ADMIN}>\n  <AdminPanel />\n</RoleGuard>\n```\n\n### API Route Authorization\n\n```ts\n// app/api/admin/users/route.ts\nimport { auth, currentUser } from '@clerk/nextjs/server';\nimport { UserRole, requireRole } from '@/lib/roles';\n\nexport async function GET() {\n  const { userId } = await auth();\n  if (!userId) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  const user = await currentUser();\n  try {\n    requireRole(user, UserRole.ADMIN);\n  } catch (error) {\n    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n  }\n\n  // Admin-only logic\n  const users = await db.user.findMany();\n  return NextResponse.json(users);\n}\n```\n\n## Session Management\n\n### Session Information\n\n```tsx\n// components/auth/session-info.tsx\nimport { useSession } from '@clerk/nextjs';\n\nexport function SessionInfo() {\n  const { session, isLoaded } = useSession();\n\n  if (!isLoaded) return <div>Loading...</div>;\n  if (!session) return <div>No active session</div>;\n\n  return (\n    <div>\n      <p>Session ID: {session.id}</p>\n      <p>Last active: {session.lastActiveAt.toLocaleDateString()}</p>\n      <p>Expires: {session.expireAt.toLocaleDateString()}</p>\n    </div>\n  );\n}\n```\n\n### Manual Session Management\n\n```tsx\n// hooks/use-session-management.ts\nimport { useSession } from '@clerk/nextjs';\n\nexport function useSessionManagement() {\n  const { session } = useSession();\n\n  const extendSession = async () => {\n    try {\n      await session?.touch();\n    } catch (error) {\n      console.error('Failed to extend session:', error);\n    }\n  };\n\n  const endSession = async () => {\n    try {\n      await session?.end();\n    } catch (error) {\n      console.error('Failed to end session:', error);\n    }\n  };\n\n  return {\n    extendSession,\n    endSession,\n    isActive: session?.status === 'active',\n  };\n}\n```\n\n## Testing\n\n### Mock Authentication\n\n```tsx\n// __tests__/utils/mock-clerk.ts\nimport { vi } from 'vitest';\n\nexport const mockAuth = (overrides = {}) => {\n  vi.mock('@clerk/nextjs/server', () => ({\n    auth: vi.fn(() => ({\n      userId: 'user_123',\n      sessionId: 'session_123',\n      ...overrides,\n    })),\n  }));\n};\n\nexport const mockUseAuth = (overrides = {}) => {\n  vi.mock('@clerk/nextjs', () => ({\n    useAuth: vi.fn(() => ({\n      isLoaded: true,\n      isSignedIn: true,\n      userId: 'user_123',\n      ...overrides,\n    })),\n  }));\n};\n```\n\n### Test Examples\n\n```tsx\n// __tests__/api/protected.test.ts\nimport { GET } from '@/app/api/protected/route';\nimport { mockAuth } from '@/test-utils/mock-clerk';\n\ndescribe('/api/protected', () => {\n  it('returns data when authenticated', async () => {\n    mockAuth({ userId: 'user_123' });\n    \n    const response = await GET();\n    const data = await response.json();\n    \n    expect(response.status).toBe(200);\n    expect(data).toHaveProperty('message');\n  });\n\n  it('returns 401 when not authenticated', async () => {\n    mockAuth({ userId: null });\n    \n    const response = await GET();\n    \n    expect(response.status).toBe(401);\n  });\n});\n```\n\n## Security Best Practices\n\n### 1. Server-Side Verification\nAlways verify authentication on the server side, never trust client-side state alone.\n\n### 2. Webhook Security\nProperly verify webhook signatures to ensure they come from Clerk.\n\n### 3. Session Validation\nRegularly validate sessions, especially for sensitive operations.\n\n### 4. HTTPS Only\nAlways use HTTPS in production to protect authentication tokens.\n\n### 5. Environment Variables\nKeep all secrets in environment variables, never commit them to code.\n\n### 6. Rate Limiting\nImplement rate limiting on authentication endpoints to prevent abuse.\n\n### 7. Audit Logging\nLog all authentication events for security monitoring.\n\n```ts\n// lib/audit-logger.ts\nexport async function logAuthEvent(\n  userId: string,\n  event: string,\n  details?: any\n) {\n  await db.auditLog.create({\n    data: {\n      userId,\n      action: `AUTH_${event}`,\n      resourceType: 'authentication',\n      resourceId: userId,\n      details: JSON.stringify(details),\n      ipAddress: getClientIP(),\n      userAgent: getUserAgent(),\n    },\n  });\n}\n```\n","size_bytes":16019},"docs/backend.md":{"content":"# Backend Documentation\n\n## Overview\n\nThe backend is built with Next.js API routes, providing a serverless architecture with full-stack capabilities. It integrates with PostgreSQL through Prisma ORM and uses Clerk for authentication.\n\n## Core Technologies\n\n- **Next.js API Routes**: Serverless backend endpoints\n- **Prisma ORM**: Type-safe database client\n- **PostgreSQL**: Relational database\n- **Clerk**: Authentication and user management\n- **Zod**: Runtime validation\n- **TypeScript**: Type safety\n\n## API Architecture\n\n### Route Structure\n\n```\napp/api/\n├── credits/\n│   └── me/\n│       └── route.ts        # GET /api/credits/me\n├── users/\n│   ├── route.ts           # GET /api/users, POST /api/users\n│   └── [id]/\n│       └── route.ts       # GET /api/users/[id]\n├── health/\n│   └── route.ts           # GET /api/health\n└── webhooks/\n    └── clerk/\n        └── route.ts       # POST /api/webhooks/clerk\n```\n\n### API Route Pattern\n\nEvery API route follows this standard pattern:\n\n```ts\n// app/api/example/route.ts\nimport { NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { db } from '@/lib/db';\nimport { getUserFromClerkId } from '@/lib/auth-utils';\n\nexport async function GET() {\n  try {\n    // 1. Authenticate user\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json(\n        { error: 'Unauthorized' }, \n        { status: 401 }\n      );\n    }\n\n    // 2. Get database user\n    const user = await getUserFromClerkId(userId);\n\n    // 3. Fetch data with proper authorization\n    const data = await db.someModel.findMany({\n      where: { userId: user.id },\n    });\n\n    // 4. Return response\n    return NextResponse.json({ data });\n  } catch (error) {\n    console.error('API Error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}\n```\n\n### HTTP Methods\n\n#### GET - Read Data\n```ts\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const { userId } = await auth();\n  if (!userId) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  const data = await db.model.findUnique({\n    where: { id: params.id },\n  });\n\n  return NextResponse.json(data);\n}\n```\n\n#### POST - Create Data\n```ts\nexport async function POST(request: Request) {\n  const { userId } = await auth();\n  if (!userId) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  const body = await request.json();\n  \n  // Validate input\n  const schema = z.object({\n    name: z.string().min(1),\n    description: z.string().optional(),\n  });\n\n  const validatedData = schema.parse(body);\n\n  const user = await getUserFromClerkId(userId);\n  const created = await db.model.create({\n    data: {\n      ...validatedData,\n      userId: user.id,\n    },\n  });\n\n  return NextResponse.json(created, { status: 201 });\n}\n```\n\n#### PUT - Update Data\n```ts\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const { userId } = await auth();\n  if (!userId) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  const body = await request.json();\n  \n  // Verify ownership\n  const user = await getUserFromClerkId(userId);\n  const existing = await db.model.findFirst({\n    where: { id: params.id, userId: user.id },\n  });\n\n  if (!existing) {\n    return NextResponse.json({ error: 'Not found' }, { status: 404 });\n  }\n\n  const updated = await db.model.update({\n    where: { id: params.id },\n    data: body,\n  });\n\n  return NextResponse.json(updated);\n}\n```\n\n#### DELETE - Remove Data\n```ts\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const { userId } = await auth();\n  if (!userId) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  const user = await getUserFromClerkId(userId);\n  \n  // Verify ownership\n  const existing = await db.model.findFirst({\n    where: { id: params.id, userId: user.id },\n  });\n\n  if (!existing) {\n    return NextResponse.json({ error: 'Not found' }, { status: 404 });\n  }\n\n  await db.model.delete({\n    where: { id: params.id },\n  });\n\n  return NextResponse.json({ success: true });\n}\n```\n\n## Data Validation\n\n### Input Validation with Zod\n\n```ts\n// lib/validations.ts\nexport const createUserSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  email: z.string().email('Invalid email'),\n  age: z.number().int().min(18, 'Must be at least 18'),\n});\n\n// Usage in API route\nexport async function POST(request: Request) {\n  const body = await request.json();\n  \n  try {\n    const validatedData = createUserSchema.parse(body);\n    // Proceed with validated data\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation failed', issues: error.issues },\n        { status: 400 }\n      );\n    }\n  }\n}\n```\n\n### Response Schemas\n\n```ts\n// lib/api-types.ts\nexport type ApiResponse<T> = {\n  data?: T;\n  error?: string;\n  success: boolean;\n};\n\nexport type PaginatedResponse<T> = ApiResponse<T[]> & {\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n  };\n};\n\n// Usage\nfunction createResponse<T>(data: T): ApiResponse<T> {\n  return { data, success: true };\n}\n```\n\n## Error Handling\n\n### Standard Error Responses\n\n```ts\n// lib/api-errors.ts\nexport class ApiError extends Error {\n  constructor(\n    message: string,\n    public statusCode: number = 500\n  ) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\nexport function handleApiError(error: unknown) {\n  if (error instanceof ApiError) {\n    return NextResponse.json(\n      { error: error.message, success: false },\n      { status: error.statusCode }\n    );\n  }\n\n  if (error instanceof z.ZodError) {\n    return NextResponse.json(\n      { \n        error: 'Validation failed', \n        issues: error.issues,\n        success: false \n      },\n      { status: 400 }\n    );\n  }\n\n  console.error('Unexpected API error:', error);\n  return NextResponse.json(\n    { error: 'Internal server error', success: false },\n    { status: 500 }\n  );\n}\n```\n\n### Usage in Routes\n\n```ts\nexport async function POST(request: Request) {\n  try {\n    // API logic\n  } catch (error) {\n    return handleApiError(error);\n  }\n}\n```\n\n## Database Operations\n\n### Connection Management\n\n```ts\n// lib/db.ts\n// If you set a custom Prisma client output, import from that path\nimport { PrismaClient } from '../../prisma/generated/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? new PrismaClient({\n  log: process.env.NODE_ENV === 'development' ? ['query'] : [],\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  globalForPrisma.prisma = db;\n}\n```\n\n### Query Patterns\n\n#### Simple Queries\n```ts\n// Find by ID\nconst user = await db.user.findUnique({\n  where: { id: userId },\n});\n\n// Find many with filters\nconst usage = await db.usageHistory.findMany({\n  where: { userId: user.id },\n  orderBy: { timestamp: 'desc' },\n  take: 20,\n});\n```\n\n#### Complex Queries with Relations\n```ts\nconst usageWithDetails = await db.usageHistory.findFirst({\n  where: { userId: user.id },\n  include: {\n    creditBalance: true,\n    user: true,\n  },\n});\n```\n\n#### Transactions\n```ts\nconst result = await db.$transaction(async (tx) => {\n  const user = await tx.user.create({\n    data: { name: 'John', email: 'john@example.com' },\n  });\n\n  await tx.creditBalance.create({\n    data: {\n      userId: user.id,\n      creditsRemaining: 100,\n    },\n  });\n\n  return user;\n});\n```\n\n## Middleware\n\n### Authentication Middleware\n\n```ts\n// middleware.ts\nimport { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';\nimport { NextResponse } from 'next/server';\n\nconst isPublicRoute = createRouteMatcher([\n  '/',\n  '/sign-in(.*)',\n  '/sign-up(.*)',\n  '/api/health',\n  '/api/webhooks/(.*)',\n]);\n\nexport default clerkMiddleware(async (auth, request) => {\n  if (isPublicRoute(request)) {\n    return NextResponse.next();\n  }\n\n  // Additional middleware logic\n  return NextResponse.next();\n});\n```\n\n## Webhooks\n\n### Clerk Webhooks\n\n```ts\n// app/api/webhooks/clerk/route.ts\nimport { WebhookEvent } from '@clerk/nextjs/server';\nimport { db } from '@/lib/db';\n\nexport async function POST(request: Request) {\n  const payload = await request.json();\n  const event = payload as WebhookEvent;\n\n  switch (event.type) {\n    case 'user.created':\n      await db.user.create({\n        data: {\n          clerkId: event.data.id,\n          email: event.data.email_addresses[0]?.email_address,\n          name: `${event.data.first_name} ${event.data.last_name}`,\n        },\n      });\n      break;\n\n    case 'user.updated':\n      await db.user.update({\n        where: { clerkId: event.data.id },\n        data: {\n          email: event.data.email_addresses[0]?.email_address,\n          name: `${event.data.first_name} ${event.data.last_name}`,\n        },\n      });\n      break;\n\n    case 'user.deleted':\n      await db.user.delete({\n        where: { clerkId: event.data.id },\n      });\n      break;\n  }\n\n  return NextResponse.json({ received: true });\n}\n```\n\n### Billing & Credits\n\nThe template supports two ways to manage credits:\n\n- Subscriptions: Monthly allowances are set via Clerk subscription events. Handled in `src/app/api/webhooks/clerk/route.ts` using `refreshUserCredits(...)` on `subscription.created/updated/deleted`.\n  - When a Clerk plan ID (`subscription.plan_id`, e.g. `cplan_...`) is present, credits are resolved via `getPlanCredits(planId)` passing that Clerk plan ID.\n  - Canonical billing lookup endpoint used outside webhooks (e.g., admin sync): `GET /v1/users/{user_id}/billing/subscription`.\n- One-time Credit Packs: Users can purchase additional credits via billed price IDs mapped to credit amounts (commonly Stripe Price IDs when using Stripe via Clerk).\n\nConfiguration steps for Credit Packs:\n- Map price IDs to credit amounts in `src/lib/clerk/credit-packs.ts` (use the IDs that appear on Clerk invoice line items):\n  ```ts\n  export const CREDIT_PACK_PRICE_TO_CREDITS = {\n    'price_small_pack': 100,\n    'price_medium_pack': 500,\n    'price_large_pack': 2000,\n  }\n  ```\n- On `invoice.payment_succeeded`, the Clerk webhook sums matching price IDs from invoice line items and calls `addUserCredits(clerkUserId, credits)` to increment `creditsRemaining`.\n- Subscription renewals still refresh the monthly quota via `subscription.updated` events.\n\nImplementation references:\n- Webhook: `src/app/api/webhooks/clerk/route.ts`\n- Add credits helper: `src/lib/credits/validate-credits.ts` (`addUserCredits`)\n- Price→credits mapping: `src/lib/clerk/credit-packs.ts`\n\nPlan mapping (Clerk Billing):\n- Clerk planos têm IDs como `cplan_xxx`.\n- In Admin → Settings, directly map each `cplan_*` to `{ name, credits }`. This now persists in the `Plan` table (fields: `clerkId`, `name`, `credits`, `active`).\n- There are no internal keys or fixed free plan; if there is a free plan, create it in Clerk and register its `cplan_*` normally.\n- O webhook resolve créditos usando `getPlanCredits(planId)` com o `subscription.plan_id`.\n\nAdmin sync behavior:\n- Endpoint: `POST /api/admin/users/sync` supports scoped syncing\n  - `syncUsers`: create/update users and ensure 0-credits balance\n  - `syncPlans`: fetch billing subscription via `GET /v1/users/{user_id}/billing/subscription`\n  - `setCredits`: apply mapped plan credits to users with active plan\n  - `overrideCredits`: optional, to set a custom credits amount instead of the plan default\n  - `debug`: optional, includes `{ pagesProcessed, unmappedPlanIds }` in the response\n\nSecurity considerations:\n- Only award credits for whitelisted price IDs (do not trust client-provided amounts).\n- Verify webhook signatures (Svix) before processing.\n- Consider idempotency using invoice IDs if you extend logic to prevent double-awards on retries.\n\n## Caching\n\n### Database Query Caching\n\n```ts\n// lib/cache.ts\nconst cache = new Map();\n\nexport function withCache<T>(\n  key: string,\n  fetcher: () => Promise<T>,\n  ttl: number = 60000\n): Promise<T> {\n  const cached = cache.get(key);\n  \n  if (cached && Date.now() - cached.timestamp < ttl) {\n    return Promise.resolve(cached.data);\n  }\n\n  return fetcher().then(data => {\n    cache.set(key, { data, timestamp: Date.now() });\n    return data;\n  });\n}\n\n// Usage\nconst users = await withCache(\n  'users',\n  () => db.user.findMany(),\n  5 * 60 * 1000 // 5 minutes\n);\n```\n\n## Background Jobs\n\n### Simple Queue Implementation\n\n```ts\n// lib/queue.ts\ntype Job<T = any> = {\n  id: string;\n  type: string;\n  payload: T;\n  attempts: number;\n  maxAttempts: number;\n  createdAt: Date;\n};\n\nclass SimpleQueue {\n  private jobs: Job[] = [];\n  private processing = false;\n\n  add<T>(type: string, payload: T, maxAttempts = 3) {\n    const job: Job<T> = {\n      id: crypto.randomUUID(),\n      type,\n      payload,\n      attempts: 0,\n      maxAttempts,\n      createdAt: new Date(),\n    };\n\n    this.jobs.push(job);\n    this.process();\n  }\n\n  private async process() {\n    if (this.processing) return;\n    this.processing = true;\n\n    while (this.jobs.length > 0) {\n      const job = this.jobs.shift()!;\n      \n      try {\n        await this.executeJob(job);\n      } catch (error) {\n        job.attempts++;\n        if (job.attempts < job.maxAttempts) {\n          this.jobs.push(job);\n        }\n      }\n    }\n\n    this.processing = false;\n  }\n\n  private async executeJob(job: Job) {\n    switch (job.type) {\n      case 'SEND_EMAIL':\n        await this.sendEmail(job.payload);\n        break;\n      case 'PROCESS_PAYMENT':\n        await this.processPayment(job.payload);\n        break;\n    }\n  }\n}\n```\n\n## Performance Optimization\n\n### Database Optimization\n\n```ts\n// Use select to limit fields\nconst users = await db.user.findMany({\n  select: {\n    id: true,\n    name: true,\n    email: true,\n  },\n});\n\n// Use cursors for pagination\nconst projects = await db.project.findMany({\n  take: 10,\n  cursor: lastProjectId ? { id: lastProjectId } : undefined,\n  orderBy: { createdAt: 'desc' },\n});\n\n// Use database indexes\n// In Prisma schema:\n// @@index([userId])\n// @@index([createdAt])\n```\n\n### Response Optimization\n\n```ts\n// Stream responses for large data\nexport async function GET() {\n  const stream = new ReadableStream({\n    start(controller) {\n      // Stream data chunks\n      controller.enqueue(JSON.stringify({ chunk: 1 }));\n      controller.close();\n    },\n  });\n\n  return new Response(stream, {\n    headers: { 'Content-Type': 'application/json' },\n  });\n}\n```\n\n## Security Best Practices\n\n### Input Sanitization\n\n```ts\n// Always validate and sanitize input\nconst sanitizedInput = input.trim().toLowerCase();\nconst validated = schema.parse(sanitizedInput);\n```\n\n### SQL Injection Prevention\n\n```ts\n// Prisma automatically prevents SQL injection\n// ✅ Safe\nconst user = await db.user.findUnique({\n  where: { email: userInput },\n});\n\n// ❌ Never use raw queries with user input\n// const users = await db.$queryRaw`SELECT * FROM User WHERE email = ${userInput}`;\n```\n\n### Rate Limiting\n\n```ts\n// lib/rate-limit.ts\nconst requests = new Map<string, number[]>();\n\nexport function rateLimit(ip: string, limit: number, window: number) {\n  const now = Date.now();\n  const timestamps = requests.get(ip) || [];\n  \n  // Remove old requests\n  const validTimestamps = timestamps.filter(\n    timestamp => now - timestamp < window\n  );\n\n  if (validTimestamps.length >= limit) {\n    throw new ApiError('Rate limit exceeded', 429);\n  }\n\n  validTimestamps.push(now);\n  requests.set(ip, validTimestamps);\n}\n```\n\n## Testing\n\n### API Route Testing\n\n```ts\n// __tests__/api/users.test.ts\nimport { POST } from '@/app/api/users/route';\nimport { db } from '@/lib/db';\n\njest.mock('@/lib/db');\njest.mock('@clerk/nextjs/server');\n\ndescribe('/api/users', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  test('creates user successfully', async () => {\n    (auth as jest.Mock).mockResolvedValue({ userId: 'user_123' });\n    (db.user.create as jest.Mock).mockResolvedValue({\n      id: '1',\n      name: 'Test User',\n    });\n\n    const request = new Request('http://localhost', {\n      method: 'POST',\n      body: JSON.stringify({ name: 'Test User' }),\n    });\n\n    const response = await POST(request);\n    const data = await response.json();\n\n    expect(response.status).toBe(201);\n    expect(data.name).toBe('Test User');\n  });\n});\n```\n\n## Monitoring\n\n### Error Logging\n\n```ts\n// lib/logger.ts\nexport function logError(error: Error, context?: any) {\n  console.error({\n    message: error.message,\n    stack: error.stack,\n    context,\n    timestamp: new Date().toISOString(),\n  });\n\n  // Send to monitoring service in production\n  if (process.env.NODE_ENV === 'production') {\n    // Send to Sentry, LogRocket, etc.\n  }\n}\n```\n\n### Health Checks\n\n```ts\n// app/api/health/route.ts\nexport async function GET() {\n  try {\n    // Check database connection\n    await db.$queryRaw`SELECT 1`;\n\n    return NextResponse.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      database: 'connected',\n    });\n  } catch (error) {\n    return NextResponse.json(\n      {\n        status: 'unhealthy',\n        timestamp: new Date().toISOString(),\n        database: 'disconnected',\n      },\n      { status: 503 }\n    );\n  }\n}\n```\n","size_bytes":17427},"docs/brand-config.md":{"content":"# Brand Configuration\n\nCentralized brand settings live in `src/lib/brand-config.ts`. Update this file to change your app name, description, URLs, assets, and analytics IDs in one place.\n\n## What’s Configured\n- name/shortName: Display name used in headers/footers and metadata\n- description/keywords/author: SEO-friendly defaults used for page metadata\n- url: Public base URL (from `NEXT_PUBLIC_APP_URL`)\n- logo/icons: Paths to assets under `/public`\n- ogImage: Social sharing image path under `/public`\n- socials/support: Contact and social handles\n- analytics: Google Tag Manager, GA4, and Meta Pixel IDs (from env)\n\n## Where It’s Used\n- Root metadata in `src/app/layout.tsx` via `siteMetadata`\n- Public header and footer via `site.name`/`site.shortName`\n- Global analytics injection via `AnalyticsPixels` component\n\n## Environment Variables\nAdd these to `.env.local` (see `.env.example`):\n- `NEXT_PUBLIC_APP_URL` – public site URL\n- `NEXT_PUBLIC_GTM_ID` – Google Tag Manager ID (optional)\n- `NEXT_PUBLIC_GA_ID` – Google Analytics 4 measurement ID (optional)\n- `NEXT_PUBLIC_FACEBOOK_PIXEL_ID` – Meta/Facebook Pixel ID (optional)\n\n## Asset Paths\nPlace files under `/public` and update the paths in `brand-config.ts`:\n- `logo.light` – e.g. `/logo-light.svg`\n- `logo.dark` – e.g. `/logo-dark.svg`\n- `icons.favicon` – e.g. `/favicon.ico`\n- `icons.apple` – e.g. `/apple-touch-icon.png`\n- `ogImage` – e.g. `/og-image.png`\n\n## Extending\nYou can safely add new fields (e.g. `pricing`, `legal`, `productHunt`) to the `site` object and consume them across your app via `import { site } from '@/lib/brand-config'`.\n\n","size_bytes":1628},"docs/components.md":{"content":"# Components Documentation\n\n## Overview\n\nThis application uses a component-driven architecture with Radix UI primitives and custom components built with Tailwind CSS. Components are organized by purpose and reusability.\n\n## Component Hierarchy\n\n```\ncomponents/\n├── ui/              # Base UI components (Radix + Tailwind)\n├── app/             # Application-specific components\n│   ├── page-header.tsx  # Automatic page headers\n│   ├── sidebar.tsx      # Navigation sidebar\n│   └── topbar.tsx       # Top navigation\n├── features/        # Feature-specific components\n└── providers/       # Context providers\n\ncontexts/\n└── page-metadata.tsx # Page metadata management\n\nhooks/\n└── use-page-config.ts # Page configuration helper\n```\n\n## UI Components (`/components/ui/`)\n\nThese are the foundational components built with Radix UI primitives and styled with Tailwind CSS. They follow the shadcn/ui design system.\n\n### Button Component\n\n```tsx\n// components/ui/button.tsx\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline: \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\n\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n```\n\n**Usage:**\n```tsx\nimport { Button } from \"@/components/ui/button\";\n\n<Button variant=\"default\" size=\"lg\">\n  Primary Button\n</Button>\n\n<Button variant=\"outline\" size=\"sm\">\n  Secondary Button\n</Button>\n\n<Button variant=\"ghost\" size=\"icon\">\n  <Plus className=\"h-4 w-4\" />\n</Button>\n```\n\n### Form Components\n\n```tsx\n// components/ui/form.tsx - Using React Hook Form context\nimport { useFormContext } from \"react-hook-form\";\n\nconst FormField = ({\n  name,\n  render,\n}: {\n  name: string;\n  render: ({ field }: { field: any }) => React.ReactNode;\n}) => {\n  const { control } = useFormContext();\n  \n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState }) => (\n        <FormItem>\n          {render({ field })}\n          {fieldState.error && (\n            <FormMessage>{fieldState.error.message}</FormMessage>\n          )}\n        </FormItem>\n      )}\n    />\n  );\n};\n```\n\n**Form Usage Example:**\n```tsx\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\n\nconst formSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n});\n\nfunction LoginForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n  });\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter email\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </form>\n    </Form>\n  );\n}\n```\n\n### Dialog Component\n\n```tsx\n// components/ui/dialog.tsx\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\n\nconst Dialog = DialogPrimitive.Root;\nconst DialogTrigger = DialogPrimitive.Trigger;\nconst DialogPortal = DialogPrimitive.Portal;\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n      className\n    )}\n    {...props}\n  />\n));\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\n```\n\n**Dialog Usage:**\n```tsx\n<Dialog>\n  <DialogTrigger asChild>\n    <Button>Open Dialog</Button>\n  </DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Confirmation</DialogTitle>\n      <DialogDescription>\n        Are you sure you want to delete this item?\n      </DialogDescription>\n    </DialogHeader>\n    <DialogFooter>\n      <Button variant=\"outline\">Cancel</Button>\n      <Button variant=\"destructive\">Delete</Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\n```\n\n## Application Components (`/components/app/`)\n\n### Sidebar Component\n\n```tsx\n// components/app/sidebar.tsx\ninterface SidebarProps {\n  collapsed: boolean;\n  onToggle: () => void;\n}\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: Home },\n  { name: \"Billing\", href: \"/billing\", icon: CreditCard },\n  { name: \"Profile\", href: \"/profile\", icon: User },\n];\n\nexport function Sidebar({ collapsed, onToggle }: SidebarProps) {\n  const pathname = usePathname();\n\n  return (\n    <aside className={cn(\n      \"border-r bg-card/30 backdrop-blur-xl transition-[width]\",\n      collapsed ? \"w-[64px]\" : \"w-64\"\n    )}>\n      <nav className=\"p-2\">\n        {navigation.map((item) => (\n          <Link\n            key={item.name}\n            href={item.href}\n            className={cn(\n              \"flex items-center gap-3 rounded-lg px-3 py-2\",\n              pathname === item.href \n                ? \"bg-accent text-accent-foreground\"\n                : \"hover:bg-accent\"\n            )}\n          >\n            <item.icon className=\"h-4 w-4\" />\n            {!collapsed && <span>{item.name}</span>}\n          </Link>\n        ))}\n      </nav>\n    </aside>\n  );\n}\n```\n\n### Topbar Component\n\n```tsx\n// components/app/topbar.tsx\ninterface TopbarProps {\n  onToggleSidebar: () => void;\n  sidebarCollapsed: boolean;\n}\n\nexport function Topbar({ onToggleSidebar, sidebarCollapsed }: TopbarProps) {\n  return (\n    <header className=\"flex h-14 items-center gap-4 border-b bg-background px-6\">\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={onToggleSidebar}\n        className=\"md:hidden\"\n      >\n        <Menu className=\"h-5 w-5\" />\n      </Button>\n      \n      <div className=\"flex-1\" />\n      \n      <UserMenu />\n      <ThemeToggle />\n    </header>\n  );\n}\n```\n\n## Feature Components\n\n### Credit System Components\n\n```tsx\n// components/credits/credit-status.tsx\nexport function CreditStatus() {\n  const { data: credits, isLoading } = useCredits();\n  \n  if (isLoading) {\n    return <Skeleton className=\"h-6 w-20\" />;\n  }\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Coins className=\"h-4 w-4 text-yellow-500\" />\n      <span className=\"text-sm font-medium\">\n        {credits?.creditsRemaining || 0} credits\n      </span>\n    </div>\n  );\n}\n```\n\n### User Menu Component\n\n```tsx\n// components/app/user-menu.tsx\nexport function UserMenu() {\n  const { user } = useUser();\n  const router = useRouter();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n          <Avatar className=\"h-8 w-8\">\n            <AvatarImage src={user?.imageUrl} alt={user?.fullName || ''} />\n            <AvatarFallback>\n              {user?.firstName?.[0]}{user?.lastName?.[0]}\n            </AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuLabel>My Account</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem onClick={() => router.push('/profile')}>\n          <User className=\"mr-2 h-4 w-4\" />\n          Profile\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => router.push('/billing')}>\n          <CreditCard className=\"mr-2 h-4 w-4\" />\n          Billing\n        </DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>\n          <SignOutButton>\n            <button className=\"flex w-full items-center\">\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Sign out\n            </button>\n          </SignOutButton>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n```\n\n## Provider Components\n\n### Query Provider\n\n```tsx\n// components/providers/query-provider.tsx\n'use client';\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport { useState } from 'react';\n\nexport function QueryProvider({ children }: { children: React.ReactNode }) {\n  const [queryClient] = useState(\n    () => new QueryClient({\n      defaultOptions: {\n        queries: {\n          staleTime: 60 * 1000, // 1 minute\n          retry: 3,\n        },\n      },\n    })\n  );\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  );\n}\n```\n\n### Theme Provider\n\n```tsx\n// components/providers/theme-provider.tsx\n'use client';\n\nimport { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'dark' | 'light' | 'system';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = 'system',\n  storageKey = 'ui-theme',\n}: {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}) {\n  const [theme, setTheme] = useState<Theme>(defaultTheme);\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n\n    if (theme === 'system') {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)')\n        .matches\n        ? 'dark'\n        : 'light';\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n```\n\n## Component Patterns\n\n### Compound Components\n\n```tsx\n// components/ui/card.tsx\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"rounded-xl border bg-card text-card-foreground shadow\", className)}\n    {...props}\n  />\n));\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\n\n// Usage\n<Card>\n  <CardHeader>\n    <CardTitle>Title</CardTitle>\n    <CardDescription>Description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <p>Content</p>\n  </CardContent>\n</Card>\n```\n\n### Render Props Pattern\n\n```tsx\n// components/data-fetcher.tsx\ninterface DataFetcherProps<T> {\n  url: string;\n  children: (data: {\n    data: T | null;\n    loading: boolean;\n    error: Error | null;\n  }) => React.ReactNode;\n}\n\nexport function DataFetcher<T>({ url, children }: DataFetcherProps<T>) {\n  const { data, isLoading, error } = useQuery({\n    queryKey: [url],\n    queryFn: () => fetch(url).then(res => res.json()),\n  });\n\n  return children({ data, loading: isLoading, error });\n}\n\n// Usage\n<DataFetcher<User[]> url=\"/api/users\">\n  {({ data, loading, error }) => {\n    if (loading) return <Loading />;\n    if (error) return <Error error={error} />;\n    return <UserList users={data} />;\n  }}\n</DataFetcher>\n```\n\n### Higher-Order Components (HOCs)\n\n```tsx\n// components/hocs/with-auth.tsx\nexport function withAuth<T extends Record<string, any>>(\n  WrappedComponent: React.ComponentType<T>\n) {\n  return function AuthenticatedComponent(props: T) {\n    const { isLoaded, isSignedIn } = useAuth();\n    \n    if (!isLoaded) {\n      return <Loading />;\n    }\n    \n    if (!isSignedIn) {\n      redirect('/sign-in');\n    }\n    \n    return <WrappedComponent {...props} />;\n  };\n}\n\n// Usage\nconst ProtectedPage = withAuth(DashboardPage);\n```\n\n## Styling Guidelines\n\n### CSS-in-JS with Tailwind\n\n```tsx\n// Use cn utility for conditional classes\nconst Button = ({ variant, size, className, ...props }) => (\n  <button\n    className={cn(\n      \"base-button-classes\",\n      {\n        \"variant-primary\": variant === \"primary\",\n        \"variant-secondary\": variant === \"secondary\",\n      },\n      className\n    )}\n    {...props}\n  />\n);\n```\n\n### Custom CSS Variables\n\n```css\n/* globals.css */\n.glass-panel {\n  backdrop-filter: blur(16px);\n  background: rgba(var(--card), 0.3);\n  border: 1px solid rgba(var(--border), 0.4);\n}\n\n.noise-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0.03;\n  z-index: -1;\n  background-image: url(\"data:image/svg+xml,%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E...\");\n}\n```\n\n## Testing Components\n\n### Unit Testing with Jest and React Testing Library\n\n```tsx\n// __tests__/components/button.test.tsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Button } from '@/components/ui/button';\n\ndescribe('Button', () => {\n  it('renders correctly', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByRole('button')).toHaveTextContent('Click me');\n  });\n\n  it('handles click events', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    \n    fireEvent.click(screen.getByRole('button'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  it('applies variant classes correctly', () => {\n    render(<Button variant=\"destructive\">Delete</Button>);\n    expect(screen.getByRole('button')).toHaveClass('bg-destructive');\n  });\n});\n```\n\n### Integration Testing\n\n```tsx\n// __tests__/components/user-menu.test.tsx\nimport { render, screen } from '@testing-library/react';\nimport { UserMenu } from '@/components/app/user-menu';\nimport { useUser } from '@clerk/nextjs';\n\njest.mock('@clerk/nextjs');\n\ndescribe('UserMenu', () => {\n  it('displays user information', () => {\n    (useUser as jest.Mock).mockReturnValue({\n      user: {\n        firstName: 'John',\n        lastName: 'Doe',\n        imageUrl: 'https://example.com/avatar.jpg',\n      },\n    });\n\n    render(<UserMenu />);\n    expect(screen.getByText('JD')).toBeInTheDocument();\n  });\n});\n```\n\n## Best Practices\n\n### 1. Component Design\n- Keep components small and focused\n- Use TypeScript for prop types\n- Follow single responsibility principle\n- Implement proper error boundaries\n\n### 2. Performance\n- Use React.memo for expensive components\n- Implement proper key props for lists\n- Use lazy loading for heavy components\n- Optimize re-renders with useCallback/useMemo\n\n### 3. Accessibility\n- Use semantic HTML elements\n- Implement proper ARIA labels\n- Ensure keyboard navigation\n- Test with screen readers\n\n### 4. Reusability\n- Create generic, composable components\n- Use render props or children for flexibility\n- Implement consistent prop interfaces\n- Document component APIs\n\n### 5. State Management\n- Lift state up when needed\n- Use local state by default\n- Implement proper loading states\n- Handle error states gracefully","size_bytes":17519},"docs/credits.md":{"content":"# Credits: Server Source of Truth\n\nThis project treats the user’s credit balance as the source of truth on the server.\n\n## Reading Balance\n- Endpoint: `GET /api/credits/me` returns `{ creditsRemaining }` from the database.\n- The `useCredits()` hook uses React Query to fetch and keep it fresh:\n  - Refetches when the window regains focus\n  - Background refresh every 30s\n  - Exposes `refresh()` to force refetch after mutations\n\n## Spending Credits\n- API handlers call:\n  - `validateCreditsForFeature(clerkUserId, feature)`\n  - `deductCreditsForFeature({ clerkUserId, feature, details })`\n- Cost config: `src/lib/credits/feature-config.ts` (`FEATURE_CREDIT_COSTS`)\n- Mapping `Feature → OperationType` for usage history: `toPrismaOperationType()`\n\n## Admin Overrides (Feature Costs and Plan Credits)\n- Feature costs live in `AdminSettings.featureCosts`.\n- Plans live in the `Plan` table with shape `{ clerkId, name, credits, active }`.\n- Admin UI at `/admin/settings` lets you:\n  - Set per-feature credit costs (e.g., `ai_text_chat`, `ai_image_generation`).\n  - Manage Clerk Plan IDs (`cplan_*`) → Name + Monthly Credits (persisted as rows in `Plan`).\n- Effective values:\n  - Server utilities: `getFeatureCost`, `getPlanCredits` in `src/lib/credits/settings.ts`.\n  - Public read-only endpoint: `GET /api/credits/settings` returns `{ featureCosts, planCredits }` with keys as Clerk `cplan_*` IDs.\n  - Admin endpoints: `GET/POST /api/admin/plans`, `PUT/DELETE /api/admin/plans/[clerkId]` for plan CRUD.\n\nNotes\n- `getPlanCredits(planId)` accepts a Clerk plan ID (`cplan_*`). Webhooks and subscription handlers pass Clerk plan IDs when available.\n\nUI consumption\n- `useCredits()` now fetches `GET /api/credits/settings` and exposes `getCost(operation)` and `canPerformOperation(operation)` using the dynamic values.\n- AI Chat displays the current dynamic cost for text/image, and disables actions if balance < cost.\n\n## Refund Policy (AI Chat and Image)\n- If a provider error occurs after credits are deducted, the system reimburses the user automatically:\n  - Text (`POST /api/ai/chat`): refunds on provider errors before the response is returned.\n  - Image (`POST /api/ai/image`): refunds on non-OK status, invalid responses, parse errors, or empty result.\n- Refunds are tracked in `UsageHistory` as negative `creditsUsed` with `{ refund: true, reason }` in `details` for auditing.\n\n## UI (AI Chat)\n- Text: after sending, the UI calls `refresh()` (backend deducts before the stream starts)\n- Image: after a successful `200 OK`, call `refresh()` immediately\n- Entry point: `src/app/(protected)/ai-chat/page.tsx`\n\n## Health Check\n- `GET /api/admin/health/credits-enum` (admin only)\n  - Confirms `toPrismaOperationType('ai_text_chat') === OperationType.AI_TEXT_CHAT` (and image likewise)\n\n## Prisma Client & Enums\n- Client is generated at `prisma/generated/client`\n- Code imports `PrismaClient` from that path (not `@prisma/client`) to avoid enum mismatches at runtime\n- Shortcut: `src/lib/prisma-types.ts` re-exports `OperationType`\n\n## Admin & Webhooks\n- Admin manual adjustments create `UsageHistory`\n- Clerk webhooks (subscriptions/payments) update balances\n- If webhooks fail, use `POST /api/admin/users/sync` to reconcile. The sync now supports scoped modes (users only, plans only) and optional credit overrides.\n","size_bytes":3320},"docs/database.md":{"content":"# Database Documentation\n\nStatus: Parts of this document were outdated. The section below reflects the current Prisma schema at a glance; legacy content remains for reference and will be incrementally revised.\n\n## Current Models Snapshot\n\nThis mirrors `prisma/schema.prisma` in the repository.\n\n```prisma\nmodel User {\n  id        String   @id @default(cuid())\n  clerkId   String   @unique\n  email     String?  @unique\n  name      String?\n  isActive  Boolean  @default(true)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  creditBalance      CreditBalance?\n  usageHistory       UsageHistory[]\n  storageObjects     StorageObject[]\n  subscriptionEvents SubscriptionEvent[]\n}\n\nmodel Feature {\n  id          String   @id @default(cuid())\n  workspaceId String\n  name        String\n  description String?\n  tags        String[]\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n}\n\nmodel CreditBalance {\n  id               String   @id @default(cuid())\n  userId           String   @unique\n  clerkUserId      String   @unique\n  creditsRemaining Int      @default(100)\n  lastSyncedAt     DateTime @default(now())\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n\n  user         User     @relation(fields: [userId], references: [id])\n  usageHistory UsageHistory[]\n}\n\nmodel UsageHistory {\n  id              String        @id @default(cuid())\n  userId          String\n  creditBalanceId String\n  operationType   OperationType\n  creditsUsed     Int\n  details         Json?\n  timestamp       DateTime      @default(now())\n\n  user          User          @relation(fields: [userId], references: [id])\n  creditBalance CreditBalance @relation(fields: [creditBalanceId], references: [id])\n}\n\nenum OperationType {\n  AI_TEXT_CHAT\n  AI_IMAGE_GENERATION\n}\n\nmodel AdminSettings {\n  id           String   @id @default(\"singleton\")\n  featureCosts Json?\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n}\n\nmodel Plan {\n  id        String   @id @default(cuid())\n  clerkId   String?  @unique // Clerk plan ID (e.g., cplan_*)\n  clerkName String?\n  name      String\n  credits   Int\n  active    Boolean  @default(true)\n  sortOrder Int      @default(0)\n  currency           String?\n  priceMonthlyCents  Int?\n  priceYearlyCents   Int?\n  description        String?  @db.Text\n  features           Json?\n  badge              String?\n  highlight          Boolean  @default(false)\n  ctaType            String?  @default(\"checkout\")\n  ctaLabel           String?\n  ctaUrl             String?\n  billingSource      String   @default(\"clerk\")\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel StorageObject {\n  id           String   @id @default(cuid())\n  userId       String\n  clerkUserId  String\n  provider     String   @default(\"vercel_blob\")\n  url          String\n  pathname     String\n  name         String\n  contentType  String?\n  size         Int\n  deletedAt    DateTime?\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  user         User     @relation(fields: [userId], references: [id])\n}\n\nmodel SubscriptionEvent {\n  id           String   @id @default(cuid())\n  userId       String?\n  clerkUserId  String\n  planKey      String?\n  status       String\n  eventType    String\n  occurredAt   DateTime @default(now())\n  metadata     Json?\n  createdAt    DateTime @default(now())\n\n  user         User?    @relation(fields: [userId], references: [id])\n}\n```\n\nNotes:\n- Plan credits are keyed by Clerk plan IDs (`cplan_*`) stored in the `Plan.clerkId` field.\n- Feature costs are sourced from `AdminSettings.featureCosts` with defaults in `src/lib/credits/feature-config.ts`.\n- Usage history stores a negative `creditsUsed` entry on refunds.\n\n---\n\n## Database Setup\n\n### Local Development\n\n1. Install PostgreSQL:\n```bash\n# macOS\nbrew install postgresql\nbrew services start postgresql\n\n# Ubuntu\nsudo apt install postgresql postgresql-contrib\nsudo systemctl start postgresql\n```\n\n2. Create database:\n```sql\nCREATE DATABASE saas_template;\nCREATE USER saas_user WITH ENCRYPTED PASSWORD 'your_password';\nGRANT ALL PRIVILEGES ON DATABASE saas_template TO saas_user;\n```\n\n3. Configure environment:\n```env\nDATABASE_URL=\"postgresql://saas_user:your_password@localhost:5432/saas_template\"\n```\n\n4. Run migrations:\n```bash\nnpm run db:push\n# or\nnpm run db:migrate\n```\n\n## Schema Overview\n\n### Core Models\n\n#### User Model\nCentral user entity linked to Clerk authentication.\n\n```prisma\nmodel User {\n  id        String   @id @default(cuid())\n  clerkId   String   @unique\n  email     String?  @unique\n  name      String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  \n  // Relationships\n  apiKeys             ApiKey[]\n  // relations to other entities as needed\n  creditBalance       CreditBalance?\n  usageHistory        UsageHistory[]\n  auditLogs           AuditLog[]\n  preferences         UserPreferences?\n}\n```\n\n#### Project/Task/Team/Agent Models\nNot included in this template.\n\n### Team and AI Agent Models\n\n#### Feature Model\nHolds feature metadata used by the app.\n\n```prisma\nmodel Feature {\n  id          String   @id @default(cuid())\n  name        String\n  description String?\n  tags        String[]\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n}\n```\n\n#### Team Models\nRemoved in this edition.\n\n### Credit System Models\n\n#### Credit Balance and Usage\n```prisma\nmodel CreditBalance {\n  id                String   @id @default(cuid())\n  userId            String   @unique\n  clerkUserId       String   @unique\n  creditsRemaining  Int      @default(100)\n  lastSyncedAt      DateTime @default(now())\n  \n  user              User     @relation(fields: [userId], references: [id])\n  usageHistory      UsageHistory[]\n  \n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n}\n\nmodel UsageHistory {\n  id              String        @id @default(cuid())\n  userId          String\n  creditBalanceId String\n  operationType   OperationType\n  creditsUsed     Int\n  details         Json?\n  timestamp       DateTime      @default(now())\n  \n  user            User          @relation(fields: [userId], references: [id])\n  creditBalance   CreditBalance @relation(fields: [creditBalanceId], references: [id])\n}\n\nenum OperationType {\n  PROJECT_CREATION\n  PRD_GENERATION\n  SCHEMA_GENERATION\n  FLOWCHART_GENERATION\n  TASK_GENERATION\n  PLAN_GENERATION\n  ADMIN_ADJUSTMENT\n  WORKSPACE_BLUEPRINT\n  FEATURE_SEGMENTATION\n  AI_TEXT_CHAT\n  AI_IMAGE_GENERATION\n}\n```\n\n## Database Operations\n\n### Connection Management\n\n```typescript\n// lib/db.ts\nimport { PrismaClient } from '../../prisma/generated/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? new PrismaClient({\n  log: process.env.NODE_ENV === 'development' ? ['query'] : ['error'],\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  globalForPrisma.prisma = db;\n}\n```\n\n### Common Query Patterns\n\n#### User Operations\n```typescript\n// Create user (typically via webhook)\nasync function createUser(clerkId: string, email: string, name?: string) {\n  return db.user.create({\n    data: {\n      clerkId,\n      email,\n      name,\n      creditBalance: {\n        create: {\n          clerkUserId: clerkId,\n          creditsRemaining: 100,\n        }\n      }\n    },\n    include: {\n      creditBalance: true,\n    }\n  });\n}\n\n// Get user with related data\nasync function getUserWithData(clerkId: string) {\n  return db.user.findUnique({\n    where: { clerkId },\n    include: {\n      creditBalance: true,\n      preferences: true,\n    },\n  });\n}\n```\n\n// (Projects/Phases/Tasks are not part of this template)\n\n// (Task assignment is not part of this template)\n\n### Credit System Operations\n\n```typescript\n// Deduct credits for operation\nasync function deductCredits(\n  userId: string,\n  creditsUsed: number,\n  operationType: OperationType,\n  details?: any\n) {\n  return db.$transaction(async (tx) => {\n    // Get current balance\n    const balance = await tx.creditBalance.findUnique({\n      where: { userId },\n    });\n\n    if (!balance || balance.creditsRemaining < creditsUsed) {\n      throw new Error('Insufficient credits');\n    }\n\n    // Update balance\n    const updatedBalance = await tx.creditBalance.update({\n      where: { userId },\n      data: {\n        creditsRemaining: balance.creditsRemaining - creditsUsed,\n        lastSyncedAt: new Date(),\n      },\n    });\n\n    // Record usage\n    await tx.usageHistory.create({\n      data: {\n        userId,\n        creditBalanceId: balance.id,\n        creditsUsed,\n        operationType,\n        projectId,\n        details,\n      },\n    });\n\n    return updatedBalance;\n  });\n}\n\n// Get usage analytics\nasync function getUserUsageAnalytics(userId: string, days = 30) {\n  const since = new Date();\n  since.setDate(since.getDate() - days);\n\n  return db.usageHistory.groupBy({\n    by: ['operationType'],\n    where: {\n      userId,\n      timestamp: { gte: since },\n    },\n    _sum: {\n      creditsUsed: true,\n    },\n    _count: {\n      id: true,\n    },\n  });\n}\n```\n\n## Migration Patterns\n\n### Schema Changes\n\n```bash\n# Generate migration after schema changes\nnpx prisma migrate dev --name add_user_preferences\n\n# Apply migrations in production\nnpx prisma migrate deploy\n\n# Reset database (development only)\nnpx prisma migrate reset\n```\n\n### Data Migrations\n\n```typescript\n// migrations/001_backfill_user_preferences.ts\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  const users = await prisma.user.findMany({\n    where: {\n      preferences: null,\n    },\n  });\n\n  for (const user of users) {\n    await prisma.userPreferences.create({\n      data: {\n        userId: user.id,\n        lastWorkspaceId: null,\n      },\n    });\n  }\n\n  console.log(`Updated ${users.length} users`);\n}\n\nmain()\n  .catch(console.error)\n  .finally(() => prisma.$disconnect());\n```\n\n## Performance Optimization\n\n### Indexing Strategy\n\n```prisma\n// Add indexes in schema\nmodel User {\n  // ... fields\n  \n  @@index([clerkId])\n  @@index([email])\n  @@index([createdAt])\n}\n\nmodel Project {\n  // ... fields\n  \n  @@index([workspaceId])\n  @@index([userId])\n  @@index([status])\n  @@index([updatedAt])\n}\n\nmodel Task {\n  // ... fields\n  \n  @@index([phaseId])\n  @@index([status])\n  @@index([currentUserId])\n  @@index([currentAgentId])\n}\n```\n\n### Query Optimization\n\n```typescript\n// Use select to limit fields\nconst users = await db.user.findMany({\n  select: { id: true, name: true, email: true, createdAt: true },\n});\n\n// Paginate through AI agents\nasync function getPaginatedAgents(userId: string, cursor?: string, take = 20) {\n  return db.aIAgent.findMany({\n    where: { userId },\n    take,\n    ...(cursor && { cursor: { id: cursor }, skip: 1 }),\n    orderBy: { createdAt: 'desc' },\n    select: { id: true, name: true, workspaceId: true, createdAt: true },\n  });\n}\n```\n\n### Connection Pooling\n\n```typescript\n// lib/db.ts with connection pooling\nexport const db = new PrismaClient({\n  datasources: {\n    db: {\n      url: process.env.DATABASE_URL,\n    },\n  },\n  // Connection pool settings\n  log: ['warn', 'error'],\n});\n\n// Graceful shutdown\nprocess.on('beforeExit', () => {\n  db.$disconnect();\n});\n```\n\n## Backup and Recovery\n\n### Automated Backups\n\n```bash\n# Create backup script\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"backup_${DATE}.sql\"\n\npg_dump $DATABASE_URL > $BACKUP_FILE\naws s3 cp $BACKUP_FILE s3://your-backup-bucket/\n\n# Cleanup old backups (keep last 7 days)\nfind . -name \"backup_*.sql\" -mtime +7 -delete\n```\n\n### Point-in-time Recovery\n\n```bash\n# Restore from backup\npsql $DATABASE_URL < backup_20240315_120000.sql\n\n# Reset migrations (if needed)\nnpx prisma migrate reset --force\nnpx prisma db push\n```\n\n## Monitoring\n\n### Query Performance\n\n```typescript\n// Enable query logging\nconst db = new PrismaClient({\n  log: [\n    {\n      emit: 'event',\n      level: 'query',\n    },\n  ],\n});\n\ndb.$on('query', (e) => {\n  if (e.duration > 1000) { // Log slow queries (>1s)\n    console.log('Slow query detected:', {\n      query: e.query,\n      params: e.params,\n      duration: e.duration,\n    });\n  }\n});\n```\n\n### Health Checks\n\n```typescript\n// Database health check\nexport async function checkDatabaseHealth() {\n  try {\n    await db.$queryRaw`SELECT 1`;\n    return { status: 'healthy', timestamp: new Date() };\n  } catch (error) {\n    return { \n      status: 'unhealthy', \n      error: error.message, \n      timestamp: new Date() \n    };\n  }\n}\n```\n\n## Security Considerations\n\nEnsure inputs are validated with Zod where applicable and sensitive data is never exposed in responses. Apply owner checks on user-scoped entities.\n","size_bytes":12696},"docs/dev-webhooks.md":{"content":"# Local Clerk Webhooks\n\nUse a public tunnel to deliver Clerk webhooks to your local Next.js dev server.\n\n## Prerequisites\n- Vercel CLI: `npm i -g vercel`\n- Logged in and linked: `vercel login` → `vercel link`\n- Running dev server: `npm run dev`\n\n## Option A: Vercel Dev Tunnel (if available)\n- Some Vercel CLI versions expose a tunnel flag. If your CLI supports it:\n  - Run: `npm run dev:tunnel`\n  - It starts a public HTTPS URL for your local dev server.\n- If you get \"unknown or unexpected option: --tunnel\", use Option B or C below.\n\n## Option B: Cloudflare Tunnel (recommended fallback)\n1. Install: `brew install cloudflared`\n2. Start your app: `npm run dev`\n3. Start tunnel: `npm run tunnel:cf`\n   - Copies a URL like `https://<hash>.cfargotunnel.com`\n\n## Option C: ngrok (quickest fallback)\n1. Start your app: `npm run dev`\n2. Start tunnel: `npm run tunnel:ngrok`\n   - Copies a URL like `https://<subdomain>.ngrok.io`\n\n## Configure Clerk Webhook\n1. In Clerk Dashboard → Webhooks → Add endpoint\n   - URL: `https://<your-public-url>/api/webhooks/clerk`\n2. Copy the “Signing secret” from that endpoint and set it locally:\n   - Add to `.env.local`: `CLERK_WEBHOOK_SECRET=whsec_...`\n3. Restart dev server if needed.\n\n## Verify\n- Use Clerk’s “Send test event” or perform actions (create/update user, subscription change).\n- The route is implemented at `src/app/api/webhooks/clerk/route.ts` and verifies Svix headers.\n\n## Tips\n- Keep one endpoint per developer so each has their own signing secret.\n- If you see `no svix headers`, ensure Clerk points to the tunnel URL, not `http://localhost:3000`.\n- If signature verification fails, re-copy the exact secret for the endpoint you used.\n- Do not commit `.env.local` or secrets. `.vercel` is already gitignored.\n","size_bytes":1775},"docs/development-guidelines.md":{"content":"# Development Guidelines\n\n## Code Standards\n\n### TypeScript Configuration\n\n#### Type Safety Rules\n- Use TypeScript for all new code\n- Avoid `any` type - prefer `unknown` or specific types\n- Use strict null checks\n- Define interfaces for all data structures\n- Use generics for reusable components\n\n```tsx\n// ✅ Good\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n}\n\nfunction getUser(id: string): Promise<User | null> {\n  return fetchUser(id);\n}\n\n// ❌ Bad\nfunction getUser(id: any): any {\n  return fetchUser(id);\n}\n```\n\n#### Type Definitions\n\n```tsx\n// types/api.ts\nexport interface ApiResponse<T> {\n  data: T;\n  success: boolean;\n  error?: string;\n}\n\nexport interface PaginatedResponse<T> extends ApiResponse<T[]> {\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n  };\n}\n\n// Usage\nconst response: ApiResponse<User> = await fetchUser(id);\n```\n\n### File Naming Conventions\n\n```\n// Components (PascalCase)\nButton.tsx\nUserProfile.tsx\nDashboardLayout.tsx\n\n// Pages (lowercase with hyphens)\nsign-in/page.tsx\nuser-profile/page.tsx\n\n// Utilities (camelCase)\nauthUtils.ts\ndateHelpers.ts\napiClient.ts\n\n// Types (camelCase)\napiTypes.ts\nuserTypes.ts\n\n// Constants (UPPER_SNAKE_CASE)\nAPI_ROUTES.ts\nAPP_CONFIG.ts\n```\n\n### Import Organization\n\n```tsx\n// 1. Node modules\nimport React from 'react';\nimport { NextResponse } from 'next/server';\n\n// 2. Internal packages/utilities\nimport { cn } from '@/lib/utils';\nimport { db } from '@/lib/db';\n\n// 3. Contexts and Hooks\nimport { usePageConfig } from '@/hooks/use-page-config';\nimport { usePageMetadata } from '@/contexts/page-metadata';\n\n// 4. Components\nimport { Button } from '@/components/ui/button';\nimport { UserMenu } from '@/components/app/user-menu';\n\n// 5. Types\nimport type { User } from '@/types/user';\n\n// 6. Relative imports\nimport './styles.css';\n```\n\n## Component Guidelines\n\n### Page Components and Metadata\n\nAll protected pages should use the Page Metadata System for consistent headers and breadcrumbs:\n\n```tsx\n\"use client\";\n\nimport { usePageConfig } from \"@/hooks/use-page-config\";\n\nexport default function MyPage() {\n  // Simple usage\n  usePageConfig(\"Page Title\", \"Page description\");\n  \n  // With custom breadcrumbs\n  usePageConfig(\"Title\", \"Description\", [\n    { label: \"Home\", href: \"/dashboard\" },\n    { label: \"Current Page\" }\n  ]);\n  \n  // Full control\n  usePageConfig({\n    title: \"Dynamic Title\",\n    description: \"Dynamic description\",\n    breadcrumbs: [...],\n    showBreadcrumbs: true\n  });\n  \n  return <YourContent />;\n}\n```\n\n**Important:** Never manually add breadcrumbs or page headers in protected pages. The layout handles this automatically through the PageMetadata context.\n\n### Component Structure\n\n```tsx\n// 1. Imports (organized as above)\nimport React from 'react';\nimport { cn } from '@/lib/utils';\n\n// 2. Types/Interfaces\ninterface ComponentProps {\n  title: string;\n  children?: React.ReactNode;\n  className?: string;\n}\n\n// 3. Component definition\nexport function Component({ title, children, className }: ComponentProps) {\n  // 4. Hooks (top of component)\n  const [state, setState] = useState();\n  const { data } = useQuery();\n  \n  // 5. Computed values\n  const computedValue = useMemo(() => {}, []);\n  \n  // 6. Event handlers\n  const handleClick = useCallback(() => {}, []);\n  \n  // 7. Effects\n  useEffect(() => {}, []);\n  \n  // 8. Render\n  return (\n    <div className={cn('base-styles', className)}>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n}\n```\n\n### Prop Guidelines\n\n```tsx\n// ✅ Good - Specific prop types\ninterface ButtonProps {\n  variant: 'primary' | 'secondary' | 'destructive';\n  size: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n  children: React.ReactNode;\n  onClick?: () => void;\n}\n\n// ❌ Bad - Too generic\ninterface ButtonProps {\n  [key: string]: any;\n}\n```\n\n### State Management Patterns\n\n## Data Access (Important)\n\n- Never import the Prisma client (`@/lib/db`) or query the database directly from Client Components or any client-side code.\n- Server Components must NOT query Prisma directly. Instead, call functions from the query layer under `src/lib/queries/*`.\n  - Keep DB access centralized for reuse and consistency. Add a new file under `src/lib/queries/` per domain (e.g., `plans.ts`).\n- API routes under `src/app/api/*` and Server Actions may use Prisma directly or reuse `src/lib/queries/*` functions.\n- Client components must receive data via props from a Server Component, or use custom hooks built on TanStack Query that call API routes through `@/lib/api-client`.\n\n```tsx\n// Local state\nconst [isOpen, setIsOpen] = useState(false);\n\n// Complex local state\nconst [state, setState] = useReducer(reducer, initialState);\n\n// Server state\nconst { data, isLoading, error } = useQuery({\n  queryKey: ['users'],\n  queryFn: fetchUsers,\n});\n\n// Form state\nconst form = useForm<FormData>({\n  resolver: zodResolver(schema),\n  defaultValues: {},\n});\n```\n\n## API Development Guidelines\n\n### Route Structure\n\n```ts\n// app/api/users/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { z } from 'zod';\n\n// 1. Schema definitions\nconst createUserSchema = z.object({\n  name: z.string().min(1),\n  email: z.string().email(),\n});\n\n// 2. Route handlers\nexport async function POST(request: NextRequest) {\n  try {\n    // 3. Authentication\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json(\n        { error: 'Unauthorized' }, \n        { status: 401 }\n      );\n    }\n\n    // 4. Input validation\n    const body = await request.json();\n    const validatedData = createUserSchema.parse(body);\n\n    // 5. Business logic\n    const result = await createUser(validatedData);\n\n    // 6. Response\n    return NextResponse.json(result, { status: 201 });\n  } catch (error) {\n    return handleApiError(error);\n  }\n}\n```\n\n### Error Handling\n\n```ts\n// lib/api-errors.ts\nexport class ApiError extends Error {\n  constructor(\n    message: string,\n    public statusCode: number = 500,\n    public code?: string\n  ) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\nexport function handleApiError(error: unknown) {\n  if (error instanceof ApiError) {\n    return NextResponse.json(\n      { \n        error: error.message, \n        code: error.code,\n        success: false \n      },\n      { status: error.statusCode }\n    );\n  }\n\n  if (error instanceof z.ZodError) {\n    return NextResponse.json(\n      {\n        error: 'Validation failed',\n        issues: error.issues,\n        success: false\n      },\n      { status: 400 }\n    );\n  }\n\n  console.error('Unexpected error:', error);\n  return NextResponse.json(\n    { error: 'Internal server error', success: false },\n    { status: 500 }\n  );\n}\n```\n\n## Database Guidelines\n\n### Query Patterns\n\n```ts\n// ✅ Good - Specific selects\nconst users = await db.user.findMany({\n  select: {\n    id: true,\n    name: true,\n    email: true,\n  },\n  where: {\n    active: true,\n  },\n  orderBy: {\n    createdAt: 'desc',\n  },\n});\n\n// ✅ Good - Include related data\nconst user = await db.user.findUnique({\n  where: { id: userId },\n  include: {\n    // Removed projects in this edition\n    creditBalance: true,\n  },\n});\n\n// ❌ Bad - Select all fields unnecessarily\nconst users = await db.user.findMany();\n```\n\n### Transaction Guidelines\n\n```ts\n// Use transactions for related operations\nconst result = await db.$transaction(async (tx) => {\n  const user = await tx.user.create({\n    data: { name: 'John', email: 'john@example.com' },\n  });\n\n  await tx.creditBalance.create({\n    data: {\n      userId: user.id,\n      creditsRemaining: 100,\n    },\n  });\n\n  return user;\n});\n```\n\n## Security Guidelines\n\n### Input Validation\n\n```ts\n// Always validate input with Zod\nconst schema = z.object({\n  email: z.string().email(),\n  age: z.number().int().min(18).max(120),\n  preferences: z.object({\n    theme: z.enum(['light', 'dark']),\n    notifications: z.boolean(),\n  }).optional(),\n});\n\n// Sanitize string inputs\nconst sanitizedInput = input.trim().toLowerCase();\n```\n\n### Authentication Patterns\n\n```ts\n// API route authentication\nexport async function GET() {\n  const { userId } = await auth();\n  if (!userId) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  const user = await getUserFromClerkId(userId);\n  // ... rest of logic\n}\n\n// Resource ownership verification\nexport async function PUT(request: Request) {\n  const { userId } = await auth();\n  if (!userId) return unauthorized();\n\n  // Verify resource ownership as needed\n  // ... update logic\n}\n```\n\n### Data Protection\n\n```ts\n// Never expose sensitive data\nconst publicUserData = {\n  id: user.id,\n  name: user.name,\n  email: user.email,\n  // Don't include: clerkId, internalId, etc.\n};\n\n// Use environment variables for secrets\nconst apiKey = process.env.EXTERNAL_API_KEY;\nif (!apiKey) {\n  throw new Error('Missing required API key');\n}\n```\n\n## Testing Guidelines\n\n### Unit Testing\n\n```tsx\n// Component tests\ndescribe('Button', () => {\n  it('renders with correct text', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByText('Click me')).toBeInTheDocument();\n  });\n\n  it('calls onClick when clicked', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    \n    fireEvent.click(screen.getByRole('button'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n});\n```\n\n### API Testing\n\n```ts\n// API route tests\ndescribe('/api/users', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('creates user successfully', async () => {\n    mockAuth({ userId: 'user_123' });\n    mockDb.user.create.mockResolvedValue(mockUser);\n\n    const response = await POST(mockRequest);\n    const data = await response.json();\n\n    expect(response.status).toBe(201);\n    expect(data.name).toBe('Test User');\n  });\n\n  it('returns 401 when unauthorized', async () => {\n    mockAuth({ userId: null });\n\n    const response = await POST(mockRequest);\n    \n    expect(response.status).toBe(401);\n  });\n});\n```\n\n### Integration Testing\n\n```tsx\n// E2E-style integration tests\ndescribe('User Dashboard', () => {\n  it('displays user data after loading', async () => {\n    mockApiResponse('/api/users/me', mockUserData);\n    mockApiResponse('/api/credits/me', mockCreditsData);\n\n    render(<Dashboard />);\n\n    await waitFor(() => {\n      expect(screen.getByText('Welcome, John')).toBeInTheDocument();\n      expect(screen.getByText('100 credits')).toBeInTheDocument();\n    });\n  });\n});\n```\n\n## Performance Guidelines\n\n### React Optimization\n\n```tsx\n// Use React.memo for expensive components\nexport const ExpensiveComponent = React.memo(({ data }) => {\n  const processedData = useMemo(() => \n    expensiveCalculation(data), \n    [data]\n  );\n\n  return <div>{processedData}</div>;\n});\n\n// Use useCallback for event handlers\nconst Button = ({ onClick, children }) => {\n  const handleClick = useCallback((e) => {\n    e.preventDefault();\n    onClick?.(e);\n  }, [onClick]);\n\n  return <button onClick={handleClick}>{children}</button>;\n};\n```\n\n### Database Optimization\n\n```ts\n// Use pagination for large datasets\nconst getUsers = async (page = 1, limit = 20) => {\n  return db.user.findMany({\n    skip: (page - 1) * limit,\n    take: limit,\n    orderBy: { createdAt: 'desc' },\n  });\n};\n\n// Use cursor-based pagination for better performance\nconst getUsersWithCursor = async (cursor?: string, limit = 20) => {\n  return db.user.findMany({\n    take: limit,\n    ...(cursor && { cursor: { id: cursor } }),\n    orderBy: { id: 'asc' },\n  });\n};\n```\n\n### Bundle Optimization\n\n```tsx\n// Use dynamic imports for heavy components\nconst HeavyChart = dynamic(() => import('./HeavyChart'), {\n  loading: () => <ChartSkeleton />,\n  ssr: false,\n});\n\n// Use React.lazy for code splitting\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<Loading />}>\n      <LazyComponent />\n    </Suspense>\n  );\n}\n```\n\n## Error Handling\n\n### Error Boundaries\n\n```tsx\n// app/error.tsx\n'use client';\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string };\n  reset: () => void;\n}) {\n  useEffect(() => {\n    console.error('Application error:', error);\n  }, [error]);\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center\">\n      <h2>Something went wrong!</h2>\n      <button onClick={reset}>Try again</button>\n    </div>\n  );\n}\n```\n\n### Loading States\n\n```tsx\n// app/loading.tsx\nexport default function Loading() {\n  return (\n    <div className=\"flex min-h-screen items-center justify-center\">\n      <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\" />\n    </div>\n  );\n}\n```\n\n### Not Found Pages\n\n```tsx\n// app/not-found.tsx\nexport default function NotFound() {\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center\">\n      <h2>Page Not Found</h2>\n      <p>Could not find the requested resource</p>\n      <Link href=\"/\">Return Home</Link>\n    </div>\n  );\n}\n```\n\n## Git Workflow\n\n### Commit Messages\n\n```\nfeat: add user authentication\nfix: resolve database connection issue\ndocs: update API documentation\nstyle: fix linting errors\nrefactor: extract user service logic\ntest: add unit tests for Button component\nchore: update dependencies\n```\n\n### Branch Naming\n\n```\nfeature/user-authentication\nfix/database-connection\nhotfix/security-vulnerability\nrelease/v1.2.0\n```\n\n### Pull Request Template\n\n```markdown\n## Description\nBrief description of changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests pass\n- [ ] Integration tests pass\n- [ ] Manual testing completed\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] No console.log statements\n```\n\n## Code Review Guidelines\n\n### What to Look For\n\n1. **Functionality**: Does the code work as intended?\n2. **Security**: Are there any security vulnerabilities?\n3. **Performance**: Are there any performance issues?\n4. **Readability**: Is the code easy to understand?\n5. **Testing**: Are there adequate tests?\n6. **Documentation**: Is the code properly documented?\n\n### Review Comments\n\n```\n// ✅ Good feedback\n\"Consider using useMemo here to avoid recalculating on every render\"\n\"This could be extracted into a custom hook for better reusability\"\n\n// ❌ Poor feedback\n\"This is wrong\"\n\"Fix this\"\n```\n\n## Environment Management\n\n### Environment Variables\n\n```env\n# Required for all environments\nDATABASE_URL=\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=\nCLERK_SECRET_KEY=\n\n# Development only\nNEXT_PUBLIC_APP_URL=http://localhost:3000\n\n# Production only\nNEXT_PUBLIC_APP_URL=https://your-domain.com\n```\n\n### Configuration Management\n\n```ts\n// lib/config.ts\nconst config = {\n  app: {\n    name: process.env.NEXT_PUBLIC_APP_NAME || 'SaaS Template',\n    url: process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000',\n  },\n  db: {\n    url: process.env.DATABASE_URL!,\n  },\n  clerk: {\n    publishableKey: process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY!,\n    secretKey: process.env.CLERK_SECRET_KEY!,\n  },\n};\n\n// Validate required env vars\nif (!config.db.url) {\n  throw new Error('DATABASE_URL is required');\n}\n\nexport default config;\n```\n","size_bytes":15256},"docs/frontend.md":{"content":"# Frontend Documentation\n\n## Overview\n\nThe frontend is built with Next.js 15 App Router, React 19, and TypeScript, providing a modern, performant, and type-safe development experience.\n\n## Core Technologies\n\n- **Next.js 15.3.5**: Framework with App Router\n- **React 19**: UI library\n- **TypeScript**: Type safety\n- **Tailwind CSS v4**: Utility-first styling\n- **Radix UI**: Headless component primitives\n- **TanStack Query (React Query)**: Server state management\n- **React Hook Form**: Form handling\n- **Zod**: Schema validation\n\n## Component Architecture\n\n### Component Types\n\n#### Server Components (Default)\n```tsx\n// app/(protected)/dashboard/page.tsx\nexport default async function DashboardPage() {\n  // Can directly fetch data\n  const data = await fetchDashboardData();\n  \n  return (\n    <div>\n      <DashboardContent data={data} />\n    </div>\n  );\n}\n```\n\n#### Client Components with Page Metadata\n```tsx\n\"use client\";\n\nimport { usePageConfig } from \"@/hooks/use-page-config\";\n\n// app/(protected)/dashboard/page.tsx\nexport default function DashboardPage() {\n  const { user } = useUser();\n  \n  // Configure page metadata - handled automatically by layout\n  usePageConfig(\n    `Welcome, ${user?.firstName}!`,\n    \"Here's your account overview\"\n  );\n  \n  return <DashboardContent />;\n}\n```\n\n#### Interactive Components\n```tsx\n\"use client\";\n\n// components/interactive-feature.tsx\nexport function InteractiveFeature() {\n  const [state, setState] = useState();\n  \n  return (\n    <div onClick={() => setState(...)}>\n      {/* Interactive content */}\n    </div>\n  );\n}\n```\n\n### Component Organization\n\n```\ncomponents/\n├── ui/                 # Base UI components\n│   ├── button.tsx     # Radix + Tailwind\n│   ├── dialog.tsx\n│   ├── form.tsx\n│   └── input.tsx\n├── app/               # Application components\n│   ├── sidebar.tsx    # Navigation sidebar\n│   ├── topbar.tsx     # Top navigation\n│   ├── page-header.tsx # Automatic page headers\n│   └── user-menu.tsx  # User dropdown\n├── features/          # Feature-specific\n│   ├── credits/       # Credit system\n│   └── billing/       # Billing components\n└── providers/         # Context providers\n    └── query-provider.tsx\n\ncontexts/\n└── page-metadata.tsx  # Page metadata context\n\nhooks/\n├── admin/             # Admin-specific hooks\n│   ├── use-admin-credits.ts\n│   ├── use-admin-users.ts\n│   └── use-admin-invitations.ts\n├── use-page-config.ts # Page metadata helper\n├── use-credits.ts     # Credits hook\n├── use-subscription.ts # Subscription status\n├── use-dashboard.ts   # Dashboard data\n└── use-storage.ts     # Storage management\n```\n\n## Styling System\n\n### Design Tokens\n\nThe application uses CSS variables for theming:\n\n```css\n/* globals.css */\n:root {\n  --background: 0 0% 100%;\n  --foreground: 240 10% 3.9%;\n  --card: 0 0% 100%;\n  --primary: 240 5.9% 10%;\n  --secondary: 240 4.8% 95.9%;\n  --accent: 240 4.8% 95.9%;\n  --destructive: 0 84.2% 60.2%;\n  --border: 240 5.9% 90%;\n  --ring: 240 10% 3.9%;\n}\n\n.dark {\n  --background: 240 10% 3.9%;\n  --foreground: 0 0% 98%;\n  /* ... dark theme values */\n}\n```\n\n### Glass Morphism Effects\n\n```css\n.glass-panel {\n  backdrop-filter: blur(16px);\n  background: rgba(var(--card), 0.3);\n  border: 1px solid rgba(var(--border), 0.4);\n}\n```\n\n### Tailwind Configuration\n\n```ts\n// tailwind.config.ts\nexport default {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  theme: {\n    extend: {\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        // ... mapped CSS variables\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n};\n```\n\n## State Management\n\n### Local State\n\n```tsx\n// Component state\nconst [isOpen, setIsOpen] = useState(false);\n\n// Complex local state with useReducer\nconst [state, dispatch] = useReducer(reducer, initialState);\n```\n\n### Server State with TanStack Query\n\n```tsx\n// lib/api-client.ts - Centralized HTTP client\nimport { api } from '@/lib/api-client';\n\nexport async function apiClient<T = any>(\n  url: string,\n  options: RequestInit = {}\n): Promise<T> {\n  const response = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    let errorMessage: string;\n\n    try {\n      const errorJson = JSON.parse(errorText);\n      errorMessage = errorJson.message || errorJson.error || `HTTP ${response.status}`;\n    } catch {\n      errorMessage = errorText || `HTTP ${response.status}`;\n    }\n\n    throw new ApiError(errorMessage, response.status, response);\n  }\n\n  return response.json();\n}\n\n## Data Fetching\n\n- Prefer Server Components for initial data loading.\n- Use TanStack Query for client-side fetches and cache management.\n- All HTTP requests must go through `@/lib/api-client`.\n- Never import or use `@/lib/db` (Prisma) from Client Components or any client-side code. Query on the server (Server Components, API routes, or Server Actions) and pass data to clients via props or custom hooks that call APIs.\n\n// API convenience methods\nexport const api = {\n  get: <T = any>(url: string, options?: RequestInit) =>\n    apiClient<T>(url, { ...options, method: 'GET' }),\n  post: <T = any>(url: string, data?: any, options?: RequestInit) =>\n    apiClient<T>(url, {\n      ...options,\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n    }),\n  // ... put, patch, delete methods\n};\n```\n\n```tsx\n// hooks/use-credits.ts - Query hook with API client\nimport { api } from '@/lib/api-client';\n\nexport function useCredits() {\n  return useQuery({\n    queryKey: ['credits'],\n    queryFn: () => api.get('/api/credits/me'),\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n  });\n}\n\n// Usage in component\nfunction CreditDisplay() {\n  const { data, isLoading, error } = useCredits();\n\n  if (isLoading) return <Skeleton />;\n  if (error) return <Error message={error.message} />;\n\n  return <div>{data.creditsRemaining} credits</div>;\n}\n```\n\n### Mutation Hooks\n\n```tsx\n// hooks/use-admin-users.ts - Mutation with optimistic updates\nexport function useUpdateUserCredits() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: ({ userId, credits }: { userId: string; credits: number }) =>\n      api.put(`/api/admin/users/${userId}/credits`, { credits }),\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Credits updated\",\n        description: `New balance: ${variables.credits}`\n      });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error updating credits\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    },\n  });\n}\n```\n\n### Form State\n\n```tsx\n// Using React Hook Form with Zod\nconst formSchema = z.object({\n  email: z.string().email(),\n  name: z.string().min(2),\n});\n\nfunction ProfileForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: '',\n      name: '',\n    },\n  });\n  \n  const onSubmit = async (data: z.infer<typeof formSchema>) => {\n    // Handle submission\n  };\n  \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </form>\n    </Form>\n  );\n}\n```\n\n## Routing\n\n### File-based Routing\n\n```\napp/\n├── (public)/\n│   ├── page.tsx           # /\n│   ├── sign-in/\n│   │   └── [[...sign-in]]/\n│   │       └── page.tsx   # /sign-in\n│   └── layout.tsx         # Public layout\n├── (protected)/\n│   ├── dashboard/\n│   │   └── page.tsx       # /dashboard\n│   ├── billing/\n│   │   └── page.tsx       # /billing\n│   ├── profile/\n│   │   └── [[...rest]]/\n│   │       └── page.tsx   # /profile\n│   └── layout.tsx         # Protected layout (with PageMetadata)\n└── layout.tsx             # Root layout\n```\n\n### Page Metadata in Protected Routes\n\nAll protected routes automatically get breadcrumbs and headers through the PageMetadata system:\n\n```tsx\n// app/(protected)/billing/page.tsx\n\"use client\";\n\nimport { usePageConfig } from \"@/hooks/use-page-config\";\n\nexport default function BillingPage() {\n  usePageConfig({\n    title: \"Billing & Subscription\",\n    description: \"Manage your credits and plan\",\n    breadcrumbs: [\n      { label: \"Home\", href: \"/dashboard\" },\n      { label: \"Billing\" }\n    ]\n  });\n  \n  return <BillingContent />;\n}\n```\n\nThe layout automatically renders:\n- Breadcrumb navigation\n- Page title (h1)\n- Page description\n- All managed centrally through context\n\n### Navigation\n\n```tsx\n// Programmatic navigation\nimport { useRouter } from 'next/navigation';\n\nfunction Component() {\n  const router = useRouter();\n  \n  const handleClick = () => {\n    router.push('/dashboard');\n  };\n  \n  return <button onClick={handleClick}>Go to Dashboard</button>;\n}\n\n// Link component\nimport Link from 'next/link';\n\n<Link href=\"/dashboard\">Dashboard</Link>\n```\n\n## Data Fetching\n\n### Server Components\n\n```tsx\n// Direct database access\nasync function Page() {\n  const data = await db.user.findMany();\n  return <UserList users={data} />;\n}\n```\n\n### Client Components with TanStack Query\n\n```tsx\n// Use custom hooks - NEVER direct fetch in components\nimport { useAdminUsers } from '@/hooks/admin/use-admin-users';\n\nfunction UsersList() {\n  const { data, isLoading, error } = useAdminUsers({\n    page: 1,\n    pageSize: 50,\n    includeUsageCount: true\n  });\n\n  if (isLoading) return <UserListSkeleton />;\n  if (error) return <ErrorAlert message={error.message} />;\n\n  return (\n    <div>\n      {data.users.map(user => (\n        <UserCard key={user.id} user={user} />\n      ))}\n    </div>\n  );\n}\n```\n\n### Data Mutations\n\n```tsx\n// Using custom mutation hooks\nimport { useUpdateUserCredits } from '@/hooks/admin/use-admin-users';\n\nfunction UserCreditForm({ userId }: { userId: string }) {\n  const updateCredits = useUpdateUserCredits();\n\n  const handleSubmit = (credits: number) => {\n    updateCredits.mutate({ userId, credits });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"number\" name=\"credits\" />\n      <button\n        type=\"submit\"\n        disabled={updateCredits.isPending}\n      >\n        {updateCredits.isPending ? 'Updating...' : 'Update Credits'}\n      </button>\n    </form>\n  );\n}\n```\n\n### Query Key Patterns\n\n```tsx\n// Structured query keys for easy cache management\nconst queryKeys = {\n  admin: ['admin'] as const,\n  users: () => [...queryKeys.admin, 'users'] as const,\n  usersList: (params: UsersParams) => [...queryKeys.users(), params] as const,\n  credits: () => [...queryKeys.admin, 'credits'] as const,\n  invitations: () => [...queryKeys.admin, 'invitations'] as const,\n};\n\n// Usage in hooks\nexport function useAdminUsers(params: UsersParams) {\n  return useQuery({\n    queryKey: queryKeys.usersList(params),\n    queryFn: () => api.get(`/api/admin/users?${searchParams}`),\n    staleTime: 30_000,\n    gcTime: 5 * 60_000,\n  });\n}\n```\n\n## Performance Optimization\n\n### Code Splitting\n\n```tsx\n// Dynamic imports\nconst HeavyComponent = dynamic(() => import('./HeavyComponent'), {\n  loading: () => <Skeleton />,\n  ssr: false, // Client-side only\n});\n```\n\n### Image Optimization\n\n```tsx\nimport Image from 'next/image';\n\n<Image\n  src=\"/hero.jpg\"\n  alt=\"Hero\"\n  width={1200}\n  height={600}\n  priority // Load eagerly for LCP\n/>\n```\n\n### Font Optimization\n\n```tsx\n// app/layout.tsx\nimport { Geist, Geist_Mono } from 'next/font/google';\n\nconst geistSans = Geist({\n  variable: '--font-geist-sans',\n  subsets: ['latin'],\n});\n```\n\n## Accessibility\n\n### Semantic HTML\n\n```tsx\n<nav aria-label=\"Main navigation\">\n  <ul>\n    <li><a href=\"/dashboard\">Dashboard</a></li>\n  </ul>\n</nav>\n```\n\n### ARIA Attributes\n\n```tsx\n<button\n  aria-label=\"Close dialog\"\n  aria-expanded={isOpen}\n  aria-controls=\"dialog-content\"\n>\n  <X className=\"h-4 w-4\" />\n</button>\n```\n\n### Keyboard Navigation\n\n```tsx\n// Radix UI components handle keyboard navigation\n<DropdownMenu>\n  <DropdownMenuTrigger>Open</DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuItem>Item 1</DropdownMenuItem>\n    <DropdownMenuItem>Item 2</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>\n```\n\n## Error Handling\n\n### Error Boundaries\n\n```tsx\n// app/error.tsx\n'use client';\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error;\n  reset: () => void;\n}) {\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button onClick={reset}>Try again</button>\n    </div>\n  );\n}\n```\n\n### Loading States\n\n```tsx\n// app/loading.tsx\nexport default function Loading() {\n  return <Skeleton className=\"w-full h-96\" />;\n}\n```\n\n## Testing Approach\n\n### Component Testing\n\n```tsx\n// __tests__/button.test.tsx\nimport { render, screen } from '@testing-library/react';\nimport { Button } from '@/components/ui/button';\n\ntest('renders button with text', () => {\n  render(<Button>Click me</Button>);\n  expect(screen.getByText('Click me')).toBeInTheDocument();\n});\n```\n\n### Integration Testing\n\n```tsx\n// __tests__/dashboard.test.tsx\ntest('displays user data after loading', async () => {\n  render(<Dashboard />);\n  \n  await waitFor(() => {\n    expect(screen.getByText('User Name')).toBeInTheDocument();\n  });\n});\n```\n\n## Best Practices\n\n### 1. Component Composition\n- Keep components small and focused\n- Use composition over inheritance\n- Extract reusable logic into hooks\n\n### 2. Performance\n- Use Server Components by default\n- Implement proper loading states\n- Optimize images and fonts\n- Use React.memo for expensive components\n\n### 3. Type Safety\n- Define proper TypeScript types\n- Use Zod for runtime validation\n- Avoid `any` types\n\n### 4. Accessibility\n- Use semantic HTML\n- Implement proper ARIA labels\n- Ensure keyboard navigation\n- Test with screen readers\n\n### 5. Code Organization\n- Group related components\n- Co-locate styles with components\n- Keep business logic in separate files\n- Use barrel exports for cleaner imports\n\n### 6. TanStack Query Best Practices\n\n#### Hook Creation\n- **Always use custom hooks** - Never call `useQuery` or `useMutation` directly in components\n- **Use the API client** - All HTTP requests must go through `@/lib/api-client`\n- **Proper error handling** - Let the API client handle HTTP errors automatically\n- **Type safety** - Define proper interfaces for request/response data\n\n#### Query Key Management\n```tsx\n// ✅ Good - Structured and consistent\nqueryKey: ['admin', 'users', { page: 1, search: 'john' }]\n\n// ❌ Bad - Unstructured\nqueryKey: ['admin-users-page-1-search-john']\n```\n\n#### Cache Configuration\n```tsx\n// Short-lived data (real-time updates)\nstaleTime: 30_000,     // 30 seconds\ngcTime: 2 * 60_000,    // 2 minutes\n\n// Settings/configuration data\nstaleTime: 5 * 60_000, // 5 minutes\ngcTime: 10 * 60_000,   // 10 minutes\n\n// Static/rarely changing data\nstaleTime: 30 * 60_000, // 30 minutes\ngcTime: 60 * 60_000,    // 1 hour\n```\n\n#### Mutation Patterns\n- **Optimistic updates** for better UX on fast operations\n- **Proper invalidation** after successful mutations\n- **Error rollback** when optimistic updates fail\n- **Toast notifications** for user feedback\n\n#### Never Do This\n```tsx\n// ❌ NEVER use fetch directly in components\nconst [data, setData] = useState();\nuseEffect(() => {\n  fetch('/api/users').then(res => res.json()).then(setData);\n}, []);\n\n// ❌ NEVER call TanStack Query hooks directly\nconst { data } = useQuery({\n  queryKey: ['users'],\n  queryFn: () => fetch('/api/users').then(res => res.json()),\n});\n```\n\n#### Always Do This\n```tsx\n// ✅ Use custom hooks with API client\nconst { data, isLoading, error } = useAdminUsers({\n  page: 1,\n  pageSize: 50\n});\n\n// ✅ Proper mutation handling\nconst updateUser = useUpdateUser();\nconst handleUpdate = () => {\n  updateUser.mutate({ id: 1, name: 'New Name' });\n};\n```\n","size_bytes":16416},"docs/page-metadata-system.md":{"content":"# Sistema de Metadados de Página\n\n## Visão Geral\n\nO sistema de metadados de página fornece uma maneira modular e centralizada de gerenciar títulos, descrições e breadcrumbs em toda a aplicação protegida.\n\n## Componentes Principais\n\n### 1. PageMetadataProvider\nContexto que envolve o layout protegido e gerencia o estado dos metadados.\n\n### 2. PageHeader\nComponente que renderiza automaticamente os breadcrumbs, título e descrição baseados no contexto.\n\n### 3. Hooks Disponíveis\n\n#### `useSetPageMetadata`\nHook principal para definir metadados completos da página.\n\n```tsx\nimport { useSetPageMetadata } from \"@/contexts/page-metadata\";\n\nexport default function MyPage() {\n  useSetPageMetadata({\n    title: \"Título da Página\",\n    description: \"Descrição da página\",\n    breadcrumbs: [\n      { label: \"Início\", href: \"/dashboard\" },\n      { label: \"Minha Página\" }\n    ],\n    showBreadcrumbs: true // opcional, padrão é true\n  });\n  \n  return <div>Conteúdo da página</div>;\n}\n```\n\n#### `usePageConfig` (Helper Simplificado)\nHook helper que simplifica a configuração de metadados.\n\n```tsx\nimport { usePageConfig } from \"@/hooks/use-page-config\";\n\n// Forma simples\nusePageConfig(\"Título\", \"Descrição\");\n\n// Com breadcrumbs\nusePageConfig(\"Título\", \"Descrição\", [\n  { label: \"Início\", href: \"/dashboard\" },\n  { label: \"Página Atual\" }\n]);\n\n// Com objeto completo\nusePageConfig({\n  title: \"Título\",\n  description: \"Descrição\",\n  showBreadcrumbs: false\n});\n```\n\n## Recursos\n\n### Breadcrumbs Automáticos\nSe não forem fornecidos breadcrumbs customizados, o sistema gera automaticamente baseado na URL atual.\n\n### Renderização Condicional\nO `PageHeader` só renderiza se houver metadados definidos. Se apenas breadcrumbs estiverem presentes (sem título/descrição), apenas os breadcrumbs serão mostrados.\n\n### Integração com Layout\nO `PageHeader` é renderizado automaticamente no layout protegido, não sendo necessário incluí-lo em cada página.\n\n## Exemplos de Uso\n\n### Página do Dashboard\n```tsx\nexport default function DashboardPage() {\n  const { user } = useUser();\n  \n  usePageConfig(\n    `Bem-vindo, ${user?.firstName || \"Usuário\"}!`,\n    \"Aqui está uma visão geral da sua conta\"\n  );\n  \n  return <DashboardContent />;\n}\n```\n\n### Página de Perfil\n```tsx\nexport default function ProfilePage() {\n  usePageConfig({\n    title: \"Configurações de Perfil\",\n    description: \"Gerencie suas informações pessoais\",\n    breadcrumbs: [\n      { label: \"Início\", href: \"/dashboard\" },\n      { label: \"Perfil\" }\n    ]\n  });\n  \n  return <UserProfile />;\n}\n```\n\n### Página sem Breadcrumbs\n```tsx\nexport default function SpecialPage() {\n  usePageConfig({\n    title: \"Página Especial\",\n    showBreadcrumbs: false\n  });\n  \n  return <SpecialContent />;\n}\n```\n\n## Migração de Páginas Existentes\n\nPara migrar páginas existentes:\n\n1. Remova importações de `BreadcrumbNav`\n2. Remova elementos `<h1>` e `<p>` de título/descrição\n3. Adicione `\"use client\"` no topo do arquivo\n4. Importe e use `usePageConfig` ou `useSetPageMetadata`\n5. Defina os metadados apropriados\n\n### Antes:\n```tsx\nimport { BreadcrumbNav } from \"@/components/navigation/breadcrumb-nav\";\n\nexport default function MyPage() {\n  return (\n    <div>\n      <BreadcrumbNav customItems={[...]} />\n      <h1>Título</h1>\n      <p>Descrição</p>\n      <Content />\n    </div>\n  );\n}\n```\n\n### Depois:\n```tsx\n\"use client\";\nimport { usePageConfig } from \"@/hooks/use-page-config\";\n\nexport default function MyPage() {\n  usePageConfig(\"Título\", \"Descrição\");\n  \n  return <Content />;\n}\n```\n\n## Benefícios\n\n1. **Centralização**: Todos os metadados em um único lugar\n2. **Consistência**: Interface uniforme em todas as páginas\n3. **Manutenibilidade**: Mudanças no layout afetam todas as páginas\n4. **Flexibilidade**: Suporta configurações automáticas e customizadas\n5. **Performance**: Evita re-renderizações desnecessárias com memoização\n6. **DX**: API simples e intuitiva\n","size_bytes":3986},"docs/uploads.md":{"content":"# File Uploads (Vercel Blob)\n\nThis project supports user file attachments in the AI Chat using Vercel Blob storage.\n\n## Prerequisites\n- Set `BLOB_READ_WRITE_TOKEN` in `.env.local`. Generate a token in Vercel → Storage → Blob → Tokens.\n- The token is scoped to a specific Blob Store and Region — you do not need to pass the Store ID or Region in code; the token carries that scope.\n\n### Optional: Store Settings\n- Unique Store ID: visible in Vercel → Storage → Blob → your store. Useful for identification and token scoping, but not required in this code path.\n- Storage Region: chosen when creating the store. The upload API uses the region bound to your token automatically.\n- Base URL: default public base is `https://blob.vercel-storage.com`. If you set up a custom domain, downloads will be served from there and the API response `url` will reflect it. No extra config is needed in this repo.\n- Deploy environment variables to Vercel as well if needed.\n\n## API\n- `POST /api/upload` (authenticated)\n  - Accepts `multipart/form-data` with a single `file` field.\n  - Stores the file at `uploads/<clerkUserId>/<timestamp>-<sanitized-filename>` in the Blob Store tied to your token.\n  - Returns:\n    ```json\n    {\n      \"url\": \"https://...\",\n      \"pathname\": \"uploads/usr_123/1715712345-file.pdf\",\n      \"contentType\": \"application/pdf\",\n      \"size\": 12345,\n      \"name\": \"file.pdf\"\n    }\n    ```\n  - Limits: default 25MB per file. Make it configurable with `BLOB_MAX_SIZE_MB`.\n  - Admin tracking: each upload is persisted to `StorageObject` with the uploader (DB `userId` + `clerkUserId`).\n\n### Admin Management\n- List and manage uploads at `/admin/storage` (admin-only).\n- API:\n  - `GET /api/admin/storage?q=&limit=&cursor=` — paginated list with user info\n  - `DELETE /api/admin/storage/:id` — deletes from Blob (best-effort) and soft-deletes the record\n- Model: `StorageObject` (url, pathname, name, contentType, size, createdAt, user relation, optional `deletedAt`).\n\nExample (curl):\n```bash\ncurl -X POST \\\n  -H \"Authorization: Bearer <session-cookie/headers via browser>\" \\\n  -F file=@./example.pdf \\\n  http://localhost:3000/api/upload\n```\n(Note: Auth is handled by Clerk in-browser; use the App UI to upload locally.)\n\n## Client (AI Chat)\n- The paperclip button opens a file picker.\n- Files are uploaded to `/api/upload` and shown as chips.\n- On send, the chat appends a Markdown section with links:\n  ```\n  Attachments:\n  - filename.ext: https://blob.vercel-storage.com/.../filename.ext\n  ```\n- Messages then include attachment links in history and for the model to consider.\n\n## Access & Security\n- Current implementation uses `access: 'public'` for convenience.\n- For private files, switch to private blobs and generate signed URLs on demand.\n- Consider MIME allowlists, virus scanning, and retention policies for production.\n - If switching to private blobs, update the admin UI to generate signed URLs for preview.\n\n## Files\n- API: `src/app/api/upload/route.ts`\n- Admin list/delete: `src/app/api/admin/storage/*` and `src/app/admin/storage/page.tsx`\n- UI: `src/app/(protected)/ai-chat/page.tsx` (composer uploads and chips)\n","size_bytes":3155},"src/middleware.ts":{"content":"import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'\nimport { NextResponse } from 'next/server'\n\nconst isPublicRoute = createRouteMatcher([\n  '/',\n  '/sign-in(.*)',\n  '/api/health',\n])\n\nconst isAdminRoute = createRouteMatcher(['/admin(.*)'])\n\nconst E2E_BYPASS = process.env.E2E_AUTH_BYPASS === '1'\n\nexport default E2E_BYPASS\n  ? function middleware() {\n      return NextResponse.next()\n    }\n  : clerkMiddleware(async (auth, request) => {\n  // Allow public routes\n  if (isPublicRoute(request)) {\n    // Server-side redirect for authenticated users from \"/\" to \"/dashboard\"\n    const authResult = await auth()\n    if (authResult.userId && request.nextUrl.pathname === \"/\") {\n      const url = new URL(\"/dashboard\", request.url)\n      return NextResponse.redirect(url)\n    }\n    return NextResponse.next()\n  }\n  \n  // Quick guard for admin routes to reduce UI flash\n  if (isAdminRoute(request)) {\n    const authResult = await auth()\n    if (!authResult.userId) {\n      const url = new URL('/sign-in', request.url)\n      return NextResponse.redirect(url)\n    }\n    // Optional: only enforce ADMIN_USER_IDS here to avoid extra lookups\n    const adminUserIds = process.env.ADMIN_USER_IDS?.split(',').filter(Boolean) || []\n    if (adminUserIds.length > 0 && !adminUserIds.includes(authResult.userId)) {\n      const url = new URL('/dashboard', request.url)\n      return NextResponse.redirect(url)\n    }\n  }\n\n  // For all other routes, the auth() call in the route handler will handle protection\n  return NextResponse.next()\n})\n\nexport const config = {\n  matcher: ['/((?!.*\\\\..*|_next).*)', '/', '/(api|trpc)(.*)'],\n}\n","size_bytes":1632},"docs/testing/admin-qa-guide.md":{"content":"# Admin QA Guide\n\nThis document describes how to validate the admin surface end to end. It combines environment prerequisites, dataset expectations, automated coverage and manual checkpoints so the team can run consistent regression passes before every release.\n\n## 1. Scope Overview\nAdmin features covered by this guide:\n- **Dashboard** (`/admin`): high-level KPIs and charts for ARR/MRR/Churn.\n- **Users** (`/admin/users`): listing, search, invitations, activation/deactivation, balance adjustments and Clerk sync dialog.\n- **Credits** (`/admin/credits`): aggregated metrics and balance adjustments via modal.\n- **Usage** (`/admin/usage`): filters, pagination, CSV export and JSON detail dialog for operations.\n- **Storage** (`/admin/storage`): filtering, per-user view, external link open and delete workflow for blobs.\n- **Settings** (`/admin/settings/*`): feature credit pricing and subscription plan mapping.\n\nOut of scope for this document: Clerk/Stripe webhook flows (covered by backend integration tests), authentication itself (smoke test separately) and load/performance testing.\n\n## 2. Environment & Dependencies\n- Start the app with `npm run dev` or, for Playwright, `npm run dev:e2e` (enables `E2E_AUTH_BYPASS=1` and pins the server to `127.0.0.1:3100`).\n- Minimum `.env` variables: `DATABASE_URL`, `CLERK_SECRET_KEY`, `CLERK_PUBLISHABLE_KEY`, and `ADMIN_EMAILS` or `ADMIN_USER_IDS`. For e2e bypass only: set `E2E_AUTH_BYPASS=1` and `ADMIN_USER_IDS=e2e-admin`.\n- Database: SQLite is fine locally; prefer Postgres when running shared QA. Ensure `prisma migrate deploy` (or `db:migrate`) succeeded before tests.\n- Seed data: provide sample users with mixed credit balances, pending invitations, uploaded files and usage records. Automated specs stub most APIs but manual sweeps benefit from realistic seed data.\n\n## 3. Automated Coverage (Playwright)\n| Area | Scenario | Entry Point | Notes |\n| --- | --- | --- | --- |\n| Dashboard | Metric cards + charts render and respect mocked data | `tests/e2e/admin-dashboard.spec.ts` | API responses stubbed (`/api/admin/dashboard`). |\n| Users | Search, credit prompt, invite flow, tabs | `tests/e2e/admin-users.spec.ts` | Handles `window.prompt` for credit update and invitation toasts. |\n| Credits | Aggregated cards, search, adjust via modal | `tests/e2e/admin-credits.spec.ts` | Verifies toast feedback and table update. |\n| Usage | Filters (type/search), JSON dialog | `tests/e2e/admin-usage.spec.ts` | CSV export kept manual; mocks keep fixtures small. |\n| Storage | Filter term + deletion confirmation | `tests/e2e/admin-storage.spec.ts` | Uses `confirm` dialog and ensures toast appears. |\n| Settings | Feature cost edit + save feedback | `tests/e2e/admin-settings.spec.ts` | Stubs GET/PUT to `/api/admin/settings`. |\n\nAll specs run via `npm run test:e2e`. Configuration sits in `playwright.config.ts` with `trace` on first retry and Chromium as the default project.\n\n## 4. Manual QA Checklist\nRun these when validating new admin functionality or before major releases:\n1. **Metrics sanity** – confirm dashboard numbers align with seeded DB data and chart fallbacks render when series are empty.\n2. **Bulk Clerk sync** – in a real environment, exercise the sync modal with and without override credits to ensure webhooks update balances.\n3. **Invite lifecycle** – verify resend/revoke on actual Clerk invitations (requires email delivery setup).\n4. **Exports** – download the Usage CSV and inspect content for correct delimiter/quoting.\n5. **Storage deletion** – confirm blobs disappear from the storage provider (Verel Blob/S3) and are soft-deleted in DB.\n6. **Settings persistence** – tweak feature costs and plan mappings, verify data in the database and via API responses.\n7. **Access control** – ensure non-admin accounts hit redirects from `/admin` routes when `E2E_AUTH_BYPASS` is disabled.\n\n## 5. Running the Playwright Suite\n```bash\nnpm run test:e2e                # full chromium pass\nnpm run test:e2e -- --debug     # headed mode for debugging\nnpx playwright show-trace trace.zip\n```\nOutputs (screenshots/traces) appear in `playwright-report/` when failures occur. The suite automatically spins up the dev server with the bypassed auth guard.\n\n## 6. Extending Automation\n- Prefer REST mocks (via `page.route`) to keep tests deterministic; only hit live APIs when the response surface is stable.\n- Wrap toast assertions with `page.getByRole('status')` filters to avoid duplicate matches.\n- Store new admin-specific fixtures under `tests/e2e/fixtures` (create if needed) to keep specs lean.\n- When adding new pages, follow the existing pattern: stub API(s), assert headings/cards, exercise primary CTA(s) and confirm toasts/state updates.\n\n## 7. Next Steps\n1. Introduce repeatable Prisma seeds focused on admin data to support both manual regression and automated mocks.\n2. Wire `npm run test:e2e` into CI, publishing Playwright HTML reports and traces on failure.\n3. Expand automated coverage to credit usage reports and plan management API endpoints once stabilized.\n","size_bytes":5052},"prisma/migrations/migration_lock.toml":{"content":"# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = \"postgresql\"\n","size_bytes":128},"src/app/globals.css":{"content":"@import \"tailwindcss\";\n\n@custom-variant dark (&:is(.dark *));\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-sidebar-ring: var(--sidebar-ring);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar: var(--sidebar);\n  --color-chart-5: var(--chart-5);\n  --color-chart-4: var(--chart-4);\n  --color-chart-3: var(--chart-3);\n  --color-chart-2: var(--chart-2);\n  --color-chart-1: var(--chart-1);\n  --color-ring: var(--ring);\n  --color-input: var(--input);\n  --color-border: var(--border);\n  --color-destructive: var(--destructive);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-accent: var(--accent);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-muted: var(--muted);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-secondary: var(--secondary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-primary: var(--primary);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-popover: var(--popover);\n  --color-card-foreground: var(--card-foreground);\n  --color-card: var(--card);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n}\n\n:root {\n  --radius: 0.625rem;\n  --background: oklch(0.98 0.008 85);\n  --foreground: oklch(0.15 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.15 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.15 0 0);\n  --primary: oklch(0.5 0.15 80);\n  --primary-foreground: oklch(0.98 0.008 85);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n  \n  /* Refined Color System - Light Mode */\n  --primary-50: oklch(0.98 0.02 240);\n  --primary-100: oklch(0.95 0.04 240);\n  --primary-400: oklch(0.65 0.15 240);\n  --primary-500: oklch(0.55 0.2 240);\n  --primary-600: oklch(0.45 0.22 240);\n  --primary-700: oklch(0.35 0.2 240);\n  \n  /* Semantic Colors */\n  --success-500: oklch(0.65 0.22 145);\n  --warning-500: oklch(0.75 0.25 85);\n  --error-500: oklch(0.55 0.25 27);\n  --info-400: oklch(0.7 0.15 230);\n  --info-500: oklch(0.6 0.2 230);\n  \n  /* Neutral Colors */\n  --gray-50: oklch(0.98 0 0);\n  --gray-100: oklch(0.96 0 0);\n  --gray-200: oklch(0.92 0 0);\n  --gray-300: oklch(0.88 0 0);\n  --gray-400: oklch(0.71 0 0);\n  --gray-500: oklch(0.56 0 0);\n  --gray-600: oklch(0.42 0 0);\n  --gray-700: oklch(0.33 0 0);\n  --gray-800: oklch(0.21 0 0);\n  --gray-900: oklch(0.14 0 0);\n}\n\n.dark {\n  --background: oklch(0.08 0 0);\n  --foreground: oklch(0.85 0.08 80);\n  --card: oklch(0.12 0 0);\n  --card-foreground: oklch(0.85 0.08 80);\n  --popover: oklch(0.12 0 0);\n  --popover-foreground: oklch(0.85 0.08 80);\n  --primary: oklch(0.7 0.18 80);\n  --primary-foreground: oklch(0.08 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.704 0.191 22.216);\n  --border: oklch(1 0 0 / 10%);\n  --input: oklch(1 0 0 / 15%);\n  --ring: oklch(0.556 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(1 0 0 / 10%);\n  --sidebar-ring: oklch(0.556 0 0);\n  \n  /* Refined Color System - Dark Mode */\n  --primary-50: oklch(0.18 0.02 240);\n  --primary-100: oklch(0.25 0.04 240);\n  --primary-400: oklch(0.55 0.18 240);\n  --primary-500: oklch(0.65 0.22 240);\n  --primary-600: oklch(0.75 0.24 240);\n  --primary-700: oklch(0.85 0.22 240);\n  \n  /* Semantic Colors - Dark Mode */\n  --success-500: oklch(0.75 0.22 145);\n  --warning-500: oklch(0.8 0.25 85);\n  --error-500: oklch(0.65 0.25 27);\n  --info-400: oklch(0.6 0.18 230);\n  --info-500: oklch(0.7 0.22 230);\n  \n  /* Neutral Colors - Dark Mode */\n  --gray-50: oklch(0.14 0 0);\n  --gray-100: oklch(0.18 0 0);\n  --gray-200: oklch(0.22 0 0);\n  --gray-300: oklch(0.3 0 0);\n  --gray-400: oklch(0.4 0 0);\n  --gray-500: oklch(0.5 0 0);\n  --gray-600: oklch(0.6 0 0);\n  --gray-700: oklch(0.7 0 0);\n  --gray-800: oklch(0.8 0 0);\n  --gray-900: oklch(0.9 0 0);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n\n  /* Retro-futuristic subtle professional theme tokens */\n  :root {\n    /* subtle by default (light) — but we rely on .dark for the primary look */\n    --retro-cyan: oklch(0.85 0.18 200);\n    --retro-magenta: oklch(0.78 0.22 328);\n    --retro-yellow: oklch(0.9 0.15 100);\n    --crt-scan-opacity: 0.045;\n    --grid-stroke: color-mix(in oklch, var(--foreground) 6%, transparent);\n\n    /* glass */\n    --glass-bg: color-mix(in oklch, var(--card) 60%, transparent);\n    --glass-border: color-mix(in oklch, var(--foreground) 10%, transparent);\n    --glass-inner: color-mix(in oklch, var(--foreground) 4%, transparent);\n    --glass-shadow: 0 10px 24px -12px color-mix(in oklch, var(--foreground) 14%, transparent);\n\n    /* neon anchors used for restrained glow */\n    --neon: color-mix(in oklch, var(--retro-cyan) 70%, var(--primary) 30%);\n    --neon-2: color-mix(in oklch, var(--retro-magenta) 55%, var(--chart-4) 45%);\n  }\n  .dark {\n    --crt-scan-opacity: 0.065;\n    --grid-stroke: color-mix(in oklch, var(--foreground) 11%, transparent);\n\n    --glass-bg: color-mix(in oklch, var(--card) 20%, transparent);\n    --glass-border: color-mix(in oklch, var(--foreground) 18%, transparent);\n    --glass-inner: color-mix(in oklch, var(--foreground) 10%, transparent);\n    --glass-shadow: 0 22px 44px -20px color-mix(in oklch, var(--foreground) 40%, transparent);\n  }\n\n  body {\n    @apply bg-background text-foreground;\n  }\n\n  /* Glass panel utility (restrained) */\n  .glass-panel {\n    background: var(--glass-bg);\n    @apply backdrop-blur-xl border rounded-xl;\n    border-color: var(--glass-border);\n    box-shadow: var(--glass-shadow);\n    position: relative;\n    overflow: clip;\n  }\n  .glass-panel::before {\n    content: \"\";\n    position: absolute;\n    inset: -1px;\n    background:\n      linear-gradient(180deg, color-mix(in oklch, var(--neon) 12%, transparent), transparent 40%) border-box;\n    mask:\n      linear-gradient(#000, #000),\n      linear-gradient(#000, #000);\n    -webkit-mask-composite: xor;\n            mask-composite: exclude;\n    border-radius: inherit;\n    pointer-events: none;\n    opacity: 0.28;\n  }\n  .glass-panel::after {\n    content: \"\";\n    position: absolute;\n    inset: 1px;\n    border-radius: calc(var(--radius) - 2px);\n    background: radial-gradient(120% 100% at 10% -10%, var(--glass-inner), transparent 40%);\n    pointer-events: none;\n  }\n\n  /* Neon focus ring — toned down */\n  .neon-focus {\n    box-shadow:\n      0 0 0 2px color-mix(in oklch, var(--neon) 45%, transparent),\n      0 0 22px 1px color-mix(in oklch, var(--neon) 26%, transparent);\n  }\n\n  /* CRT scanline overlay (very subtle) */\n  .noise-overlay {\n    position: fixed;\n    inset: 0;\n    pointer-events: none;\n    z-index: 10;\n    mix-blend-mode: overlay;\n    background-image:\n      /* film grain */\n      url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='140' height='140' viewBox='0 0 140 140'%3E%3Cfilter id='n'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.8' numOctaves='4' stitchTiles='stitch'/%3E%3CfeColorMatrix type='saturate' values='0'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23n)' opacity='0.9'/%3E%3C/svg%3E\"),\n      /* scanlines */\n      repeating-linear-gradient(\n        0deg,\n        rgba(255,255,255,0.02) 0px,\n        rgba(255,255,255,0.02) 1px,\n        transparent 1px,\n        transparent 3px\n      );\n    opacity: var(--crt-scan-opacity);\n  }\n\n  /* Divider with restrained glow */\n  .glow-separator {\n    height: 1px;\n    background:\n      linear-gradient(90deg, transparent, color-mix(in oklch, var(--neon) 30%, transparent), transparent);\n    opacity: 0.75;\n  }\n\n  /* Accent text glow utility — restrained */\n  .text-neon {\n    color: var(--primary);\n    text-shadow:\n      0 0 10px color-mix(in oklch, var(--neon) 26%, transparent),\n      0 0 18px color-mix(in oklch, var(--neon-2) 16%, transparent);\n  }\n\n  /* Utility: thin neon border for panels */\n  .neon-border {\n    box-shadow: inset 0 0 0 1px color-mix(in oklch, var(--neon) 18%, transparent);\n  }\n\n  /* Animation utilities for landing page */\n  .animate-blob {\n    animation: blob 7s infinite;\n  }\n\n  .animation-delay-2000 {\n    animation-delay: 2s;\n  }\n\n  .animation-delay-4000 {\n    animation-delay: 4s;\n  }\n\n  @keyframes blob {\n    0% {\n      transform: translate(0px, 0px) scale(1);\n    }\n    33% {\n      transform: translate(30px, -50px) scale(1.1);\n    }\n    66% {\n      transform: translate(-20px, 20px) scale(0.9);\n    }\n    100% {\n      transform: translate(0px, 0px) scale(1);\n    }\n  }\n}\n\n/* Syntax highlighting (rehype-highlight / highlight.js) */\n@layer base {\n  .hljs { color: var(--foreground); background: transparent; }\n  .hljs-comment,\n  .hljs-quote { color: color-mix(in oklch, var(--foreground) 60%, transparent); font-style: italic; }\n  .hljs-keyword,\n  .hljs-selector-tag,\n  .hljs-subst { color: color-mix(in oklch, var(--primary) 80%, var(--foreground) 20%); font-weight: 600; }\n  .hljs-literal,\n  .hljs-number,\n  .hljs-doctag { color: oklch(0.65 0.22 145); }\n  .hljs-string,\n  .hljs-regexp,\n  .hljs-addition { color: oklch(0.7 0.18 160); }\n  .hljs-attribute,\n  .hljs-attr,\n  .hljs-symbol,\n  .hljs-bullet { color: oklch(0.73 0.21 80); }\n  .hljs-title,\n  .hljs-section { color: oklch(0.7 0.2 230); font-weight: 600; }\n  .hljs-variable,\n  .hljs-template-variable,\n  .hljs-type,\n  .hljs-built_in,\n  .hljs-builtin-name { color: oklch(0.68 0.21 260); }\n  .hljs-deletion { color: oklch(0.65 0.25 27); }\n  .hljs-meta { color: color-mix(in oklch, var(--foreground) 70%, transparent); }\n  .hljs-emphasis { font-style: italic; }\n  .hljs-strong { font-weight: 700; }\n}\n","size_bytes":11379},"src/app/layout.tsx":{"content":"import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { QueryProvider } from \"@/components/providers/query-provider\";\nimport {\n  ClerkProvider,\n} from \"@clerk/nextjs\";\nimport { siteMetadata } from \"@/lib/brand-config\";\nimport { AnalyticsPixels } from \"@/components/analytics/pixels\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = siteMetadata;\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <ClerkProvider>\n      <html lang=\"pt-br\" suppressHydrationWarning>\n        <body\n          className={`${geistSans.variable} ${geistMono.variable} antialiased  text-foreground`}\n          suppressHydrationWarning\n        >\n          <AnalyticsPixels />\n          <QueryProvider>\n            <ThemeProvider>\n              {children}\n              <Toaster />\n            </ThemeProvider>\n          </QueryProvider>\n        </body>\n      </html>\n    </ClerkProvider>\n  );\n}\n","size_bytes":1277},"src/components/theme-provider.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\n\ntype Theme = \"light\" | \"dark\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\nconst ThemeContext = React.createContext<\n  | {\n      theme: Theme;\n      setTheme: (theme: Theme) => void;\n      resolvedTheme: \"light\" | \"dark\";\n    }\n  | undefined\n>(undefined);\n\nfunction getSystemTheme(): \"light\" | \"dark\" {\n  if (typeof window === \"undefined\") return \"light\";\n  return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n}\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"app.theme\",\n}: ThemeProviderProps) {\n  const [theme, setThemeState] = React.useState<Theme>(defaultTheme);\n  const [resolved, setResolved] = React.useState<\"light\" | \"dark\">(getSystemTheme());\n\n  // Initialize from localStorage\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    const saved = window.localStorage.getItem(storageKey) as Theme | null;\n    if (saved) {\n      setThemeState(saved);\n    } else {\n      setThemeState(defaultTheme);\n    }\n  }, [defaultTheme, storageKey]);\n\n  // Listen for system changes\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    const mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    const onChange = () => setResolved(mql.matches ? \"dark\" : \"light\");\n    onChange();\n    mql.addEventListener?.(\"change\", onChange);\n    return () => mql.removeEventListener?.(\"change\", onChange);\n  }, []);\n\n  // Apply theme to documentElement\n  React.useEffect(() => {\n    if (typeof document === \"undefined\") return;\n    const root = document.documentElement;\n    const applied = theme === \"system\" ? resolved : theme;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(applied);\n  }, [theme, resolved]);\n\n  const setTheme = React.useCallback(\n    (t: Theme) => {\n      setThemeState(t);\n      if (typeof window !== \"undefined\") {\n        window.localStorage.setItem(storageKey, t);\n      }\n    },\n    [storageKey]\n  );\n\n  const value = React.useMemo(\n    () => ({ theme, setTheme, resolvedTheme: theme === \"system\" ? resolved : (theme as \"light\" | \"dark\") }),\n    [theme, setTheme, resolved]\n  );\n\n  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\n}\n\nexport function useTheme() {\n  const ctx = React.useContext(ThemeContext);\n  if (!ctx) throw new Error(\"useTheme must be used within ThemeProvider\");\n  return ctx;\n}\n","size_bytes":2509},"src/components/theme-toggle.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport { Moon, Sun, Laptop } from \"lucide-react\";\nimport { useTheme } from \"./theme-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme, resolvedTheme } = useTheme();\n\n  const label =\n    theme === \"system\" ? `System (${resolvedTheme})` : theme === \"light\" ? \"Light\" : \"Dark\";\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" aria-label={`Theme: ${label}`}>\n          <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-40\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")} aria-label=\"Switch to Light theme\">\n          <Sun className=\"mr-2 h-4 w-4\" />\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")} aria-label=\"Switch to Dark theme\">\n          <Moon className=\"mr-2 h-4 w-4\" />\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")} aria-label=\"Use System theme\">\n          <Laptop className=\"mr-2 h-4 w-4\" />\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":1639},"src/contexts/page-metadata.tsx":{"content":"\"use client\";\n\nimport React, { createContext, useContext, useState, useCallback, ReactNode } from \"react\";\n\nexport interface BreadcrumbItem {\n  label: string;\n  href?: string;\n}\n\nexport interface PageMetadata {\n  title?: string;\n  description?: string;\n  breadcrumbs?: BreadcrumbItem[];\n  showBreadcrumbs?: boolean;\n}\n\ninterface PageMetadataContextType {\n  metadata: PageMetadata;\n  setMetadata: (metadata: PageMetadata) => void;\n  updateMetadata: (metadata: Partial<PageMetadata>) => void;\n}\n\nconst PageMetadataContext = createContext<PageMetadataContextType | undefined>(undefined);\n\nexport function PageMetadataProvider({ children }: { children: ReactNode }) {\n  const [metadata, setMetadataState] = useState<PageMetadata>({\n    showBreadcrumbs: true,\n  });\n\n  const setMetadata = useCallback((newMetadata: PageMetadata) => {\n    setMetadataState(newMetadata);\n  }, []);\n\n  const updateMetadata = useCallback((partialMetadata: Partial<PageMetadata>) => {\n    setMetadataState((prev) => ({ ...prev, ...partialMetadata }));\n  }, []);\n\n  return (\n    <PageMetadataContext.Provider value={{ metadata, setMetadata, updateMetadata }}>\n      {children}\n    </PageMetadataContext.Provider>\n  );\n}\n\nexport function usePageMetadata() {\n  const context = useContext(PageMetadataContext);\n  if (context === undefined) {\n    throw new Error(\"usePageMetadata must be used within a PageMetadataProvider\");\n  }\n  return context;\n}\n\n// Hook para definir metadados da página\nexport function useSetPageMetadata(metadata: PageMetadata) {\n  const { setMetadata } = usePageMetadata();\n  \n  React.useEffect(() => {\n    setMetadata(metadata);\n    // Dependências específicas ao invés do objeto completo para evitar loops\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    setMetadata,\n    metadata.title,\n    metadata.description,\n    metadata.showBreadcrumbs,\n    // Para arrays, usamos JSON.stringify para comparação profunda\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    JSON.stringify(metadata.breadcrumbs)\n  ]);\n}\n","size_bytes":2042},"src/hooks/use-ai-image.ts":{"content":"\"use client\";\n\nimport { useMutation } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { api } from '@/lib/api-client';\n\nexport interface GenerateImageParams {\n  model: string;\n  prompt: string;\n  size?: string;\n  count?: number;\n  attachments?: { name: string; url: string }[];\n}\n\nexport interface GenerateImageResponse {\n  images: string[];\n  credits_used?: number;\n}\n\nexport function useGenerateImage() {\n  const { toast } = useToast();\n\n  return useMutation<GenerateImageResponse, Error, GenerateImageParams>({\n    mutationFn: (params: GenerateImageParams) =>\n      api.post<GenerateImageResponse>('/api/ai/image', params),\n    onError: (error) => {\n      toast({\n        title: 'Failed to generate image',\n        description: error.message,\n        variant: 'destructive'\n      });\n    },\n    onSuccess: (data) => {\n      if (data.credits_used) {\n        toast({\n          title: 'Image generated successfully',\n          description: `Used ${data.credits_used} credits`,\n        });\n      }\n    },\n  });\n}","size_bytes":1046},"src/hooks/use-dashboard.ts":{"content":"\"use client\";\n\nimport { useQuery } from '@tanstack/react-query';\nimport { api } from '@/lib/api-client';\n\nexport interface DashboardStats {\n  totalUsers: number;\n  activeUsers: number;\n  totalCredits: number;\n  usedCredits: number;\n  mrrSeries: { label: string; value: number }[];\n  arrSeries: { label: string; value: number }[];\n  churnSeries: { label: string; value: number }[];\n  recentActivity: Array<{\n    id: string;\n    type: string;\n    description: string;\n    timestamp: string;\n  }>;\n}\n\nexport function useDashboard() {\n  return useQuery<DashboardStats>({\n    queryKey: ['admin-dashboard'],\n    queryFn: () => api.get('/api/admin/dashboard'),\n    staleTime: 2 * 60_000, // 2 minutes\n    gcTime: 10 * 60_000, // 10 minutes\n  });\n}","size_bytes":740},"src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}","size_bytes":564},"src/hooks/use-openrouter-models.ts":{"content":"\"use client\";\n\nimport { useQuery } from '@tanstack/react-query';\nimport { api } from '@/lib/api-client';\n\nexport interface OpenRouterModel {\n  id: string;\n  label: string;\n}\n\nexport interface OpenRouterModelsResponse {\n  models: OpenRouterModel[];\n}\n\nexport function useOpenRouterModels(capability?: 'image' | 'text') {\n  return useQuery<OpenRouterModelsResponse>({\n    queryKey: ['openrouter-models', capability],\n    queryFn: () => {\n      const path = capability === 'image'\n        ? '/api/ai/openrouter/models?capability=image'\n        : '/api/ai/openrouter/models';\n      return api.get<OpenRouterModelsResponse>(path);\n    },\n    enabled: capability !== undefined,\n    staleTime: 10 * 60_000, // 10 minutes - models don't change frequently\n    gcTime: 30 * 60_000, // 30 minutes\n    retry: 2,\n  });\n}\n","size_bytes":808},"src/hooks/use-page-config.ts":{"content":"\"use client\";\n\nimport { useMemo } from \"react\";\nimport { useSetPageMetadata, PageMetadata } from \"@/contexts/page-metadata\";\n\n/**\n * Hook helper para configurar metadados da página de forma mais simples\n * \n * @example\n * // Uso básico\n * usePageConfig(\"Minha Página\", \"Descrição da página\");\n * \n * // Com breadcrumbs customizados\n * usePageConfig(\"Perfil\", \"Gerencie seu perfil\", [\n *   { label: \"Início\", href: \"/dashboard\" },\n *   { label: \"Perfil\" }\n * ]);\n * \n * // Com objeto completo\n * usePageConfig({\n *   title: \"Dashboard\",\n *   description: \"Visão geral\",\n *   showBreadcrumbs: false\n * });\n */\nexport function usePageConfig(\n  titleOrConfig: string | PageMetadata,\n  description?: string,\n  breadcrumbs?: PageMetadata[\"breadcrumbs\"]\n) {\n  // Memoizar o objeto metadata para evitar recriações desnecessárias\n  const metadata = useMemo<PageMetadata>(() => {\n    return typeof titleOrConfig === \"string\"\n      ? {\n          title: titleOrConfig,\n          description,\n          breadcrumbs,\n        }\n      : titleOrConfig;\n  }, [titleOrConfig, description, breadcrumbs]);\n\n  useSetPageMetadata(metadata);\n}\n","size_bytes":1131},"src/hooks/use-storage.ts":{"content":"\"use client\";\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { api } from '@/lib/api-client';\n\nexport interface StorageItem {\n  id: string;\n  name: string;\n  contentType: string | null;\n  size: number;\n  url: string;\n  pathname: string;\n  createdAt: string;\n  user: { id: string; clerkId: string; email: string | null; name: string | null };\n}\n\nexport interface StorageParams {\n  q?: string;\n  type?: string;\n  userId?: string;\n  cursor?: string;\n  limit?: number;\n}\n\nexport interface StorageResponse {\n  items: StorageItem[];\n  nextCursor: string | null;\n}\n\nexport function useStorage(params: StorageParams = {}) {\n  const searchParams = new URLSearchParams();\n\n  if (params.q) searchParams.set('q', params.q);\n  if (params.type) searchParams.set('type', params.type);\n  if (params.userId) searchParams.set('userId', params.userId);\n  if (params.cursor) searchParams.set('cursor', params.cursor);\n  if (params.limit) searchParams.set('limit', params.limit.toString());\n\n  return useQuery<StorageResponse>({\n    queryKey: ['admin-storage', params],\n    queryFn: () => api.get(`/api/admin/storage?${searchParams.toString()}`),\n    staleTime: 60_000, // 1 minute\n    gcTime: 5 * 60_000, // 5 minutes\n  });\n}\n\nexport function useDeleteStorageItem() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) =>\n      api.delete(`/api/admin/storage/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-storage'] });\n    },\n  });\n}","size_bytes":1537},"src/hooks/use-toast.ts":{"content":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n    type: ActionType[\"ADD_TOAST\"]\n    toast: ToasterToast\n  }\n  | {\n    type: ActionType[\"UPDATE_TOAST\"]\n    toast: Partial<ToasterToast>\n  }\n  | {\n    type: ActionType[\"DISMISS_TOAST\"]\n    toastId?: ToasterToast[\"id\"]\n  }\n  | {\n    type: ActionType[\"REMOVE_TOAST\"]\n    toastId?: ToasterToast[\"id\"]\n  }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n              ...t,\n              open: false,\n            }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }","size_bytes":3979},"src/lib/admin-utils.ts":{"content":"import { currentUser } from \"@clerk/nextjs/server\";\n\nconst ADMIN_EMAILS = process.env.ADMIN_EMAILS?.split(\",\") || [];\nconst ADMIN_USER_IDS = process.env.ADMIN_USER_IDS?.split(\",\") || [];\n\nexport async function isAdmin(userId: string): Promise<boolean> {\n  try {\n    if (ADMIN_USER_IDS.includes(userId)) return true;\n\n    const user = await currentUser();\n    if (!user) return false;\n\n    const userEmail = user.emailAddresses[0]?.emailAddress;\n    return ADMIN_EMAILS.includes(userEmail);\n  } catch (error) {\n    console.error(\"Admin check error:\", error);\n    return false;\n  }\n}\n","size_bytes":582},"src/lib/api-auth.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\n// import { db } from '@/lib/db';\n\n// TODO: Implement API key validation when apiKey table is added to schema\nexport async function validateApiKey(request: NextRequest) {\n  const authHeader = request.headers.get('authorization');\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return { \n      isValid: false, \n      error: 'Missing or invalid authorization header',\n      status: 401 \n    };\n  }\n\n  // const apiKey = authHeader.substring(7); // Remove 'Bearer ' prefix\n\n  try {\n    // TODO: Implement when apiKey table is added to Prisma schema\n    /*\n    const apiKey = authHeader.substring(7); // Remove 'Bearer ' prefix\n    const keyRecord = await db.apiKey.findUnique({\n      where: { key: apiKey },\n      include: { user: true }\n    });\n\n    if (!keyRecord) {\n      return {\n        isValid: false,\n        error: 'Invalid API key',\n        status: 401\n      };\n    }\n\n    if (!keyRecord.isActive) {\n      return {\n        isValid: false,\n        error: 'API key is deactivated',\n        status: 401\n      };\n    }\n\n    // Update last used timestamp\n    await db.apiKey.update({\n      where: { id: keyRecord.id },\n      data: { lastUsedAt: new Date() }\n    });\n    */\n\n    // Temporary implementation - always return invalid until schema is updated\n    return {\n      isValid: false,\n      error: 'API key validation not implemented',\n      status: 501\n    };\n  } catch {\n    return {\n      isValid: false,\n      error: 'Internal server error',\n      status: 500\n    };\n  }\n}\n\nexport function createUnauthorizedResponse(error: string, status: number = 401) {\n  return NextResponse.json(\n    { error, success: false },\n    { status }\n  );\n}\n\nexport function createSuccessResponse<T>(data: T, status: number = 200) {\n  return NextResponse.json({\n    success: true,\n    data\n  }, { status });\n}\n\nexport function createErrorResponse(error: string, status: number = 500) {\n  return NextResponse.json({\n    success: false,\n    error\n  }, { status });\n}","size_bytes":2026},"src/lib/api-client.ts":{"content":"/**\n * API client utilities for making HTTP requests\n * Used with TanStack Query for consistent error handling and response parsing\n */\n\nexport class ApiError extends Error {\n  constructor(\n    message: string,\n    public status: number,\n    public response?: Response\n  ) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\n/**\n * Generic API client function that handles common HTTP operations\n */\nexport async function apiClient<T = unknown>(\n  url: string,\n  options: RequestInit = {}\n): Promise<T> {\n  const response = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    let errorMessage: string;\n\n    try {\n      const errorJson = JSON.parse(errorText);\n      errorMessage = errorJson.message || errorJson.error || `HTTP ${response.status}`;\n    } catch {\n      errorMessage = errorText || `HTTP ${response.status}`;\n    }\n\n    throw new ApiError(errorMessage, response.status, response);\n  }\n\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  }\n\n  return response.text() as T;\n}\n\n/**\n * Convenience methods for common HTTP verbs\n */\nexport const api = {\n  get: <T = unknown>(url: string, options?: RequestInit) =>\n    apiClient<T>(url, { ...options, method: 'GET' }),\n\n  post: <T = unknown>(url: string, data?: unknown, options?: RequestInit) =>\n    apiClient<T>(url, {\n      ...options,\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n    }),\n\n  put: <T = unknown>(url: string, data?: unknown, options?: RequestInit) =>\n    apiClient<T>(url, {\n      ...options,\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    }),\n\n  patch: <T = unknown>(url: string, data?: unknown, options?: RequestInit) =>\n    apiClient<T>(url, {\n      ...options,\n      method: 'PATCH',\n      body: data ? JSON.stringify(data) : undefined,\n    }),\n\n  delete: <T = unknown>(url: string, options?: RequestInit) =>\n    apiClient<T>(url, { ...options, method: 'DELETE' }),\n};","size_bytes":2168},"src/lib/auth-utils.ts":{"content":"import { db } from '@/lib/db';\nimport { auth } from '@clerk/nextjs/server';\nimport { NextResponse } from 'next/server';\n\n\nexport async function getUserFromClerkId(clerkId: string) {\n  let user = await db.user.findUnique({\n    where: { clerkId }\n  });\n\n  if (!user) {\n    // Create user if doesn't exist\n    user = await db.user.create({\n      data: { clerkId }\n    });\n  }\n\n  return user;\n}\n\nexport function createAuthErrorResponse(message: string, status: number = 401) {\n  return NextResponse.json(\n    { error: message, success: false },\n    { status }\n  );\n}\n\nexport async function validateUserAuthentication() {\n  const { userId } = await auth();\n  \n  if (!userId) {\n    throw new Error('Unauthorized');\n  }\n  \n  return userId;\n}\n","size_bytes":735},"src/lib/brand-config.ts":{"content":"import type { Metadata } from 'next'\n\ntype LogoPaths = {\n  light?: string\n  dark?: string\n}\n\ntype IconPaths = {\n  favicon?: string\n  apple?: string\n  shortcut?: string\n}\n\nexport type AnalyticsConfig = {\n  gtmId?: string\n  gaMeasurementId?: string\n  facebookPixelId?: string\n}\n\nexport const site = {\n  name: 'FiiAI - Análise Inteligente de Fundos Imobiliários',\n  shortName: 'FiiAI',\n  description:\n    'Plataforma de análise inteligente de carteiras de FIIs com agentes especializados para otimizar seus investimentos em fundos imobiliários.',\n  url: process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000',\n  author: 'FiiAI',\n  keywords: ['FII', 'Fundos Imobiliários', 'Investimentos', 'IA', 'Análise', 'Carteira', 'Recomendações', 'Real Estate', 'REIT'],\n  ogImage: '/og-image.png',\n  logo: {\n    light: '/logo-light.svg',\n    dark: '/logo-dark.svg',\n  } as LogoPaths,\n  icons: {\n    favicon: '/favicon.ico',\n    apple: '/apple-touch-icon.png',\n    shortcut: '/favicon-16x16.png',\n  } as IconPaths,\n  socials: {\n    twitter: '@FiiAI_oficial',\n  },\n  support: {\n    email: 'suporte@fiiai.com',\n  },\n  analytics: {\n    gtmId: process.env.NEXT_PUBLIC_GTM_ID,\n    gaMeasurementId: process.env.NEXT_PUBLIC_GA_ID,\n    facebookPixelId: process.env.NEXT_PUBLIC_FACEBOOK_PIXEL_ID,\n  } as AnalyticsConfig,\n} as const\n\nexport const siteMetadata: Metadata = {\n  title: site.name,\n  description: site.description,\n  keywords: [...site.keywords],\n  authors: [{ name: site.author }],\n  openGraph: {\n    title: site.name,\n    description: site.description,\n    url: site.url,\n    siteName: site.name,\n    images: site.ogImage ? [{ url: site.ogImage }] : undefined,\n    type: 'website',\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: site.name,\n    description: site.description,\n  },\n  icons: {\n    icon: site.icons.favicon,\n    apple: site.icons.apple,\n    shortcut: site.icons.shortcut,\n  },\n}\n","size_bytes":1908},"src/lib/cache.ts":{"content":"interface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  ttl: number;\n}\n\nclass SimpleCache {\n  private cache = new Map<string, CacheEntry<any>>();\n  private maxSize: number;\n\n  constructor(maxSize = 1000) {\n    this.maxSize = maxSize;\n  }\n\n  set<T>(key: string, data: T, ttlSeconds = 300): void {\n    // Remove oldest entries if cache is full\n    if (this.cache.size >= this.maxSize) {\n      const oldestKey = this.cache.keys().next().value;\n      if (oldestKey) {\n        this.cache.delete(oldestKey);\n      }\n    }\n\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      ttl: ttlSeconds * 1000,\n    });\n  }\n\n  get<T>(key: string): T | null {\n    const entry = this.cache.get(key);\n\n    if (!entry) {\n      return null;\n    }\n\n    // Check if entry has expired\n    if (Date.now() - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.data as T;\n  }\n\n  delete(key: string): boolean {\n    return this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  // Clean up expired entries\n  cleanup(): void {\n    const now = Date.now();\n    for (const [key, entry] of this.cache.entries()) {\n      if (now - entry.timestamp > entry.ttl) {\n        this.cache.delete(key);\n      }\n    }\n  }\n}\n\n// Global cache instance\nexport const cache = new SimpleCache();\n\n// Helper function for cache keys\nexport function getCacheKey(prefix: string, ...parts: (string | number)[]): string {\n  return `${prefix}:${parts.join(':')}`;\n}\n\n// Cleanup expired entries every 5 minutes\nsetInterval(() => {\n  cache.cleanup();\n}, 5 * 60 * 1000);","size_bytes":1606},"src/lib/db.ts":{"content":"import { PrismaClient } from \"../../prisma/generated/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const db = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = db\n","size_bytes":287},"src/lib/prisma-types.ts":{"content":"export { OperationType } from '../../prisma/generated/client'\n\n","size_bytes":63},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nimport { randomBytes } from 'crypto';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function generateApiKey(): string {\n  const bytes = randomBytes(32);\n  return bytes.toString('hex');\n}\n\nexport function formatCurrency(value: number, currency = 'BRL'): string {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency,\n  }).format(value);\n}\n","size_bytes":491},"tests/e2e/admin-credits.spec.ts":{"content":"import { test, expect } from '@playwright/test'\n\ntest.describe('Admin Créditos', () => {\n  test('exibe estatísticas e permite ajustar saldo', async ({ page }) => {\n    const creditBalances = [\n      {\n        id: 'credit-1',\n        user: { id: 'user-1', name: 'Alice Example', email: 'alice@example.com' },\n        creditsRemaining: 120,\n        lastSyncedAt: new Date('2024-09-17T12:00:00Z').toISOString(),\n        _count: { usageHistory: 5 },\n      },\n      {\n        id: 'credit-2',\n        user: { id: 'user-2', name: 'Bruno Teste', email: 'bruno@example.com' },\n        creditsRemaining: 6,\n        lastSyncedAt: new Date('2024-09-16T12:00:00Z').toISOString(),\n        _count: { usageHistory: 11 },\n      },\n    ]\n\n    await page.route('**/api/admin/credits?**', async (route) => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({ creditBalances }),\n      })\n    })\n\n    await page.route('**/api/admin/credits/*', async (route) => {\n      const match = route.request().url().match(/credits\\/(.*)$/)\n      const creditId = match?.[1]\n      const payload = route.request().postDataJSON() as { adjustment: number }\n\n      const balance = creditBalances.find((c) => c.id === creditId)\n      if (balance) {\n        balance.creditsRemaining = Math.max(0, balance.creditsRemaining + payload.adjustment)\n        balance.lastSyncedAt = new Date().toISOString()\n      }\n\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({ ok: true }),\n      })\n    })\n\n    await page.goto('/admin/credits')\n\n    await expect(page.getByRole('heading', { name: 'Gerenciamento de Créditos' })).toBeVisible()\n\n    const totalCardValue = page\n      .locator('p', { hasText: 'Total de Créditos' })\n      .first()\n      .locator('xpath=following-sibling::p[1]')\n    await expect(totalCardValue).toHaveText('126')\n\n    const averageCardValue = page\n      .locator('p', { hasText: 'Saldo Médio' })\n      .first()\n      .locator('xpath=following-sibling::p[1]')\n    await expect(averageCardValue).toHaveText('63')\n\n    const lowCardValue = page\n      .locator('p', { hasText: 'Saldo Baixo' })\n      .first()\n      .locator('xpath=following-sibling::p[1]')\n    await expect(lowCardValue).toHaveText('1')\n\n    const searchInput = page.getByPlaceholder('Pesquisar por usuário...')\n    await searchInput.fill('Bruno')\n    await expect(page.getByText('Bruno Teste')).toBeVisible()\n    await expect(page.getByText('Alice Example')).not.toBeVisible()\n\n    await searchInput.clear()\n    await expect(page.getByText('Alice Example')).toBeVisible()\n\n    const brunoRow = page.locator('tr').filter({ hasText: 'Bruno Teste' })\n    await brunoRow.getByRole('button', { name: 'Ajustar' }).click()\n\n    const dialog = page.getByRole('dialog', { name: 'Ajustar Créditos' })\n    await expect(dialog).toBeVisible()\n    await dialog.getByRole('spinbutton').fill('4')\n    await dialog.getByRole('button', { name: 'Subtrair' }).click()\n\n    const adjustRequest = page.waitForRequest((request) =>\n      request.url().includes('/api/admin/credits/credit-2') && request.method() === 'PUT'\n    )\n    await dialog.getByRole('button', { name: 'Aplicar Ajuste' }).click()\n    await adjustRequest\n\n    await expect(\n      page.getByRole('status').filter({ hasText: 'Créditos ajustados' })\n    ).toBeVisible()\n    await expect(brunoRow.locator('td').nth(1)).toContainText('2')\n  })\n})\n","size_bytes":3474},"tests/e2e/admin-dashboard.spec.ts":{"content":"import { test, expect } from '@playwright/test'\n\ntest.describe('Admin Dashboard', () => {\n  test('exibe métricas principais com dados agregados', async ({ page }) => {\n    const dashboardPayload = {\n      totalUsers: 150,\n      activeUsers: 120,\n      totalCredits: 4500,\n      usedCredits: 2100,\n      mrrSeries: [\n        { label: 'Set', value: 1200 },\n        { label: 'Out', value: 1400 },\n      ],\n      arrSeries: [\n        { label: '2023', value: 12000 },\n        { label: '2024', value: 16800 },\n      ],\n      churnSeries: [\n        { label: 'Set', value: 6 },\n        { label: 'Out', value: 4 },\n      ],\n      recentActivity: [],\n    }\n\n    await page.route('**/api/admin/dashboard', async (route) => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify(dashboardPayload),\n      })\n    })\n\n    await page.goto('/admin')\n\n    await expect(page.getByRole('heading', { name: 'Painel do Administrador' })).toBeVisible()\n\n    const totalUsersCard = page.locator('div').filter({ hasText: 'Total de Usuários' })\n    await expect(totalUsersCard.getByText('150')).toBeVisible()\n\n    const activeUsersCard = page.locator('div').filter({ hasText: 'Usuários Ativos' })\n    await expect(activeUsersCard.getByText('120')).toBeVisible()\n\n    await expect(page.getByText('+16.7 MoM')).toBeVisible()\n    await expect(page.getByRole('heading', { name: 'MRR' })).toBeVisible()\n    await expect(page.getByRole('heading', { name: 'ARR' })).toBeVisible()\n    await expect(page.getByRole('heading', { name: 'Churn' })).toBeVisible()\n  })\n})\n","size_bytes":1600},"tests/e2e/admin-settings.spec.ts":{"content":"import { test, expect } from '@playwright/test'\n\ntest.describe('Admin Configurações', () => {\n  test('permite ajustar custos por funcionalidade', async ({ page }) => {\n    const settings = {\n      featureCosts: {\n        ai_text_chat: 1,\n        ai_image_generation: 5,\n      },\n      planCredits: {\n        starter: 100,\n      },\n    }\n\n    await page.route('**/api/admin/settings', async (route) => {\n      if (route.request().method() === 'GET') {\n        await route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify(settings),\n        })\n        return\n      }\n\n      const body = route.request().postDataJSON() as typeof settings\n      settings.featureCosts = body.featureCosts\n\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({ ok: true }),\n      })\n    })\n\n    await page.goto('/admin/settings/features')\n\n    await expect(page.getByRole('heading', { name: 'Custos por Funcionalidade' })).toBeVisible()\n    const textChatInput = page\n      .locator('label')\n      .filter({ hasText: /ai text chat/i })\n      .first()\n      .locator('..')\n      .locator('input')\n\n    await textChatInput.fill('3')\n    await expect(page.getByText('Alterações não salvas')).toBeVisible()\n\n    const saveRequest = page.waitForRequest('**/api/admin/settings')\n    await page.getByRole('button', { name: 'Salvar Configurações' }).click()\n    await saveRequest\n\n    await expect(\n      page.getByRole('status').filter({ hasText: 'Configurações salvas' })\n    ).toBeVisible()\n    await expect(page.getByText('Alterações não salvas')).not.toBeVisible()\n    await expect(textChatInput).toHaveValue('3')\n  })\n})\n","size_bytes":1733},"tests/e2e/admin-storage.spec.ts":{"content":"import { test, expect } from '@playwright/test'\n\ntest.describe('Admin Armazenamento', () => {\n  test('filtra arquivos e remove objeto', async ({ page }) => {\n    const items = [\n      {\n        id: 'file-1',\n        name: 'invoice.pdf',\n        contentType: 'application/pdf',\n        size: 150_000,\n        url: 'https://files.example.com/invoice.pdf',\n        pathname: '/uploads/invoice.pdf',\n        createdAt: new Date('2024-09-18T10:00:00Z').toISOString(),\n        user: { id: 'user-1', clerkId: 'clerk_1', name: 'Alice Example', email: 'alice@example.com' },\n      },\n      {\n        id: 'file-2',\n        name: 'summary.txt',\n        contentType: 'text/plain',\n        size: 4_096,\n        url: 'https://files.example.com/summary.txt',\n        pathname: '/uploads/summary.txt',\n        createdAt: new Date('2024-09-17T15:00:00Z').toISOString(),\n        user: { id: 'user-2', clerkId: 'clerk_2', name: 'Bruno Teste', email: 'bruno@example.com' },\n      },\n    ]\n\n    await page.route('**/api/admin/storage?**', async (route) => {\n      const url = new URL(route.request().url())\n      const q = url.searchParams.get('q')?.toLowerCase() ?? ''\n      const type = url.searchParams.get('type') || undefined\n      const userId = url.searchParams.get('userId') || undefined\n\n      let filtered = items\n      if (q) {\n        filtered = filtered.filter((item) => {\n          const haystack = [\n            item.name,\n            item.contentType ?? '',\n            item.url,\n            item.pathname,\n            item.user.name ?? '',\n            item.user.email ?? '',\n          ]\n            .join(' ')\n            .toLowerCase()\n\n          return haystack.includes(q)\n        })\n      }\n\n      if (type && type !== 'all') {\n        filtered = filtered.filter((item) => item.contentType === type)\n      }\n\n      if (userId && userId !== 'all') {\n        filtered = filtered.filter((item) => item.user.id === userId)\n      }\n\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({ items: filtered, nextCursor: null }),\n      })\n    })\n\n    await page.route('**/api/admin/storage/*', async (route) => {\n      const match = route.request().url().match(/storage\\/(.*)$/)\n      const targetId = match?.[1]\n      const index = items.findIndex((item) => item.id === targetId)\n\n      if (index >= 0) {\n        items.splice(index, 1)\n      }\n\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({ ok: true }),\n      })\n    })\n\n    await page.goto('/admin/storage')\n\n    await expect(page.getByRole('heading', { name: 'Armazenamento' })).toBeVisible()\n    const invoiceRow = page.locator('tr').filter({ hasText: 'invoice.pdf' })\n    const summaryRow = page.locator('tr').filter({ hasText: 'summary.txt' })\n    await expect(invoiceRow).toBeVisible()\n    await expect(summaryRow).toBeVisible()\n\n    const searchInput = page.getByPlaceholder('Pesquisar por nome, tipo, URL, nome/email do usuário...')\n    await searchInput.fill('summary')\n    await expect(summaryRow).toBeVisible()\n    await expect(invoiceRow).not.toBeVisible()\n\n    await searchInput.fill('')\n    await expect(invoiceRow).toBeVisible()\n    const deleteRequest = page.waitForRequest((request) =>\n      request.url().includes('/api/admin/storage/file-2') && request.method() === 'DELETE'\n    )\n\n    page.once('dialog', async (dialog) => {\n      expect(dialog.type()).toBe('confirm')\n      await dialog.accept()\n    })\n\n    await summaryRow.locator('button').last().click()\n\n    await deleteRequest\n\n    await expect(\n      page.getByRole('status').filter({ hasText: 'Objeto excluído' })\n    ).toBeVisible()\n    await expect(summaryRow).not.toBeVisible()\n  })\n})\n","size_bytes":3753},"tests/e2e/admin-usage.spec.ts":{"content":"import { test, expect } from '@playwright/test'\n\ntest.describe('Admin Uso', () => {\n  test('filtra histórico e visualiza detalhes de operações', async ({ page }) => {\n    const usageRecords = [\n      {\n        id: 'usage-1',\n        user: { name: 'Alice Example', email: 'alice@example.com' },\n        operationType: 'AI_TEXT_CHAT',\n        creditsUsed: 3,\n        details: { prompt: 'Write a tweet' },\n        timestamp: new Date('2024-09-18T12:00:00Z').toISOString(),\n      },\n      {\n        id: 'usage-2',\n        user: { name: 'Bruno Teste', email: 'bruno@example.com' },\n        operationType: 'AI_IMAGE_GENERATION',\n        creditsUsed: 5,\n        details: { prompt: 'Create hero image', size: '1024x1024' },\n        timestamp: new Date('2024-09-18T13:00:00Z').toISOString(),\n      },\n    ]\n\n    await page.route('**/api/admin/usage?**', async (route) => {\n      const url = new URL(route.request().url())\n      const type = url.searchParams.get('type') || undefined\n      const query = url.searchParams.get('q')?.toLowerCase() ?? ''\n      const pageParam = Number(url.searchParams.get('page') ?? '1')\n      const pageSizeParam = Number(url.searchParams.get('pageSize') ?? '25')\n\n      let filtered = usageRecords\n      if (type) {\n        filtered = filtered.filter((record) => record.operationType === type)\n      }\n      if (query) {\n        filtered = filtered.filter(\n          (record) =>\n            record.user.name.toLowerCase().includes(query) ||\n            record.user.email.toLowerCase().includes(query),\n        )\n      }\n\n      const start = (pageParam - 1) * pageSizeParam\n      const data = filtered.slice(start, start + pageSizeParam)\n\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          data,\n          total: filtered.length,\n          page: pageParam,\n          pageSize: pageSizeParam,\n        }),\n      })\n    })\n\n    await page.goto('/admin/usage')\n\n    await expect(page.getByRole('heading', { name: 'Histórico de Uso' })).toBeVisible()\n\n    const totalsCardValue = page\n      .locator('p', { hasText: 'Total de Operações' })\n      .first()\n      .locator('xpath=following-sibling::p[1]')\n    await expect(totalsCardValue).toHaveText('2')\n\n    const creditsCardValue = page\n      .locator('p', { hasText: 'Créditos Consumidos' })\n      .first()\n      .locator('xpath=following-sibling::p[1]')\n    await expect(creditsCardValue).toHaveText('8')\n\n    await expect(page.getByText('alice@example.com')).toBeVisible()\n    await expect(page.getByText('bruno@example.com')).toBeVisible()\n\n    const typeSelect = page.getByRole('combobox').first()\n    await typeSelect.click()\n    await page.getByRole('option', { name: 'Chat de Texto' }).click()\n\n    await expect(page.getByText('alice@example.com')).toBeVisible()\n    await expect(page.getByText('bruno@example.com')).not.toBeVisible()\n\n    await typeSelect.click()\n    await page.getByRole('option', { name: 'Todas as Operações' }).click()\n\n    const searchInput = page.getByPlaceholder('Pesquisar por usuário...')\n    await searchInput.fill('bruno')\n    await expect(page.getByText('bruno@example.com')).toBeVisible()\n    await expect(page.getByText('alice@example.com')).not.toBeVisible()\n\n    await searchInput.fill('')\n    await expect(page.getByText('alice@example.com')).toBeVisible()\n\n    const detailsButton = page.getByRole('button', { name: 'Ver' }).first()\n    await detailsButton.click()\n\n    const dialog = page.getByRole('dialog', { name: 'Detalhes da Operação' })\n    await expect(dialog).toBeVisible()\n    await expect(dialog.getByText('\"prompt\": \"Write a tweet\"')).toBeVisible()\n\n    await dialog.getByRole('button', { name: 'Fechar' }).click()\n    await expect(dialog).not.toBeVisible()\n  })\n})\n","size_bytes":3781},"tests/e2e/admin-users.spec.ts":{"content":"import { test, expect } from '@playwright/test'\n\ntest.describe('Admin Usuários', () => {\n  test('permite buscar, ajustar créditos e convidar usuários', async ({ page }) => {\n    const users = [\n      {\n        id: 'user-1',\n        clerkId: 'clerk_1',\n        name: 'Alice Example',\n        email: 'alice@example.com',\n        createdAt: new Date('2024-09-01T12:00:00Z').toISOString(),\n        isActive: true,\n        creditBalance: { creditsRemaining: 120 },\n        _count: { usageHistory: 8 },\n      },\n      {\n        id: 'user-2',\n        clerkId: 'clerk_2',\n        name: 'Bruno Teste',\n        email: 'bruno@example.com',\n        createdAt: new Date('2024-07-15T12:00:00Z').toISOString(),\n        isActive: false,\n        creditBalance: { creditsRemaining: 5 },\n        _count: { usageHistory: 12 },\n      },\n    ]\n\n    const invitations = [\n      {\n        id: 'inv-1',\n        emailAddress: 'pessoa@exemplo.com',\n        status: 'pending',\n        createdAt: new Date('2024-09-10T12:00:00Z').toISOString(),\n        expiresAt: new Date('2024-10-10T12:00:00Z').toISOString(),\n      },\n    ]\n\n    await page.route('**/api/admin/users?**', async (route) => {\n      const url = new URL(route.request().url())\n      const search = url.searchParams.get('search')?.toLowerCase() ?? ''\n      const filtered = search\n        ? users.filter((user) =>\n            user.name.toLowerCase().includes(search) ||\n            user.email.toLowerCase().includes(search),\n          )\n        : users\n\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          users: filtered,\n          pagination: {\n            page: 1,\n            pageSize: filtered.length,\n            total: filtered.length,\n            pages: 1,\n          },\n        }),\n      })\n    })\n\n    await page.route('**/api/admin/users/invitations', async (route) => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({ invitations }),\n      })\n    })\n\n    await page.route('**/api/admin/users/*/credits', async (route) => {\n      const requestUrl = route.request().url()\n      const [, userId] = requestUrl.match(/users\\/(.*)\\/credits/) || []\n      const payload = route.request().postDataJSON() as { credits: number }\n\n      const target = users.find((user) => user.id === userId)\n      if (target && typeof payload?.credits === 'number') {\n        target.creditBalance = { creditsRemaining: payload.credits }\n      }\n\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({ success: true }),\n      })\n    })\n\n    await page.route('**/api/admin/users/invite', async (route) => {\n      const body = route.request().postDataJSON() as { email: string; name?: string }\n      invitations.push({\n        id: `inv-${invitations.length + 1}`,\n        emailAddress: body.email,\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n      })\n\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({ status: 'invited' }),\n      })\n    })\n\n    await page.goto('/admin/users')\n\n    await expect(page.getByRole('heading', { name: 'Usuários' })).toBeVisible()\n    await expect(page.getByText('Alice Example')).toBeVisible()\n    await expect(page.getByText('Bruno Teste')).toBeVisible()\n\n    const searchInput = page.getByPlaceholder('Pesquisar usuários...')\n    await searchInput.fill('Bruno')\n    await expect(page.getByText('Bruno Teste')).toBeVisible()\n    await expect(page.getByText('Alice Example')).not.toBeVisible()\n\n    await searchInput.fill('')\n    await expect(page.getByText('Alice Example')).toBeVisible()\n\n    const aliceRow = page.locator('tr').filter({ hasText: 'Alice Example' })\n    await aliceRow.getByRole('button').last().click()\n\n    const dialogPromise = new Promise<void>((resolve) => {\n      page.once('dialog', async (dialog) => {\n        expect(dialog.type()).toBe('prompt')\n        await dialog.accept('200')\n        resolve()\n      })\n    })\n\n    await page.getByRole('menuitem', { name: 'Ajustar Créditos' }).click()\n    await dialogPromise\n\n    await expect(\n      page.getByRole('status').filter({ hasText: 'Créditos atualizados' })\n    ).toBeVisible()\n    await expect(aliceRow.getByText('200')).toBeVisible()\n\n    await page.getByRole('button', { name: 'Adicionar Usuário' }).click()\n    await page.getByLabel('E-mail').fill('nova.pessoa@example.com')\n    await page.getByLabel('Nome (opcional)').fill('Nova Pessoa')\n\n    const inviteRequest = page.waitForRequest('**/api/admin/users/invite')\n    await page.getByRole('button', { name: 'Enviar Convite' }).click()\n    await inviteRequest\n\n    await expect(\n      page.getByRole('status').filter({ hasText: 'Convite enviado' })\n    ).toBeVisible()\n\n    await page.getByRole('tab', { name: 'Convites Pendentes' }).click()\n    const invitesPanel = page.getByRole('tabpanel', { name: 'Convites Pendentes' })\n    await expect(\n      invitesPanel.getByRole('cell', { name: 'nova.pessoa@example.com' })\n    ).toBeVisible()\n  })\n})\n","size_bytes":5229},"src/app/(protected)/layout.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport { useAuth } from \"@clerk/nextjs\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { cn } from \"@/lib/utils\";\nimport { Sidebar } from \"@/components/app/sidebar\";\nimport { Topbar } from \"@/components/app/topbar\";\nimport { PageHeader } from \"@/components/app/page-header\";\nimport { PageMetadataProvider } from \"@/contexts/page-metadata\";\n// Subscription system removed - manual access control only\n\nexport default function ProtectedLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const { isLoaded, isSignedIn } = useAuth();\n  const pathname = usePathname();\n  const router = useRouter();\n  const [collapsed, setCollapsed] = React.useState(false);\n\n  // Subscription system removed - all authenticated users have access\n\n  // hydrate from localStorage\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    const saved = window.localStorage.getItem(\"app.sidebarCollapsed\");\n    if (saved != null) setCollapsed(saved === \"true\");\n  }, []);\n\n  const toggleCollapse = React.useCallback(() => {\n    setCollapsed((c) => {\n      const next = !c;\n      if (typeof window !== \"undefined\") {\n        window.localStorage.setItem(\"app.sidebarCollapsed\", String(next));\n      }\n      return next;\n    });\n  }, []);\n\n  // Redirect to sign-in if not authenticated\n  React.useEffect(() => {\n    if (isLoaded && !isSignedIn) {\n      router.replace(\"/sign-in\");\n    }\n  }, [isLoaded, isSignedIn, router]);\n\n  // Optional: Show subscription prompt for premium features only\n  // Users can access all FiiAI agents without forced subscription\n\n  // Show loading state while checking authentication\n  if (!isLoaded) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Authenticated layout with sidebar\n  return (\n    <PageMetadataProvider>\n      <div className=\"min-h-dvh w-full text-foreground\">\n        <div className=\"flex\">\n          <Sidebar collapsed={collapsed} onToggle={toggleCollapse} />\n          <div className=\"flex min-h-dvh flex-1 flex-col p-4\">\n            <Topbar onToggleSidebar={toggleCollapse} sidebarCollapsed={collapsed} />\n            <main\n              className={cn(\n                \"container mx-auto w-full max-w-[1400px] pb-10 pt-6\"\n              )}\n            >\n              {/* layered glow behind the main content for futuristic feel */}\n              <div className=\"relative\">\n                <div\n                  className=\"pointer-events-none absolute -inset-6 -z-10 rounded-2xl\"\n                  style={{\n                    background:\n                      \"radial-gradient(60% 40% at 10% 0%, color-mix(in oklch, var(--neon) 20%, transparent), transparent 70%), radial-gradient(50% 40% at 90% 10%, color-mix(in oklch, var(--neon-2) 18%, transparent), transparent 70%)\",\n                    filter: \"blur(30px)\",\n                    opacity: 0.6,\n                  }}\n                  aria-hidden=\"true\"\n                />\n                <div className=\"glass-panel border-border/40 bg-card/30 p-6\">\n                  <PageHeader />\n                  {children}\n                </div>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    </PageMetadataProvider>\n  );\n}\n","size_bytes":3390},"src/app/(public)/layout.tsx":{"content":"import { PublicHeader } from \"@/components/app/public-header\"\nimport { PublicFooter } from \"@/components/app/public-footer\"\nimport { CookieConsent } from \"@/components/app/cookie-consent\"\n\nexport default function PublicLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <div className=\"min-h-dvh w-full bg-background text-foreground\">\n      <PublicHeader />\n      <main>{children}</main>\n      <PublicFooter />\n      <CookieConsent />\n    </div>\n  );\n}\n","size_bytes":477},"src/app/(public)/page.tsx":{"content":"import { FiiHero } from \"@/components/fii/hero\"\nimport { FiiFeatures } from \"@/components/fii/features\"\nimport { FiiAgents } from \"@/components/fii/agent-card\"\nimport { AccessInfo } from \"@/components/marketing/access-info\"\n\nexport default async function LandingPage() {\n  return (\n    <div className=\"min-h-screen\">\n      <FiiHero />\n      <FiiFeatures />\n      <FiiAgents />\n      <AccessInfo />\n    </div>\n  )\n}\n","size_bytes":415},"src/app/admin/layout.tsx":{"content":"import { redirect } from \"next/navigation\"\nimport { auth } from \"@clerk/nextjs/server\"\nimport { isAdmin } from \"@/lib/admin-utils\"\nimport { AdminSidebar } from \"@/components/admin/admin-sidebar\"\nimport { AdminTopbar } from \"@/components/admin/admin-topbar\"\nimport { SidebarInset, SidebarProvider } from \"@/components/ui/sidebar\"\n\nexport default async function AdminLayout({ children }: { children: React.ReactNode }) {\n  if (process.env.E2E_AUTH_BYPASS === '1') {\n    return (\n      <SidebarProvider>\n        <AdminSidebar />\n        <SidebarInset>\n          <div className=\"flex min-h-svh flex-col\">\n            <AdminTopbar />\n            <main className=\"flex-1 overflow-y-auto p-6\">\n              <div className=\"container mx-auto max-w-7xl\">{children}</div>\n            </main>\n          </div>\n        </SidebarInset>\n      </SidebarProvider>\n    )\n  }\n\n  const { userId } = await auth()\n  if (!userId || !(await isAdmin(userId))) {\n    redirect(\"/dashboard\")\n  }\n\n  return (\n    <SidebarProvider>\n      <AdminSidebar />\n      <SidebarInset>\n        <div className=\"flex min-h-svh flex-col\">\n          <AdminTopbar />\n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <div className=\"container mx-auto max-w-7xl\">{children}</div>\n          </main>\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n  )\n}\n","size_bytes":1338},"src/app/admin/page.tsx":{"content":"\"use client\";\n\nimport { Card } from \"@/components/ui/card\";\nimport {\n  Users,\n  TrendingUp,\n  Activity\n} from \"lucide-react\";\nimport { MrrBarChart, ArrBarChart, ChurnLineChart } from \"@/components/charts/revenue-charts\";\nimport { useDashboard } from \"@/hooks/use-dashboard\";\n\nexport default function AdminDashboard() {\n  const { data: stats, isLoading, error } = useDashboard();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <p className=\"text-muted-foreground\">Failed to load dashboard data</p>\n          <p className=\"text-sm text-destructive mt-1\">\n            {error instanceof Error ? error.message : 'Unknown error'}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-start justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Painel do Administrador</h1>\n          <p className=\"text-muted-foreground mt-2\">Visão geral do sistema e análises</p>\n        </div>\n        <div />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-muted-foreground text-sm\">Total de Usuários</p>\n              <p className=\"text-2xl font-bold text-foreground mt-1\">\n                {stats?.totalUsers || 0}\n              </p>\n            </div>\n            <Users className=\"h-8 w-8 text-blue-500\" />\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n            <span className=\"text-green-500\">+12%</span>\n            <span className=\"text-muted-foreground ml-2\">do último mês</span>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-muted-foreground text-sm\">Usuários Ativos</p>\n              <p className=\"text-2xl font-bold text-foreground mt-1\">\n                {stats?.activeUsers || 0}\n              </p>\n            </div>\n            <Activity className=\"h-8 w-8 text-green-500\" />\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n            <span className=\"text-green-500\">+8%</span>\n            <span className=\"text-muted-foreground ml-2\">da última semana</span>\n          </div>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card className=\"p-6\">\n          <div className=\"mb-4 flex items-center justify-between gap-3\">\n            <div>\n              <h2 className=\"text-xl font-semibold text-foreground\">MRR</h2>\n              <p className=\"text-sm text-muted-foreground\">Receita Recorrente Mensal</p>\n            </div>\n            {stats?.mrrSeries && <DeltaBadge series={stats.mrrSeries} goodWhenPositive />}\n          </div>\n          {stats?.mrrSeries && <MrrBarChart data={stats.mrrSeries} />}\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"mb-4 flex items-center justify-between gap-3\">\n            <div>\n              <h2 className=\"text-xl font-semibold text-foreground\">ARR</h2>\n              <p className=\"text-sm text-muted-foreground\">Receita Recorrente Anual</p>\n            </div>\n            {stats?.arrSeries && <DeltaBadge series={stats.arrSeries} goodWhenPositive />}\n          </div>\n          {stats?.arrSeries && <ArrBarChart data={stats.arrSeries} />}\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"mb-4 flex items-center justify-between gap-3\">\n            <div>\n              <h2 className=\"text-xl font-semibold text-foreground\">Churn</h2>\n              <p className=\"text-sm text-muted-foreground\">Taxa de cancelamento de clientes</p>\n            </div>\n            {stats?.churnSeries && <DeltaBadge series={stats.churnSeries} goodWhenPositive={false} suffix=\"%\" />}\n          </div>\n          {stats?.churnSeries && <ChurnLineChart data={stats.churnSeries} />}\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nfunction DeltaBadge({ series, goodWhenPositive = true, suffix = \"\" }: { series: { label: string; value: number }[]; goodWhenPositive?: boolean; suffix?: string }) {\n  if (!series || series.length < 2) return null\n  const last = series[series.length - 1].value\n  const prev = series[series.length - 2].value\n  const deltaRaw = last - prev\n  const deltaPct = prev === 0 ? (last > 0 ? 100 : 0) : (deltaRaw / prev) * 100\n  const isGood = goodWhenPositive ? deltaPct > 0 : deltaPct < 0\n  const isBad = goodWhenPositive ? deltaPct < 0 : deltaPct > 0\n  const color = isGood ? \"emerald\" : isBad ? \"red\" : \"zinc\"\n  const sign = deltaPct > 0 ? \"+\" : \"\"\n\n  return (\n    <span\n      className={\n        `inline-flex items-center rounded-md border px-2 py-0.5 text-xs font-medium ` +\n        (color === 'emerald'\n          ? 'border-emerald-500/20 bg-emerald-500/10 text-emerald-600'\n          : color === 'red'\n          ? 'border-red-500/20 bg-red-500/10 text-red-600'\n          : 'border-muted bg-muted/50 text-foreground/60')\n      }\n      title=\"Variação mês a mês\"\n    >\n      {`${sign}${deltaPct.toFixed(1)}${suffix} MoM`}\n    </span>\n  )\n}\n\n// Removed seed/backfill demo buttons to simplify admin surface\n","size_bytes":5709},"src/components/admin/admin-sidebar.tsx":{"content":"\"use client\";\n\nimport Link from \"next/link\";\nimport type { ElementType } from \"react\";\nimport { usePathname } from \"next/navigation\";\nimport {\n  Activity,\n  CreditCard,\n  LayoutDashboard,\n  Shield,\n  SlidersHorizontal,\n  Users,\n  DollarSign,\n} from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarRail,\n  SidebarSeparator,\n} from \"@/components/ui/sidebar\";\n\ntype Item = { title: string; href: string; icon: ElementType };\n\nconst overview: Item[] = [\n  { title: \"Painel\", href: \"/admin\", icon: LayoutDashboard },\n];\nconst management: Item[] = [\n  { title: \"Usuários\", href: \"/admin/users\", icon: Users },\n  { title: \"Créditos\", href: \"/admin/credits\", icon: CreditCard },\n  { title: \"Armazenamento\", href: \"/admin/storage\", icon: CreditCard },\n];\nconst reports: Item[] = [\n  { title: \"Histórico de Uso\", href: \"/admin/usage\", icon: Activity },\n];\nconst settings: Item[] = [\n  { title: \"Custos por Funcionalidade\", href: \"/admin/settings/features\", icon: SlidersHorizontal },\n  { title: \"Planos de Assinatura\", href: \"/admin/settings/plans\", icon: DollarSign },\n];\n\nfunction NavList({ items, pathname }: { items: Item[]; pathname: string }) {\n  return (\n    <SidebarMenu>\n      {items.map((item) => {\n        const isActive =\n          pathname === item.href ||\n          (item.href !== \"/admin\" && pathname.startsWith(item.href));\n        const Icon = item.icon;\n        return (\n          <SidebarMenuItem key={item.href}>\n            <SidebarMenuButton asChild isActive={isActive} tooltip={item.title}>\n              <Link href={item.href}>\n                <Icon />\n                <span>{item.title}</span>\n              </Link>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        );\n      })}\n    </SidebarMenu>\n  );\n}\n\nexport function AdminSidebar() {\n  const pathname = usePathname();\n\n  return (\n    <Sidebar collapsible=\"icon\">\n      <SidebarHeader className=\"py-3\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex h-9 w-9 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground\">\n            <Shield className=\"h-5 w-5\" />\n          </div>\n          <span className=\"text-base font-semibold tracking-tight group-data-[collapsible=icon]:hidden\">Painel Admin</span>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Visão Geral</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <NavList items={overview} pathname={pathname} />\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarSeparator />\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Gerenciamento</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <NavList items={management} pathname={pathname} />\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Relatórios</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <NavList items={reports} pathname={pathname} />\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Configurações</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <NavList items={settings} pathname={pathname} />\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton asChild tooltip=\"Voltar ao App\">\n              <Link href=\"/dashboard\">\n                <span>Voltar ao App</span>\n              </Link>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n\n      <SidebarRail />\n    </Sidebar>\n  );\n}\n","size_bytes":3881},"src/components/admin/admin-topbar.tsx":{"content":"\"use client\";\n\nimport { UserButton } from \"@clerk/nextjs\";\n import { SidebarTrigger } from \"@/components/ui/sidebar\";\n\nexport function AdminTopbar() {\n  return (\n    <div className=\"h-16 bg-background/70 backdrop-blur border-b border-border px-4 md:px-6 flex items-center justify-between gap-3\">\n      <div className=\"flex items-center gap-3 flex-1\">\n        <SidebarTrigger />\n       \n      </div>\n      \n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"text-right\">\n            <p className=\"text-sm font-medium text-foreground\">Admin</p>\n            <p className=\"text-xs text-muted-foreground\">Super Administrator</p>\n          </div>\n          <UserButton />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":793},"src/components/analytics/pixels.tsx":{"content":"\"use client\"\n\nimport Script from \"next/script\"\nimport { site } from \"@/lib/brand-config\"\nimport * as React from \"react\"\n\nexport function AnalyticsPixels() {\n  const { gtmId, gaMeasurementId, facebookPixelId } = site.analytics\n  const [enabled, setEnabled] = React.useState(false)\n\n  React.useEffect(() => {\n    const hasConsent = document.cookie.split(\";\").some((c) => c.trim().startsWith(\"cookie_consent=1\"))\n    setEnabled(hasConsent)\n    const onAccept = () => setEnabled(true)\n    window.addEventListener('cookie-consent-accepted', onAccept)\n    return () => window.removeEventListener('cookie-consent-accepted', onAccept)\n  }, [])\n\n  if (!enabled) return null\n\n  return (\n    <>\n      {gtmId ? (\n        <>\n          <Script id=\"gtm-script\" strategy=\"afterInteractive\">\n            {`(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n            j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n            'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n            })(window,document,'script','dataLayer','${gtmId}');`}\n          </Script>\n          {/* GTM noscript fallback */}\n          <noscript>\n            <iframe\n              src={`https://www.googletagmanager.com/ns.html?id=${gtmId}`}\n              height=\"0\"\n              width=\"0\"\n              style={{ display: 'none', visibility: 'hidden' }}\n            />\n          </noscript>\n        </>\n      ) : null}\n\n      {gaMeasurementId ? (\n        <>\n          <Script\n            src={`https://www.googletagmanager.com/gtag/js?id=${gaMeasurementId}`}\n            strategy=\"afterInteractive\"\n          />\n          <Script id=\"ga4-script\" strategy=\"afterInteractive\">\n            {`window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', '${gaMeasurementId}');`}\n          </Script>\n        </>\n      ) : null}\n\n      {facebookPixelId ? (\n        <>\n          <Script id=\"fb-pixel\" strategy=\"afterInteractive\">\n            {`!function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?\n              n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;\n              n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;\n              t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window, document,'script',\n              'https://connect.facebook.net/en_US/fbevents.js');\n              fbq('init', '${facebookPixelId}');\n              fbq('track', 'PageView');`}\n          </Script>\n          <noscript>\n            {/* eslint-disable-next-line @next/next/no-img-element */}\n            <img\n              height=\"1\"\n              width=\"1\"\n              style={{ display: 'none' }}\n              src={`https://www.facebook.com/tr?id=${facebookPixelId}&ev=PageView&noscript=1`}\n              alt=\"\"\n            />\n          </noscript>\n        </>\n      ) : null}\n    </>\n  )\n}\n","size_bytes":3101},"src/components/app/app-shell.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport { useAuth } from \"@clerk/nextjs\";\nimport { cn } from \"@/lib/utils\";\nimport { Sidebar } from \"@/components/app/sidebar\";\nimport { Topbar } from \"@/components/app/topbar\";\nimport { PublicHeader } from \"@/components/app/public-header\";\n\nexport function AppShell({ children }: { children: React.ReactNode }) {\n  const { isSignedIn } = useAuth();\n  const [collapsed, setCollapsed] = React.useState(false);\n\n  // hydrate from localStorage\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    const saved = window.localStorage.getItem(\"app.sidebarCollapsed\");\n    if (saved != null) setCollapsed(saved === \"true\");\n  }, []);\n\n  const toggleCollapse = React.useCallback(() => {\n    setCollapsed((c) => {\n      const next = !c;\n      if (typeof window !== \"undefined\") {\n        window.localStorage.setItem(\"app.sidebarCollapsed\", String(next));\n      }\n      return next;\n    });\n  }, []);\n\n\n  // Non-authenticated layout (no sidebar)\n  if (!isSignedIn) {\n    return (\n      <div className=\"min-h-dvh w-full bg-background text-foreground\">\n        <PublicHeader />\n        <main>\n          {children}\n        </main>\n      </div>\n    );\n  }\n\n  // Authenticated layout (with sidebar)\n  return (\n    <div className=\"min-h-dvh w-full bg-background text-foreground\">\n      <div className=\"flex gap-2\">\n        {/* Desktop sidebar */}\n        <Sidebar collapsed={collapsed} onToggle={toggleCollapse} />\n        <div className=\"flex min-h-dvh flex-1 flex-col\">\n          <Topbar onToggleSidebar={toggleCollapse} sidebarCollapsed={collapsed} />\n          <main\n            className={cn(\n              \"container mx-auto w-full max-w-[1400px] px-4 pb-10 pt-6\"\n            )}\n          >\n            {/* layered glow behind the main content for futuristic feel */}\n            <div className=\"relative\">\n              <div\n                className=\"pointer-events-none absolute -inset-6 -z-10 rounded-2xl\"\n                style={{\n                  background:\n                    \"radial-gradient(60% 40% at 10% 0%, color-mix(in oklch, var(--neon) 20%, transparent), transparent 70%), radial-gradient(50% 40% at 90% 10%, color-mix(in oklch, var(--neon-2) 18%, transparent), transparent 70%)\",\n                  filter: \"blur(30px)\",\n                  opacity: 0.6,\n                }}\n                aria-hidden=\"true\"\n              />\n              <div className=\"glass-panel border-border/40 bg-card/30\">\n                {children}\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2603},"src/components/app/cookie-consent.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Button } from \"@/components/ui/button\"\n\nconst CONSENT_COOKIE = \"cookie_consent\"\n\nfunction hasConsent() {\n  if (typeof document === \"undefined\") return false\n  return document.cookie.split(\";\").some((c) => c.trim().startsWith(`${CONSENT_COOKIE}=1`))\n}\n\nfunction setConsentCookie() {\n  if (typeof document === \"undefined\") return\n  const oneYear = 60 * 60 * 24 * 365\n  const secure = typeof window !== 'undefined' && window.location.protocol === 'https:' ? '; Secure' : ''\n  document.cookie = `${CONSENT_COOKIE}=1; Max-Age=${oneYear}; Path=/; SameSite=Lax${secure}`\n}\n\nexport function CookieConsent() {\n  const [visible, setVisible] = React.useState(false)\n\n  React.useEffect(() => {\n    setVisible(!hasConsent())\n  }, [])\n\n  const onAccept = React.useCallback(() => {\n    setConsentCookie()\n    setVisible(false)\n    // dispatch an event so listeners (e.g., analytics) can react\n    if (typeof window !== 'undefined') {\n      window.dispatchEvent(new CustomEvent('cookie-consent-accepted'))\n    }\n  }, [])\n\n  if (!visible) return null\n\n  return (\n    <div className=\"fixed inset-x-0 bottom-0 z-50\">\n      <div className=\"mx-auto max-w-[900px] rounded-t-xl border bg-card/95 p-4 shadow-lg backdrop-blur supports-[backdrop-filter]:bg-card/75\">\n        <div className=\"flex flex-col items-start gap-3 md:flex-row md:items-center md:justify-between\">\n          <p className=\"text-sm text-muted-foreground\">\n            Nós usamos cookies para melhorar sua experiência, analisar o uso e entregar conteúdo relevante. Ao clicar em Aceitar, você concorda com nosso uso de cookies.\n          </p>\n          <div className=\"flex items-center gap-2\">\n            <Button size=\"sm\" onClick={onAccept}>\n              Aceitar\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":1854},"src/components/app/page-header.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { ChevronRight } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { usePageMetadata } from \"@/contexts/page-metadata\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PageHeaderProps {\n  className?: string;\n}\n\nexport function PageHeader({ className }: PageHeaderProps) {\n  const pathname = usePathname();\n  const { metadata } = usePageMetadata();\n  \n  // Gerar breadcrumbs automaticamente se não forem fornecidos\n  const generateAutoBreadcrumbs = (): BreadcrumbItem[] => {\n    const segments = pathname.split(\"/\").filter(Boolean);\n    const breadcrumbs: BreadcrumbItem[] = [\n      { label: \"Início\", href: \"/dashboard\" }\n    ];\n    \n    segments.forEach((segment, index) => {\n      if (segment === \"dashboard\" && index === 0) return;\n      \n      const href = `/${segments.slice(0, index + 1).join(\"/\")}`;\n      const label = segment\n        .split(\"-\")\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(\" \");\n      \n      breadcrumbs.push({ label, href });\n    });\n    \n    return breadcrumbs;\n  };\n  \n  const breadcrumbs = metadata.breadcrumbs || generateAutoBreadcrumbs();\n  const showBreadcrumbs = metadata.showBreadcrumbs !== false;\n  \n  // Se não houver título e descrição, não renderizar nada\n  if (!metadata.title && !metadata.description && !showBreadcrumbs) {\n    return null;\n  }\n  \n  return (\n    <div className={cn(\"space-y-4 mb-6\", className)}>\n      {/* Breadcrumbs */}\n      {showBreadcrumbs && breadcrumbs.length > 0 && (\n        <nav aria-label=\"Breadcrumb\" className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n          {breadcrumbs.map((item, index) => {\n            const isLast = index === breadcrumbs.length - 1;\n            \n            return (\n              <React.Fragment key={`${item.label}-${index}`}>\n                {index > 0 && <ChevronRight className=\"h-4 w-4\" />}\n                {isLast || !item.href ? (\n                  <span className=\"text-foreground font-medium\">{item.label}</span>\n                ) : (\n                  <Link href={item.href} className=\"hover:text-foreground transition-colors\">\n                    {item.label}\n                  </Link>\n                )}\n              </React.Fragment>\n            );\n          })}\n        </nav>\n      )}\n      \n      {/* Título e Descrição */}\n      {(metadata.title || metadata.description) && (\n        <div>\n          {metadata.title && (\n            <h1 className=\"text-3xl font-bold\">{metadata.title}</h1>\n          )}\n          {metadata.description && (\n            <p className=\"text-muted-foreground mt-2\">{metadata.description}</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface BreadcrumbItem {\n  label: string;\n  href?: string;\n}\n","size_bytes":2823},"src/components/app/public-footer.tsx":{"content":"import Link from \"next/link\"\nimport { site } from \"@/lib/brand-config\"\n\nexport function PublicFooter() {\n  return (\n    <footer className=\"border-t mt-24\">\n      <div className=\"container mx-auto px-4 py-10 text-sm text-muted-foreground flex flex-col md:flex-row gap-4 items-center justify-between\">\n        <p>\n          © 2025 {site.name}. Todos os direitos reservados. Feito por <Link className=\"hover:text-foreground\" href=\"https://aicoders.academy\">AI Coders Academy</Link>\n        </p>\n        <nav className=\"flex items-center gap-6\">\n          <Link className=\"hover:text-foreground\" href=\"#features\">Funcionalidades</Link>\n          <Link className=\"hover:text-foreground\" href=\"#pricing\">Preços</Link>\n          <Link className=\"hover:text-foreground\" href=\"#faq\">FAQ</Link>\n          <Link className=\"hover:text-foreground\" href=\"/sign-in\">Entrar</Link>\n        </nav>\n      </div>\n    </footer>\n  )\n}\n","size_bytes":915},"src/components/app/public-header.tsx":{"content":"\"use client\";\n\nimport React from 'react'\nimport Link from 'next/link'\nimport { Menu, X } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport { site } from '@/lib/brand-config'\n\nconst menuItems = [\n  { name: 'Recursos', href: '#recursos' },\n  { name: 'Agentes', href: '#agentes' },\n  { name: 'Planos', href: '#pricing' },\n  { name: 'Dashboard', href: '/dashboard' },\n]\n\nexport function PublicHeader() {\n  const [menuState, setMenuState] = React.useState(false)\n  const [isScrolled, setIsScrolled] = React.useState(false)\n\n  React.useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50)\n    }\n    window.addEventListener('scroll', handleScroll)\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, [])\n\n  return (\n    <header>\n      <nav\n        data-state={menuState && 'active'}\n        className=\"fixed z-20 w-full px-2 group\">\n        <div className={cn('mx-auto mt-2 max-w-6xl px-6 transition-all duration-300 lg:px-12', isScrolled && 'bg-background/50 max-w-4xl rounded-2xl border backdrop-blur-lg lg:px-5')}>\n          <div className=\"relative flex flex-wrap items-center justify-between gap-6 py-3 lg:gap-0 lg:py-4\">\n            <div className=\"flex w-full justify-between lg:w-auto\">\n              <Link\n                href=\"/\"\n                aria-label={site.shortName}\n                className=\"flex items-center space-x-2\">\n                <Logo />\n              </Link>\n\n              <button\n                onClick={() => setMenuState(!menuState)}\n                aria-label={menuState == true ? 'Fechar menu' : 'Abrir menu'}\n                className=\"relative z-20 -m-2.5 -mr-4 block cursor-pointer p-2.5 lg:hidden\">\n                <Menu className=\"in-data-[state=active]:rotate-180 group-data-[state=active]:scale-0 group-data-[state=active]:opacity-0 m-auto size-6 duration-200\" />\n                <X className=\"group-data-[state=active]:rotate-0 group-data-[state=active]:scale-100 group-data-[state=active]:opacity-100 absolute inset-0 m-auto size-6 -rotate-180 scale-0 opacity-0 duration-200\" />\n              </button>\n            </div>\n\n            <div className=\"absolute inset-0 m-auto hidden size-fit lg:block\">\n              <ul className=\"flex gap-8 text-sm\">\n                {menuItems.map((item, index) => (\n                  <li key={index}>\n                    <Link\n                      href={item.href}\n                      className=\"text-muted-foreground hover:text-accent-foreground block duration-150\">\n                      <span>{item.name}</span>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            <div className=\"bg-background group-data-[state=active]:block lg:group-data-[state=active]:flex mb-6 hidden w-full flex-wrap items-center justify-end space-y-8 rounded-3xl border p-6 shadow-2xl shadow-zinc-300/20 md:flex-nowrap lg:m-0 lg:flex lg:w-fit lg:gap-6 lg:space-y-0 lg:border-transparent lg:bg-transparent lg:p-0 lg:shadow-none dark:shadow-none dark:lg:bg-transparent\">\n              <div className=\"lg:hidden\">\n                <ul className=\"space-y-6 text-base\">\n                  {menuItems.map((item, index) => (\n                    <li key={index}>\n                      <Link\n                        href={item.href}\n                        className=\"text-muted-foreground hover:text-accent-foreground block duration-150\">\n                        <span>{item.name}</span>\n                      </Link>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n              <div className=\"flex w-full flex-col space-y-3 sm:flex-row sm:gap-3 sm:space-y-0 md:w-fit\">\n                <Button\n                  asChild\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className={cn(isScrolled && 'lg:hidden')}>\n                  <Link href=\"/sign-in\">\n                    <span>Entrar</span>\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </header>\n  )\n}\n\nconst Logo = ({ className }: { className?: string }) => {\n  return (\n    <svg\n      viewBox=\"0 0 78 18\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn('h-5 w-auto', className)}>\n      <path\n        d=\"M3 0H5V18H3V0ZM13 0H15V18H13V0ZM18 3V5H0V3H18ZM0 15V13H18V15H0Z\"\n        fill=\"url(#logo-gradient)\"\n      />\n      <path\n        d=\"M27.06 7.054V12.239C27.06 12.5903 27.1393 12.8453 27.298 13.004C27.468 13.1513 27.7513 13.225 28.148 13.225H29.338V14.84H27.808C26.9353 14.84 26.2667 14.636 25.802 14.228C25.3373 13.82 25.105 13.157 25.105 12.239V7.054H24V5.473H25.105V3.144H27.06V5.473H29.338V7.054H27.06ZM30.4782 10.114C30.4782 9.17333 30.6709 8.34033 31.0562 7.615C31.4529 6.88967 31.9855 6.32867 32.6542 5.932C33.3342 5.524 34.0822 5.32 34.8982 5.32C35.6349 5.32 36.2752 5.46733 36.8192 5.762C37.3745 6.04533 37.8165 6.40233 38.1452 6.833V5.473H40.1002V14.84H38.1452V13.446C37.8165 13.888 37.3689 14.2563 36.8022 14.551C36.2355 14.8457 35.5895 14.993 34.8642 14.993C34.0595 14.993 33.3229 14.789 32.6542 14.381C31.9855 13.9617 31.4529 13.3837 31.0562 12.647C30.6709 11.899 30.4782 11.0547 30.4782 10.114ZM38.1452 10.148C38.1452 9.502 38.0092 8.941 37.7372 8.465C37.4765 7.989 37.1309 7.62633 36.7002 7.377C36.2695 7.12767 35.8049 7.003 35.3062 7.003C34.8075 7.003 34.3429 7.12767 33.9122 7.377C33.4815 7.615 33.1302 7.972 32.8582 8.448C32.5975 8.91267 32.4672 9.468 32.4672 10.114C32.4672 10.76 32.5975 11.3267 32.8582 11.814C33.1302 12.3013 33.4815 12.6753 33.9122 12.936C34.3542 13.1853 34.8189 13.31 35.3062 13.31C35.8049 13.31 36.2695 13.1853 36.7002 12.936C37.1309 12.6867 37.4765 12.324 37.7372 11.848C38.0092 11.3607 38.1452 10.794 38.1452 10.148ZM43.6317 4.232C43.2803 4.232 42.9857 4.113 42.7477 3.875C42.5097 3.637 42.3907 3.34233 42.3907 2.991C42.3907 2.63967 42.5097 2.345 42.7477 2.107C42.9857 1.869 43.2803 1.75 43.6317 1.75C43.9717 1.75 44.2607 1.869 44.4987 2.107C44.7367 2.345 44.8557 2.63967 44.8557 2.991C44.8557 3.34233 44.7367 3.637 44.4987 3.875C44.2607 4.113 43.9717 4.232 43.6317 4.232ZM44.5837 5.473V14.84H42.6457V5.473H44.5837ZM49.0661 2.26V14.84H47.1281V2.26H49.0661ZM50.9645 10.114C50.9645 9.17333 51.1572 8.34033 51.5425 7.615C51.9392 6.88967 52.4719 6.32867 53.1405 5.932C53.8205 5.524 54.5685 5.32 55.3845 5.32C56.1212 5.32 56.7615 5.46733 57.3055 5.762C57.8609 6.04533 58.3029 6.40233 58.6315 6.833V5.473H60.5865V14.84H58.6315V13.446C58.3029 13.888 57.8552 14.2563 57.2885 14.551C56.7219 14.8457 56.0759 14.993 55.3505 14.993C54.5459 14.993 53.8092 14.789 53.1405 14.381C52.4719 13.9617 51.9392 13.3837 51.5425 12.647C51.1572 11.899 50.9645 11.0547 50.9645 10.114ZM58.6315 10.148C58.6315 9.502 58.4955 8.941 58.2235 8.465C57.9629 7.989 57.6172 7.62633 57.1865 7.377C56.7559 7.12767 56.2912 7.003 55.7925 7.003C55.2939 7.003 54.8292 7.12767 54.3985 7.377C53.9679 7.615 53.6165 7.972 53.3445 8.448C53.0839 8.91267 52.9535 9.468 52.9535 10.114C52.9535 10.76 53.0839 11.3267 53.3445 11.814C53.6165 12.3013 53.9679 12.6753 54.3985 12.936C54.8405 13.1853 55.3052 13.31 55.7925 13.31C56.2912 13.31 56.7559 13.1853 57.1865 12.936C57.6172 12.6867 57.9629 12.324 58.2235 11.848C58.4955 11.3607 58.6315 10.794 58.6315 10.148ZM65.07 6.833C65.3533 6.357 65.7273 5.98867 66.192 5.728C66.668 5.456 67.229 5.32 67.875 5.32V7.326H67.382C66.6227 7.326 66.0447 7.51867 65.648 7.904C65.2627 8.28933 65.07 8.958 65.07 9.91V14.84H63.132V5.473H65.07V6.833ZM73.3624 10.165L77.6804 14.84H75.0624L71.5944 10.811V14.84H69.6564V2.26H71.5944V9.57L74.9944 5.473H77.6804L73.3624 10.165Z\"\n        fill=\"currentColor\"\n      />\n      <defs>\n        <linearGradient\n          id=\"logo-gradient\"\n          x1=\"10\"\n          y1=\"0\"\n          x2=\"10\"\n          y2=\"20\"\n          gradientUnits=\"userSpaceOnUse\">\n          <stop stopColor=\"#9B99FE\" />\n          <stop\n            offset=\"1\"\n            stopColor=\"#2BC8B7\"\n          />\n        </linearGradient>\n      </defs>\n    </svg>\n  )\n}\n","size_bytes":8079},"src/components/app/sidebar.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { useAdmin } from \"@/hooks/use-admin\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Home,\n  CreditCard,\n  User,\n  Settings,\n  Bot,\n  TrendingUp,\n  Target,\n  Building2,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\ntype SidebarProps = {\n  collapsed: boolean;\n  onToggle: () => void;\n};\n\nexport const navigationItems = [\n  { name: \"Painel\", href: \"/dashboard\", icon: Home },\n  { name: \"Avaliador de Carteiras\", href: \"/dashboard/avaliar-carteira\", icon: TrendingUp },\n  { name: \"Direcionador de Aportes\", href: \"/dashboard/direcionar-aportes\", icon: Target },\n  { name: \"Cobrança\", href: \"/billing\", icon: CreditCard },\n  { name: \"Perfil\", href: \"/profile\", icon: User },\n];\n\nexport const adminNavigationItems = [\n  { name: \"Carteiras Recomendadas\", href: \"/admin/carteira-recomendada\", icon: Building2 },\n];\n\nexport function Sidebar({ collapsed, onToggle }: SidebarProps) {\n  const pathname = usePathname();\n  const { isAdmin } = useAdmin();\n  \n  const allNavigationItems = isAdmin \n    ? [...navigationItems, ...adminNavigationItems]\n    : navigationItems;\n\n  return (\n    <aside\n      className={cn(\n        \"relative z-30 border-r border-border/40 bg-card/30 text-card-foreground backdrop-blur-xl supports-[backdrop-filter]:bg-card/20 glass-panel transition-[width] duration-200 ease-in-out\",\n        collapsed ? \"w-[64px]\" : \"w-64\",\n        \"hidden md:block my-4\"\n      )}\n      aria-label=\"Barra lateral principal\"\n    >\n      <div className=\"flex h-14 items-center gap-2 px-3\">\n        <Link href=\"/\" className=\"flex items-center gap-2\">\n          <div className=\"flex h-9 w-9 items-center justify-center rounded-lg bg-primary text-primary-foreground\">\n            <Settings className=\"h-5 w-5\" />\n          </div>\n          {!collapsed && (\n            <span className=\"text-lg font-semibold\">FiiAI</span>\n          )}\n        </Link>\n        <div className=\"ml-auto\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            aria-label={collapsed ? \"Expandir barra lateral\" : \"Recolher barra lateral\"}\n            onClick={onToggle}\n          >\n            {collapsed ? <ChevronRight className=\"h-4 w-4\" /> : <ChevronLeft className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n      </div>\n      \n      <ScrollArea className=\"h-[calc(100vh-3.5rem)]\">\n        <nav className=\"flex flex-col gap-1 p-2\" aria-label=\"Navegação principal\">\n          {allNavigationItems.map((item) => {\n            const isActive = pathname === item.href;\n            const link = (\n              <Link\n                key={item.name}\n                href={item.href}\n                aria-label={collapsed ? item.name : undefined}\n                className={cn(\n                  \"flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-medium transition-colors\",\n                  collapsed && \"justify-center\",\n                  isActive\n                    ? \"bg-accent text-accent-foreground\"\n                    : \"hover:bg-accent hover:text-accent-foreground\"\n                )}\n              >\n                <item.icon className=\"h-4 w-4\" />\n                {!collapsed && <span>{item.name}</span>}\n              </Link>\n            );\n\n            if (!collapsed) return link;\n\n            return (\n              <Tooltip key={item.name}>\n                <TooltipTrigger asChild>{link}</TooltipTrigger>\n                <TooltipContent side=\"right\" align=\"center\">\n                  {item.name}\n                </TooltipContent>\n              </Tooltip>\n            );\n          })}\n        </nav>\n      </ScrollArea>\n    </aside>\n  );\n}\n","size_bytes":3902},"src/components/app/simple-topbar.tsx":{"content":"\"use client\";\n\nimport { SignedIn, SignedOut, SignInButton, UserButton } from \"@clerk/nextjs\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nexport function SimpleTopbar() {\n  return (\n    <header\n      className={cn(\n        \"sticky top-0 z-20 w-full border-b border-border/40 bg-background/30 backdrop-blur-xl supports-[backdrop-filter]:bg-background/20 glass-panel\"\n      )}\n      role=\"banner\"\n    >\n      <div className=\"glow-separator w-full\" aria-hidden=\"true\" />\n      <div className=\"flex h-14 items-center gap-2 px-3 md:px-4\">\n        <div className=\"flex-1\" />\n        <div className=\"flex items-center gap-2\">\n          <SignedIn>\n            <UserButton afterSignOutUrl=\"/\" />\n          </SignedIn>\n          <SignedOut>\n            <SignInButton mode=\"modal\">\n              <Button variant=\"ghost\" size=\"sm\">Entrar</Button>\n            </SignInButton>\n          </SignedOut>\n        </div>\n      </div>\n    </header>\n  )\n}\n\n","size_bytes":975},"src/components/app/topbar.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { Menu } from \"lucide-react\";\nimport { SignedIn, SignedOut, SignInButton, UserButton } from \"@clerk/nextjs\";\nimport { NotificationBell } from \"@/components/notifications/notification-bell\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger, SheetClose, SheetFooter } from \"@/components/ui/sheet\";\nimport { navigationItems } from \"@/components/app/sidebar\";\n\ntype TopbarProps = {\n  onToggleSidebar: () => void;\n  sidebarCollapsed: boolean;\n};\n\nexport function Topbar({ onToggleSidebar }: TopbarProps) {\n  return (\n    <header\n      className={cn(\n        \"sticky top-0 z-20 w-full border-b border-border/40 bg-background/30 backdrop-blur-xl supports-[backdrop-filter]:bg-background/20 glass-panel\"\n      )}\n      role=\"banner\"\n    >\n      <div className=\"glow-separator w-full\" aria-hidden=\"true\" />\n      <div className=\"flex h-14 items-center gap-2 px-3 md:px-4\">\n        {/* Mobile menu button */}\n        <div className=\"md:hidden\">\n          <Sheet>\n            <SheetTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                aria-label=\"Abrir menu\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"left\" className=\"w-72 p-0 md:hidden\">\n              <SheetHeader className=\"p-4 text-left\">\n                <div className=\"flex items-center justify-between\">\n                  <SheetTitle>SaaS Template</SheetTitle>\n                </div>\n              </SheetHeader>\n              <nav className=\"flex flex-col gap-1 p-2\">\n                {navigationItems.map((item) => {\n                  const Icon = item.icon as React.ComponentType<{ className?: string }>;\n                  return (\n                    <SheetClose asChild key={item.name}>\n                      <Link\n                        href={item.href}\n                        className={\"flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground\"}\n                      >\n                        <Icon className=\"h-4 w-4\" />\n                        <span>{item.name}</span>\n                      </Link>\n                    </SheetClose>\n                  );\n                })}\n              </nav>\n              <SheetFooter className=\"mt-auto p-4\">\n                <div className=\"flex w-full items-center justify-between gap-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <SignedIn>\n                      <div className=\"flex items-center gap-3\">\n                        <UserButton afterSignOutUrl=\"/\" />\n                      </div>\n                    </SignedIn>\n                    <SignedOut>\n                      <div className=\"flex items-center gap-2\">\n                        <SignInButton mode=\"modal\">\n                          <Button variant=\"ghost\" size=\"sm\">Entrar</Button>\n                        </SignInButton>\n                      </div>\n                    </SignedOut>\n                  </div>\n                  <ThemeToggle />\n                </div>\n              </SheetFooter>\n            </SheetContent>\n          </Sheet>\n        </div>\n\n        {/* Brand (mobile) */}\n        <Link href=\"/\" className=\"flex items-center gap-2 md:hidden\">\n          <div className=\"h-6 w-6 rounded bg-primary\" />\n          <span className=\"text-sm font-semibold\">SaaS Template</span>\n        </Link>\n\n        <div className=\"hidden items-center gap-2 md:flex\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            aria-label=\"Alternar barra lateral\"\n            onClick={onToggleSidebar}\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        {/* Spacer */}\n        <div className=\"flex-1\" />\n\n        {/* Right side actions */}\n        <div className=\"flex items-center gap-2\">\n          <SignedIn>\n            <NotificationBell />\n            <Separator orientation=\"vertical\" className=\"h-6\" />\n          </SignedIn>\n          \n          <ThemeToggle />\n          \n          <SignedIn>\n            <UserButton />\n          </SignedIn>\n          \n          <SignedOut>\n            <SignInButton mode=\"modal\">\n              <Button variant=\"ghost\" size=\"sm\">\n                Entrar\n              </Button>\n            </SignInButton>\n          </SignedOut>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4718},"src/components/charts/revenue-charts.tsx":{"content":"\"use client\"\n\nimport {\n  ResponsiveContainer,\n  BarChart as RBarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  LineChart as RLineChart,\n  Line,\n  Legend,\n} from 'recharts'\n\ntype Point = { label: string; value: number }\n\nfunction sum(values: number[]) {\n  return values.reduce((a, b) => a + b, 0)\n}\n\nfunction average(values: number[]) {\n  if (values.length === 0) return 0\n  return sum(values) / values.length\n}\n\nfunction StatsLegend({ data, prefix = '', suffix = '' }: { data: Point[]; prefix?: string; suffix?: string }) {\n  const last = data.at(-1)?.value ?? 0\n  const avg = average(data.map(d => d.value))\n  const total = sum(data.map(d => d.value))\n\n  return (\n    <div className=\"flex items-center gap-3 text-xs\">\n      <div className=\"flex items-center gap-1\">\n        <span className=\"inline-block size-2 rounded-sm bg-primary\" />\n        <span className=\"text-muted-foreground\">Latest:</span>\n        <span className=\"font-medium text-foreground\">{prefix}{last.toFixed(0)}{suffix}</span>\n      </div>\n      <div className=\"flex items-center gap-1\">\n        <span className=\"inline-block size-2 rounded-sm bg-foreground/40\" />\n        <span className=\"text-muted-foreground\">Avg:</span>\n        <span className=\"font-medium text-foreground\">{prefix}{avg.toFixed(0)}{suffix}</span>\n      </div>\n      <div className=\"flex items-center gap-1\">\n        <span className=\"inline-block size-2 rounded-sm bg-foreground/20\" />\n        <span className=\"text-muted-foreground\">Total:</span>\n        <span className=\"font-medium text-foreground\">{prefix}{total.toFixed(0)}{suffix}</span>\n      </div>\n    </div>\n  )\n}\n\nfunction ValueTooltip({ active, payload, label, prefix = '', suffix = '' }: {\n  active?: boolean;\n  payload?: Array<{ value: number }>;\n  label?: string;\n  prefix?: string;\n  suffix?: string;\n}) {\n  if (active && payload && payload.length) {\n    const val = payload[0].value as number\n    return (\n      <div className=\"rounded-md border border-border bg-popover px-2 py-1 text-xs text-foreground shadow-sm\">\n        <div className=\"font-medium\">{label}</div>\n        <div className=\"text-muted-foreground\">{prefix}{val.toFixed(0)}{suffix}</div>\n      </div>\n    )\n  }\n  return null\n}\n\nexport function MrrBarChart({ data }: { data: Point[] }) {\n  return (\n    <div className=\"h-56 w-full\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <RBarChart data={data} margin={{ top: 8, right: 12, left: 0, bottom: 8 }} barCategoryGap={18}>\n          <defs>\n            <linearGradient id=\"mrrGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"0%\" stopColor=\"hsl(var(--primary))\" stopOpacity=\"0.9\" />\n              <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" stopOpacity=\"0.2\" />\n            </linearGradient>\n          </defs>\n          <CartesianGrid strokeDasharray=\"3 3\" strokeOpacity={0.15} />\n          <XAxis dataKey=\"label\" tickLine={false} axisLine={false} />\n          <YAxis tickLine={false} axisLine={false} width={36} />\n          <Tooltip cursor={{ fill: 'hsl(var(--muted))', opacity: 0.2 }} content={<ValueTooltip prefix=\"$\" />} />\n          <Legend verticalAlign=\"top\" align=\"right\" content={<StatsLegend data={data} prefix=\"$\" />} />\n          <Bar dataKey=\"value\" fill=\"url(#mrrGradient)\" radius={[8, 8, 4, 4]} />\n        </RBarChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nexport function ArrBarChart({ data }: { data: Point[] }) {\n  return (\n    <div className=\"h-56 w-full\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <RBarChart data={data} margin={{ top: 8, right: 12, left: 0, bottom: 8 }} barCategoryGap={18}>\n          <defs>\n            <linearGradient id=\"arrGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"0%\" stopColor=\"hsl(var(--primary))\" stopOpacity=\"0.9\" />\n              <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" stopOpacity=\"0.2\" />\n            </linearGradient>\n          </defs>\n          <CartesianGrid strokeDasharray=\"3 3\" strokeOpacity={0.15} />\n          <XAxis dataKey=\"label\" tickLine={false} axisLine={false} />\n          <YAxis tickLine={false} axisLine={false} width={40} />\n          <Tooltip cursor={{ fill: 'hsl(var(--muted))', opacity: 0.2 }} content={<ValueTooltip prefix=\"$\" />} />\n          <Legend verticalAlign=\"top\" align=\"right\" content={<StatsLegend data={data} prefix=\"$\" />} />\n          <Bar dataKey=\"value\" fill=\"url(#arrGradient)\" radius={[8, 8, 4, 4]} />\n        </RBarChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nexport function ChurnLineChart({ data }: { data: Point[] }) {\n  return (\n    <div className=\"h-56 w-full\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <RLineChart data={data} margin={{ top: 8, right: 12, left: 0, bottom: 8 }}>\n          <defs>\n            <linearGradient id=\"churnStroke\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n              <stop offset=\"0%\" stopColor=\"hsl(var(--primary))\" stopOpacity=\"1\" />\n              <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" stopOpacity=\"0.6\" />\n            </linearGradient>\n          </defs>\n          <CartesianGrid strokeDasharray=\"3 3\" strokeOpacity={0.15} />\n          <XAxis dataKey=\"label\" tickLine={false} axisLine={false} />\n          <YAxis tickLine={false} axisLine={false} width={40} domain={[0, 'auto']} />\n          <Tooltip cursor={{ stroke: 'hsl(var(--muted-foreground))', strokeWidth: 1 }} content={<ValueTooltip suffix=\"%\" />} />\n          <Legend verticalAlign=\"top\" align=\"right\" content={<StatsLegend data={data} suffix=\"%\" />} />\n          <Line type=\"monotone\" dataKey=\"value\" stroke=\"url(#churnStroke)\" strokeWidth={2.25} dot={{ r: 3.5, strokeWidth: 1, stroke: 'hsl(var(--background))' }} activeDot={{ r: 5 }} />\n        </RLineChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n","size_bytes":5773},"src/components/chat/message-bubble.tsx":{"content":"\"use client\"\n\nimport * as React from 'react'\nimport { cn } from '@/lib/utils'\nimport Image from 'next/image'\nimport { Bot, Check, Copy, RefreshCw, User, Download } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { Markdown } from '@/components/ui/markdown'\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip'\n\nexport type ChatMessage = {\n  id: string\n  role: 'user' | 'assistant' | 'system'\n  // allow either plain text or a structured payload with images\n  content: string | { images?: unknown[] }\n}\n\ntype MessageBubbleProps = {\n  message: ChatMessage\n  className?: string\n  onRetry?: () => void\n}\n\nexport function MessageBubble({ message, className, onRetry }: MessageBubbleProps) {\n  const isUser = message.role === 'user'\n  const [copied, setCopied] = React.useState(false)\n  // Try to parse JSON-based payloads like { images: [\"data:image/png;base64,...\"] }\n  const parsed = React.useMemo(() => {\n    const raw: unknown = (message as { content?: unknown })?.content\n    if (raw && typeof raw === 'object') return raw as Record<string, unknown>\n    if (typeof raw !== 'string') return null\n    const str = raw.trim()\n    const fromFence = /^```(?:json)?\\n([\\s\\S]*?)\\n```$/m.exec(str)\n    const toParse = fromFence ? fromFence[1] : str\n    try {\n      return JSON.parse(toParse)\n    } catch {\n      return null\n    }\n  }, [message])\n  const parsedImages: string[] = React.useMemo(() => {\n    const out: string[] = []\n    const pickUrl = (v: unknown): string | null => {\n      if (!v) return null\n      if (typeof v === 'string') return v\n      // common shapes\n      const vObj = v as { url?: unknown; image_url?: unknown; b64_json?: unknown; b64?: unknown; image_base64?: unknown };\n      if (typeof vObj?.url === 'string') return vObj.url\n      if (typeof vObj?.image_url === 'string') return vObj.image_url\n      if (typeof (vObj?.image_url as { url?: unknown })?.url === 'string') return (vObj.image_url as { url: string }).url\n      const b64 = vObj?.b64_json || vObj?.b64 || vObj?.image_base64\n      if (typeof b64 === 'string' && b64.length > 0) return `data:image/png;base64,${b64}`\n      return null\n    }\n    const imgs = (parsed && typeof parsed === 'object' && Array.isArray((parsed as { images?: unknown }).images)) ? (parsed as { images: unknown[] }).images : []\n    for (const item of imgs) {\n      const url = pickUrl(item)\n      if (typeof url === 'string' && url.length > 0) out.push(url)\n    }\n    return out\n  }, [parsed])\n\n  const handleCopy = async () => {\n    try {\n      const raw: unknown = (message as { content?: unknown })?.content\n      const text = typeof raw === 'string' ? raw : JSON.stringify(raw)\n      await navigator.clipboard.writeText(text)\n      setCopied(true)\n      const t = setTimeout(() => setCopied(false), 1200)\n      return () => clearTimeout(t)\n    } catch {}\n  }\n\n  const downloadImage = (url: string, index: number) => {\n    try {\n      let ext = 'png'\n      const match = /^data:(image\\/(png|jpeg|jpg|gif|webp));base64,/.exec(url)\n      if (match && match[2]) {\n        ext = match[2] === 'jpeg' ? 'jpg' : match[2]\n      } else if (url.includes('.webp')) {\n        ext = 'webp'\n      } else if (url.includes('.jpg') || url.includes('.jpeg')) {\n        ext = 'jpg'\n      } else if (url.includes('.gif')) {\n        ext = 'gif'\n      } else if (url.includes('.png')) {\n        ext = 'png'\n      }\n      const filename = `ai-image-${message.id}-${index + 1}.${ext}`\n      const a = document.createElement('a')\n      a.href = url\n      a.download = filename\n      document.body.appendChild(a)\n      a.click()\n      a.remove()\n    } catch {}\n  }\n\n  return (\n    <div className={cn('flex items-start gap-3', isUser ? 'justify-end' : 'justify-start', className)}>\n      {!isUser && (\n        <div className=\"mt-1 flex h-6 w-6 items-center justify-center rounded-full bg-primary/10\">\n          <Bot className=\"h-3.5 w-3.5\" />\n        </div>\n      )}\n\n      <div\n        className={cn(\n          'group relative max-w-[85%] rounded-lg p-3 text-sm whitespace-pre-wrap break-words shadow-sm',\n          isUser ? 'bg-primary text-primary-foreground' : 'bg-muted'\n        )}\n      >\n        {/* Role label subtle */}\n        <div className={cn('mb-1 text-[10px] uppercase tracking-wide opacity-60', isUser ? 'text-primary-foreground' : 'text-foreground')}>\n          {isUser ? 'Você' : 'IA'}\n        </div>\n\n        {isUser ? (\n          <>{message.content}</>\n        ) : parsedImages.length > 0 ? (\n          <div className=\"flex flex-col gap-2\">\n            {parsedImages.map((src, i) => (\n              <div key={i} className=\"w-full\">\n                <Image\n                  src={src}\n                  alt={`imagem ${i + 1}`}\n                  width={1024}\n                  height={1024}\n                  className=\"h-auto w-full max-w-full rounded-md border bg-background\"\n                  unoptimized\n                />\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"p-4\">\n            <Markdown className=\"[&_p]:m-0\">{typeof (message as { content?: unknown }).content === 'string' ? (message as { content: string }).content : JSON.stringify((message as { content?: unknown }).content)}</Markdown>\n          </div>\n        )}\n\n        {/* Actions appear on hover for both roles */}\n        <div className={cn('absolute -right-1.5 -top-2.5 flex items-center gap-1 rounded-full bg-background/60 p-0.5 opacity-0 ring-1 ring-border transition-opacity group-hover:opacity-100', isUser ? 'text-foreground' : 'text-foreground')}>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button type=\"button\" variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" aria-label=\"Copiar\" onClick={handleCopy}>\n                {copied ? <Check className=\"h-3.5 w-3.5\" /> : <Copy className=\"h-3.5 w-3.5\" />}\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent>Copiar</TooltipContent>\n          </Tooltip>\n          {!isUser && parsedImages.length > 0 && (\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-6 w-6\"\n                  aria-label=\"Baixar imagem\"\n                  onClick={() => downloadImage(parsedImages[0], 0)}\n                >\n                  <Download className=\"h-3.5 w-3.5\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>Baixar</TooltipContent>\n            </Tooltip>\n          )}\n          {!isUser && onRetry && (\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button type=\"button\" variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" aria-label=\"Tentar novamente\" onClick={onRetry}>\n                  <RefreshCw className=\"h-3.5 w-3.5\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>Gerar novamente</TooltipContent>\n            </Tooltip>\n          )}\n        </div>\n      </div>\n\n      {isUser && (\n        <div className=\"mt-1 flex h-6 w-6 items-center justify-center rounded-full bg-muted\">\n          <User className=\"h-3.5 w-3.5\" />\n        </div>\n      )}\n    </div>\n  )\n}\n","size_bytes":7259},"src/components/marketing/ai-starter.tsx":{"content":"\"use client\"\n\nimport { Bot, Sparkles, Zap, Rocket } from \"lucide-react\"\nimport { GlowingEffect } from \"@/components/ui/glowing-effect\"\n\nexport function AIStarter() {\n  const tools = [\n    \"Replit Agents\",\n    \"Cursor AI\",\n    \"Claude Code\",\n    \"OpenAI Codex\",\n    \"Google Gemini\",\n    \"Bolt.new\",\n  ]\n\n  return (\n    <section id=\"ai-starter\" className=\"relative mt-28\">\n      <div aria-hidden className=\"pointer-events-none absolute inset-0 -z-10\">\n        <div className=\"absolute left-1/2 top-0 h-[520px] w-[1200px] -translate-x-1/2 rounded-full bg-[radial-gradient(50%_50%_at_50%_0%,hsl(var(--primary)/0.15)_0%,transparent_70%)] blur-2xl\" />\n      </div>\n\n      <div className=\"container mx-auto px-4\">\n        <div className=\"mx-auto max-w-3xl text-center\">\n          <span className=\"inline-flex items-center gap-2 rounded-full border px-3 py-1 text-xs text-muted-foreground\">\n            <Rocket className=\"h-3.5 w-3.5 text-primary\" /> Starter para agentes & IDEs\n          </span>\n          <h2 className=\"mt-4 bg-gradient-to-b from-foreground to-foreground/70 bg-clip-text text-3xl font-semibold tracking-tight text-transparent md:text-4xl\">\n            Funciona com qualquer IA, sem lock‑in\n          </h2>\n          <p className=\"mt-3 text-base text-muted-foreground\">\n            Use este template como ponto de partida em Replit, Cursor, Claude Code, Codex, Gemini, Bolt e mais.\n          </p>\n        </div>\n\n        <div className=\"mx-auto mt-10 max-w-6xl\">\n          <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n            {/* Card 1 */}\n            <div className=\"relative rounded-[1.25rem] border-[0.75px] border-border p-2 md:rounded-[1.5rem] md:p-3\">\n              <GlowingEffect spread={40} glow disabled={false} proximity={64} inactiveZone={0.01} borderWidth={3} />\n              <div className=\"relative flex h-full flex-col justify-between gap-4 overflow-hidden rounded-xl border-[0.75px] bg-background p-6 shadow-sm dark:shadow-[0px_0px_27px_0px_rgba(45,45,45,0.3)]\">\n                <span className=\"inline-flex size-8 items-center justify-center rounded-lg border-[0.75px] border-border bg-muted\">\n                  <Sparkles className=\"h-4 w-4 text-sky-500\" />\n                </span>\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-base font-semibold\">Base pronta para produção</h3>\n                  <p className=\"text-sm text-muted-foreground\">Auth (Clerk), DB (Prisma), billing (Stripe) e créditos.</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Card 2 */}\n            <div className=\"relative rounded-[1.25rem] border-[0.75px] border-border p-2 md:rounded-[1.5rem] md:p-3\">\n              <GlowingEffect spread={40} glow disabled={false} proximity={64} inactiveZone={0.01} borderWidth={3} />\n              <div className=\"relative flex h-full flex-col justify-between gap-4 overflow-hidden rounded-xl border-[0.75px] bg-background p-6 shadow-sm dark:shadow-[0px_0px_27px_0px_rgba(45,45,45,0.3)]\">\n                <span className=\"inline-flex size-8 items-center justify-center rounded-lg border-[0.75px] border-border bg-muted\">\n                  <Bot className=\"h-4 w-4 text-emerald-500\" />\n                </span>\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-base font-semibold\">Ideal para agentes</h3>\n                  <p className=\"text-sm text-muted-foreground\">Validação com Zod, APIs e handlers tipados, estrutura clara.</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Card 3 */}\n            <div className=\"relative rounded-[1.25rem] border-[0.75px] border-border p-2 md:rounded-[1.5rem] md:p-3\">\n              <GlowingEffect spread={40} glow disabled={false} proximity={64} inactiveZone={0.01} borderWidth={3} />\n              <div className=\"relative flex h-full flex-col justify-between gap-4 overflow-hidden rounded-xl border-[0.75px] bg-background p-6 shadow-sm dark:shadow-[0px_0px_27px_0px_rgba(45,45,45,0.3)]\">\n                <span className=\"inline-flex size-8 items-center justify-center rounded-lg border-[0.75px] border-border bg-muted\">\n                  <Zap className=\"h-4 w-4 text-amber-500\" />\n                </span>\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-base font-semibold\">Sem lock‑in</h3>\n                  <p className=\"text-sm text-muted-foreground\">Troque provedores quando quiser.</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Tools row styled like bento */}\n          <div className=\"mt-6\">\n            <div className=\"relative rounded-[1.25rem] border-[0.75px] border-border p-2 md:rounded-[1.5rem] md:p-3\">\n              <GlowingEffect spread={40} glow disabled={false} proximity={64} inactiveZone={0.01} borderWidth={3} />\n              <div className=\"relative overflow-hidden rounded-xl border-[0.75px] bg-background p-4 shadow-sm dark:shadow-[0px_0px_27px_0px_rgba(45,45,45,0.3)]\">\n                <div className=\"flex flex-wrap items-center gap-2\">\n                  {tools.map((t) => (\n                    <span\n                      key={t}\n                      className=\"px-3 py-1.5 text-xs rounded-md bg-black/5 text-gray-700 backdrop-blur-sm transition-all duration-200 hover:bg-black/10 dark:bg-white/10 dark:text-gray-200 dark:hover:bg-white/20\"\n                    >\n                      {t}\n                    </span>\n                  ))}\n                  <span className=\"px-3 py-1.5 text-xs rounded-md bg-black/5 text-gray-700 backdrop-blur-sm transition-all duration-200 hover:bg-black/10 dark:bg-white/10 dark:text-gray-200 dark:hover:bg-white/20\">\n                    e mais…\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n","size_bytes":5891},"src/components/marketing/bento-grid.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { Lock, Search, Settings, Sparkles, CreditCard, Bot, Router, MessageCircle, Image, ShieldCheck, Upload, DollarSign } from \"lucide-react\"\nimport { GlowingEffect } from \"@/components/ui/glowing-effect\"\n\nexport function BentoGrid() {\n  return (\n    <ul className=\"grid grid-cols-1 grid-rows-none gap-4 md:grid-cols-3 md:grid-rows-4 lg:gap-4\">\n      <GridItem\n        area=\"md:[grid-area:1/1/2/2]\"\n        icon={<Sparkles className=\"h-4 w-4 text-sky-500\" />}\n        title=\"Sistema de Créditos\"\n        description=\"Custos por feature tipados, validação e dedução transacional com logs de uso.\"\n      />\n      <GridItem\n        area=\"md:[grid-area:1/2/2/3]\"\n        icon={<Lock className=\"h-4 w-4 text-emerald-500\" />}\n        title=\"Autenticação Clerk\"\n        description=\"Login, inscrição e sessões com rotas públicas/protegidas e middleware.\"\n      />\n      <GridItem\n        area=\"md:[grid-area:1/3/2/4]\"\n        icon={<Settings className=\"h-4 w-4 text-purple-500\" />}\n        title=\"PostgreSQL + Prisma\"\n        description=\"Esquema, migrações e helpers tipados para operações seguras.\"\n      />\n      <GridItem\n        area=\"md:[grid-area:2/1/3/2]\"\n        icon={<CreditCard className=\"h-4 w-4 text-blue-500\" />}\n        title=\"Billing (Stripe)\"\n        description=\"Assinaturas e packs de créditos com webhooks integrados.\"\n      />\n      <GridItem\n        area=\"md:[grid-area:2/2/3/3]\"\n        icon={<ShieldCheck className=\"h-4 w-4 text-orange-500\" />}\n        title=\"Painel Admin\"\n        description=\"Gerencie usuários, créditos e visualize análises detalhadas.\"\n      />\n      <GridItem\n        area=\"md:[grid-area:2/3/3/4]\"\n        icon={<Bot className=\"h-4 w-4 text-red-500\" />}\n        title=\"Integração Vercel AI\"\n        description=\"Chat com streaming em tempo real usando Vercel AI SDK.\"\n      />\n      <GridItem\n        area=\"md:[grid-area:3/1/4/2]\"\n        icon={<Router className=\"h-4 w-4 text-green-500\" />}\n        title=\"Suporte Open Router\"\n        description=\"Conecte-se a qualquer modelo de linguagem grande com Open Router.\"\n      />\n      <GridItem\n        area=\"md:[grid-area:3/2/4/3]\"\n        icon={<Upload className=\"h-4 w-4 text-violet-500\" />}\n        title=\"Upload de Arquivos\"\n        description=\"Sistema de upload e gerenciamento de arquivos com armazenamento seguro.\"\n      />\n      <GridItem\n        area=\"md:[grid-area:3/3/4/4]\"\n        // eslint-disable-next-line jsx-a11y/alt-text\n        icon={<Image className=\"h-4 w-4 text-indigo-500\" />}\n        title=\"Geração de Imagens\"\n        description=\"Gere imagens com os modelos mais recentes de IA.\"\n      />\n      <GridItem\n        area=\"md:[grid-area:4/1/5/2]\"\n        icon={<DollarSign className=\"h-4 w-4 text-teal-500\" />}\n        title=\"Custos Configuráveis\"\n        description=\"Configure custos por feature e créditos por plano via admin.\"\n      />\n      <GridItem\n        area=\"md:[grid-area:4/2/5/3]\"\n        icon={<MessageCircle className=\"h-4 w-4 text-yellow-500\" />}\n        title=\"Chat com qualquer LLM\"\n        description=\"Interface de chat completa com histórico e contexto persistente.\"\n      />\n      <GridItem\n        area=\"md:[grid-area:4/3/5/4]\"\n        icon={<Search className=\"h-4 w-4 text-amber-500\" />}\n        title=\"UI + App Router\"\n        description=\"Tailwind v4 + Radix UI com componentes prontos para produção.\"\n      />\n    </ul>\n  )\n}\n\ninterface GridItemProps {\n  area: string\n  icon: React.ReactNode\n  title: string\n  description: React.ReactNode\n}\n\nconst GridItem = ({ area, icon, title, description }: GridItemProps) => {\n  return (\n    <li className={cn(\"min-h-[14rem] list-none\", area)}>\n      <div className=\"relative h-full rounded-[1.25rem] border-[0.75px] border-border p-2 md:rounded-[1.5rem] md:p-3\">\n        <GlowingEffect\n          spread={40}\n          glow={true}\n          disabled={false}\n          proximity={64}\n          inactiveZone={0.01}\n          borderWidth={3}\n        />\n        <div className=\"relative flex h-full flex-col justify-between gap-6 overflow-hidden rounded-xl border-[0.75px] bg-background p-6 shadow-sm dark:shadow-[0px_0px_27px_0px_rgba(45,45,45,0.3)] md:p-6\">\n          <div className=\"relative flex flex-1 flex-col justify-between gap-3\">\n            <div className=\"w-fit rounded-lg border-[0.75px] border-border bg-muted p-2\">\n              {icon}\n            </div>\n            <div className=\"space-y-3\">\n              <h3 className=\"pt-0.5 text-xl leading-[1.375rem] font-semibold font-sans tracking-[-0.04em] md:text-2xl md:leading-[1.875rem] text-balance text-foreground\">\n                {title}\n              </h3>\n              <h2 className=\"[&_b]:md:font-semibold [&_strong]:md:font-semibold font-sans text-sm leading-[1.125rem] md:text-base md:leading-[1.375rem] text-muted-foreground\">\n                {description}\n              </h2>\n            </div>\n          </div>\n        </div>\n      </div>\n    </li>\n  )\n}\n\n// export via named function acima\n","size_bytes":5047},"src/components/marketing/faq.tsx":{"content":"const faqs = [\n  {\n    q: \"O que está incluído?\",\n    a: \"Autenticação Clerk, Prisma, validação Zod, sistema de créditos e uma base de UI limpa com Tailwind.\",\n  },\n  {\n    q: \"Posso usar minha própria autenticação ou cobrança?\",\n    a: \"Sim. O template é modular - troque por seus provedores preferidos conforme necessário.\",\n  },\n  {\n    q: \"Existe um esquema de banco de dados?\",\n    a: \"Sim, o esquema e os scripts do Prisma estão incluídos. Execute as migrações com os scripts npm fornecidos.\",\n  },\n  {\n    q: \"Como funcionam os créditos?\",\n    a: \"Defina os custos dos recursos em uma única configuração e use auxiliares para validar e deduzir por solicitação.\",\n  },\n]\n\nexport function FAQ() {\n  return (\n    <section id=\"faq\" className=\"container mx-auto px-4 mt-24\">\n      <div className=\"mx-auto max-w-2xl text-center\">\n        <h2 className=\"text-3xl md:text-4xl font-semibold tracking-tight\">Perguntas frequentes</h2>\n        <p className=\"mt-3 text-muted-foreground\">Respostas para perguntas comuns sobre o template.</p>\n      </div>\n      <div className=\"mx-auto mt-10 grid max-w-3xl grid-cols-1 gap-6\">\n        {faqs.map((f) => (\n          <div\n            key={f.q}\n            className=\"group relative overflow-hidden rounded-xl border border-gray-100/80 bg-white p-6 transition-all duration-300 will-change-transform hover:-translate-y-0.5 hover:shadow-[0_2px_12px_rgba(0,0,0,0.03)] dark:border-white/10 dark:bg-black\"\n          >\n            <div className=\"absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100\">\n              <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(0,0,0,0.02)_1px,transparent_1px)] bg-[length:4px_4px] dark:bg-[radial-gradient(circle_at_center,rgba(255,255,255,0.02)_1px,transparent_1px)]\" />\n            </div>\n            <h3 className=\"relative text-base font-semibold\">{f.q}</h3>\n            <p className=\"relative mt-2 text-sm text-muted-foreground\">{f.a}</p>\n            <div className=\"absolute inset-0 -z-10 rounded-xl p-px opacity-0 transition-opacity duration-300 group-hover:opacity-100 bg-gradient-to-br from-transparent via-gray-100/50 to-transparent dark:via-white/10\" />\n          </div>\n        ))}\n      </div>\n    </section>\n  )\n}\n","size_bytes":2277},"src/components/marketing/features.tsx":{"content":"import { Shield, Zap, CreditCard, Cog, BarChart2, Lock } from \"lucide-react\"\n\nconst features = [\n  {\n    title: \"Autenticação\",\n    description: \"Autenticação com tecnologia Clerk com login, inscrição e sessões prontas para uso.\",\n    icon: Lock,\n  },\n  {\n    title: \"Sistema de Créditos\",\n    description: \"Chaves de recursos tipadas com auxiliares de validação e dedução.\",\n    icon: CreditCard,\n  },\n  {\n    title: \"API e Banco de Dados\",\n    description: \"Rotas validadas por Zod e Prisma com migrações prontas para uso.\",\n    icon: Shield,\n  },\n  {\n    title: \"Desempenho\",\n    description: \"Next.js App Router, pronto para edge e padrões sensatos.\",\n    icon: Zap,\n  },\n  {\n    title: \"Analytics\",\n    description: \"Conecte suas análises, registros e monitoramento preferidos.\",\n    icon: BarChart2,\n  },\n  {\n    title: \"Configurável\",\n    description: \"Pastas claras, documentos úteis e padrões para iteração rápida.\",\n    icon: Cog,\n  },\n]\n\nexport function Features() {\n  return (\n    <section id=\"features\" className=\"container mx-auto px-4 mt-24\">\n      <div className=\"mx-auto max-w-2xl text-center\">\n        <h2 className=\"text-3xl md:text-4xl font-semibold tracking-tight\">Tudo que você precisa para começar</h2>\n        <p className=\"mt-3 text-muted-foreground\">Padrões amigáveis para produção, padrões extensíveis e uma interface de usuário limpa.</p>\n      </div>\n      <div className=\"mt-10 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n        {features.map((f) => (\n          <div key={f.title} className=\"group relative rounded-xl border bg-card/60 p-6 backdrop-blur-md\">\n            <div className=\"flex size-10 items-center justify-center rounded-md border bg-white/40 dark:bg-white/10\">\n              <f.icon className=\"size-5\" />\n            </div>\n            <h3 className=\"mt-4 text-lg font-semibold\">{f.title}</h3>\n            <p className=\"mt-2 text-sm text-muted-foreground\">{f.description}</p>\n          </div>\n        ))}\n      </div>\n    </section>\n  )\n}\n\n","size_bytes":2029},"src/components/marketing/hero.tsx":{"content":"\"use client\";\nimport React from 'react'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport { ArrowRight, ChevronRight } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { AnimatedGroup } from '@/components/ui/animated-group'\n\nconst transitionVariants = {\n  item: {\n    hidden: {\n      opacity: 0,\n      filter: 'blur(12px)',\n      y: 12,\n    },\n    visible: {\n      opacity: 1,\n      filter: 'blur(0px)',\n      y: 0,\n      transition: {\n        type: 'spring' as const,\n        bounce: 0.3,\n        duration: 1.5,\n      },\n    },\n  },\n} as const\n\nexport function Hero() {\n  return (\n    <>\n      {/* Header é renderizado globalmente via PublicLayout */}\n      <main className=\"overflow-hidden\">\n        <div\n          aria-hidden\n          className=\"z-[2] absolute inset-0 pointer-events-none isolate opacity-50 contain-strict hidden lg:block\">\n          <div className=\"w-[35rem] h-[80rem] -translate-y-[350px] absolute left-0 top-0 -rotate-45 rounded-full bg-[radial-gradient(68.54%_68.72%_at_55.02%_31.46%,hsla(0,0%,85%,.08)_0,hsla(0,0%,55%,.02)_50%,hsla(0,0%,45%,0)_80%)]\" />\n          <div className=\"h-[80rem] absolute left-0 top-0 w-56 -rotate-45 rounded-full bg-[radial-gradient(50%_50%_at_50%_50%,hsla(0,0%,85%,.06)_0,hsla(0,0%,45%,.02)_80%,transparent_100%)] [translate:5%_-50%]\" />\n          <div className=\"h-[80rem] -translate-y-[350px] absolute left-0 top-0 w-56 -rotate-45 bg-[radial-gradient(50%_50%_at_50%_50%,hsla(0,0%,85%,.04)_0,hsla(0,0%,45%,.02)_80%,transparent_100%)]\" />\n        </div>\n        <section>\n          <div className=\"relative pt-24 md:pt-36\">\n            <AnimatedGroup\n              variants={{\n                container: {\n                  visible: {\n                    transition: {\n                      delayChildren: 1,\n                    },\n                  },\n                },\n                item: {\n                  hidden: {\n                    opacity: 0,\n                    y: 20,\n                  },\n                  visible: {\n                    opacity: 1,\n                    y: 0,\n                    transition: {\n                      type: 'spring' as const,\n                      bounce: 0.3,\n                      duration: 2,\n                    },\n                  },\n                },\n              }}\n              className=\"absolute inset-0 -z-20\">\n              <Image\n                src=\"https://images.unsplash.com/photo-1504805572947-34fad45aed93?q=80&w=1920&auto=format&fit=crop\"\n                alt=\"background\"\n                className=\"absolute inset-x-0 top-56 -z-20 hidden lg:top-32 dark:block\"\n                width={3276}\n                height={4095}\n                priority\n              />\n            </AnimatedGroup>\n            <div aria-hidden className=\"absolute inset-0 -z-10 size-full [background:radial-gradient(125%_125%_at_50%_100%,transparent_0%,var(--background)_75%)]\" />\n            <div className=\"mx-auto max-w-7xl px-6\">\n              <div className=\"text-center sm:mx-auto lg:mr-auto lg:mt-0\">\n                <AnimatedGroup variants={transitionVariants}>\n                  <Link\n                    href=\"#link\"\n                    className=\"hover:bg-background dark:hover:border-t-border bg-muted group mx-auto flex w-fit items-center gap-4 rounded-full border p-1 pl-4 shadow-md shadow-black/5 transition-all duration-300 dark:border-t-white/5 dark:shadow-zinc-950\">\n                    <span className=\"text-foreground text-sm\">Novo: Template com sistema de créditos</span>\n                    <span className=\"dark:border-background block h-4 w-0.5 border-l bg-white dark:bg-zinc-700\"></span>\n\n                    <div className=\"bg-background group-hover:bg-muted size-6 overflow-hidden rounded-full duration-500\">\n                      <div className=\"flex w-12 -translate-x-1/2 duration-500 ease-in-out group-hover:translate-x-0\">\n                        <span className=\"flex size-6\">\n                          <ArrowRight className=\"m-auto size-3\" />\n                        </span>\n                        <span className=\"flex size-6\">\n                          <ArrowRight className=\"m-auto size-3\" />\n                        </span>\n                      </div>\n          </div>\n                  </Link>\n\n                  <h1\n                    className=\"mt-8 max-w-4xl mx-auto text-balance text-6xl md:text-7xl lg:mt-16 xl:text-[5.25rem]\">\n                    Crie seu microsaas com I.A. em um dia\n          </h1>\n                  <p\n                    className=\"mx-auto mt-8 max-w-2xl text-balance text-lg\">\n                    Autenticação (Clerk), PostgreSQL + Prisma, pagamentos (Stripe) e sistema de créditos — com UI em Tailwind + Radix. Lance mais rápido com TypeScript do frontend ao backend.\n                  </p>\n                </AnimatedGroup>\n\n                <AnimatedGroup\n                  variants={{\n                    container: {\n                      visible: {\n                        transition: {\n                          staggerChildren: 0.05,\n                          delayChildren: 0.75,\n                        },\n                      },\n                    },\n                    ...transitionVariants,\n                  }}\n                  className=\"mt-12 flex flex-col items-center justify-center gap-2 md:flex-row\">\n                  <div\n                    key={1}\n                    className=\"bg-foreground/10 rounded-[14px] border p-0.5\">\n                    <Button\n                      asChild\n                      size=\"lg\"\n                      className=\"rounded-xl px-5 text-base\">\n                      <Link href=\"/sign-up\">\n                        <span className=\"text-nowrap\">Criar conta</span>\n                      </Link>\n            </Button>\n                  </div>\n                  <Button\n                    key={2}\n                    asChild\n                    size=\"lg\"\n                    variant=\"ghost\"\n                    className=\"h-10.5 rounded-xl px-5\">\n                    <Link href=\"#pricing\">\n                      <span className=\"text-nowrap\">Ver preços</span>\n                    </Link>\n            </Button>\n                </AnimatedGroup>\n              </div>\n            </div>\n\n            <AnimatedGroup\n              variants={{\n                container: {\n                  visible: {\n                    transition: {\n                      staggerChildren: 0.05,\n                      delayChildren: 0.75,\n                    },\n                  },\n                },\n                ...transitionVariants,\n              }}>\n              <div className=\"relative -mr-56 mt-8 overflow-hidden px-2 sm:mr-0 sm:mt-12 md:mt-20\">\n                <div\n                  aria-hidden\n                  className=\"bg-gradient-to-b to-background absolute inset-0 z-10 from-transparent from-35%\"\n                />\n                <div className=\"inset-shadow-2xs ring-background dark:inset-shadow-white/20 bg-background relative mx-auto max-w-6xl overflow-hidden rounded-2xl border p-4 shadow-lg shadow-zinc-950/15 ring-1\">\n                  <Image\n                    className=\"bg-background aspect-15/8 relative hidden rounded-2xl dark:block\"\n                    src=\"https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?q=80&w=2700&auto=format&fit=crop\"\n                    alt=\"tela do app\"\n                    width={2700}\n                    height={1440}\n                  />\n                  <Image\n                    className=\"z-2 border-border/25 aspect-15/8 relative rounded-2xl border dark:hidden\"\n                    src=\"https://images.unsplash.com/photo-1519389950473-47ba0277781c?q=80&w=2700&auto=format&fit=crop\"\n                    alt=\"tela do app\"\n                    width={2700}\n                    height={1440}\n                  />\n                </div>\n              </div>\n            </AnimatedGroup>\n          </div>\n        </section>\n        <section className=\"bg-background pb-16 pt-16 md:pb-32\">\n          <div className=\"group relative m-auto max-w-5xl px-6\">\n            <div className=\"absolute inset-0 z-10 flex scale-95 items-center justify-center opacity-0 duration-500 group-hover:scale-100 group-hover:opacity-100\">\n              <Link\n                href=\"/\"\n                className=\"block text-sm duration-150 hover:opacity-75\">\n                <span> Conheça nossos clientes</span>\n\n                <ChevronRight className=\"ml-1 inline-block size-3\" />\n              </Link>\n            </div>\n            <div className=\"group-hover:blur-xs mx-auto mt-12 grid max-w-2xl grid-cols-4 gap-x-12 gap-y-8 transition-all duration-500 group-hover:opacity-50 sm:gap-x-16 sm:gap-y-14\">\n              <div className=\"flex\">\n                <Image\n                  className=\"mx-auto h-5 w-fit dark:invert\"\n                  src=\"https://html.tailus.io/blocks/customers/nvidia.svg\"\n                  alt=\"Nvidia Logo\"\n                  width={80}\n                  height={20}\n                />\n              </div>\n\n              <div className=\"flex\">\n                <Image\n                  className=\"mx-auto h-4 w-fit dark:invert\"\n                  src=\"https://html.tailus.io/blocks/customers/column.svg\"\n                  alt=\"Column Logo\"\n                  width={80}\n                  height={16}\n                />\n              </div>\n              <div className=\"flex\">\n                <Image\n                  className=\"mx-auto h-4 w-fit dark:invert\"\n                  src=\"https://html.tailus.io/blocks/customers/github.svg\"\n                  alt=\"GitHub Logo\"\n                  width={80}\n                  height={16}\n                />\n              </div>\n              <div className=\"flex\">\n                <Image\n                  className=\"mx-auto h-5 w-fit dark:invert\"\n                  src=\"https://html.tailus.io/blocks/customers/nike.svg\"\n                  alt=\"Nike Logo\"\n                  width={80}\n                  height={20}\n                />\n              </div>\n              <div className=\"flex\">\n                <Image\n                  className=\"mx-auto h-5 w-fit dark:invert\"\n                  src=\"https://html.tailus.io/blocks/customers/lemonsqueezy.svg\"\n                  alt=\"Lemon Squeezy Logo\"\n                  width={80}\n                  height={20}\n                />\n              </div>\n              <div className=\"flex\">\n                <Image\n                  className=\"mx-auto h-4 w-fit dark:invert\"\n                  src=\"https://html.tailus.io/blocks/customers/laravel.svg\"\n                  alt=\"Laravel Logo\"\n                  width={80}\n                  height={16}\n                />\n              </div>\n              <div className=\"flex\">\n                <Image\n                  className=\"mx-auto h-7 w-fit dark:invert\"\n                  src=\"https://html.tailus.io/blocks/customers/lilly.svg\"\n                  alt=\"Lilly Logo\"\n                  width={80}\n                  height={28}\n                />\n              </div>\n\n              <div className=\"flex\">\n                <Image\n                  className=\"mx-auto h-6 w-fit dark:invert\"\n                  src=\"https://html.tailus.io/blocks/customers/openai.svg\"\n                  alt=\"OpenAI Logo\"\n                  width={80}\n                  height={24}\n                />\n          </div>\n        </div>\n      </div>\n    </section>\n      </main>\n    </>\n  )\n}\n\n// Commented out for future use\n// const menuItems = [\n//   { name: 'Funcionalidades', href: '#link' },\n//   { name: 'Solução', href: '#link' },\n//   { name: 'Preços', href: '#link' },\n//   { name: 'Sobre', href: '#link' },\n// ]\n\n/*\nconst HeroHeader = () => {\n  const [menuState, setMenuState] = React.useState(false)\n  const [isScrolled, setIsScrolled] = React.useState(false)\n\n  React.useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50)\n    }\n    window.addEventListener('scroll', handleScroll)\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, [])\n  return (\n    <header>\n      <nav\n        data-state={menuState && 'active'}\n        className=\"fixed z-20 w-full px-2 group\">\n        <div className={cn('mx-auto mt-2 max-w-6xl px-6 transition-all duration-300 lg:px-12', isScrolled && 'bg-background/50 max-w-4xl rounded-2xl border backdrop-blur-lg lg:px-5')}>\n          <div className=\"relative flex flex-wrap items-center justify-between gap-6 py-3 lg:gap-0 lg:py-4\">\n            <div className=\"flex w-full justify-between lg:w-auto\">\n              <Link\n                href=\"/\"\n                aria-label=\"home\"\n                className=\"flex items-center space-x-2\">\n                <Logo />\n              </Link>\n\n              <button\n                onClick={() => setMenuState(!menuState)}\n                aria-label={menuState == true ? 'Fechar Menu' : 'Abrir Menu'}\n                className=\"relative z-20 -m-2.5 -mr-4 block cursor-pointer p-2.5 lg:hidden\">\n                <Menu className=\"in-data-[state=active]:rotate-180 group-data-[state=active]:scale-0 group-data-[state=active]:opacity-0 m-auto size-6 duration-200\" />\n                <X className=\"group-data-[state=active]:rotate-0 group-data-[state=active]:scale-100 group-data-[state=active]:opacity-100 absolute inset-0 m-auto size-6 -rotate-180 scale-0 opacity-0 duration-200\" />\n              </button>\n            </div>\n\n            <div className=\"absolute inset-0 m-auto hidden size-fit lg:block\">\n              <ul className=\"flex gap-8 text-sm\">\n                {menuItems.map((item, index) => (\n                  <li key={index}>\n                    <Link\n                      href={item.href}\n                      className=\"text-muted-foreground hover:text-accent-foreground block duration-150\">\n                      <span>{item.name}</span>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            <div className=\"bg-background group-data-[state=active]:block lg:group-data-[state=active]:flex mb-6 hidden w-full flex-wrap items-center justify-end space-y-8 rounded-3xl border p-6 shadow-2xl shadow-zinc-300/20 md:flex-nowrap lg:m-0 lg:flex lg:w-fit lg:gap-6 lg:space-y-0 lg:border-transparent lg:bg-transparent lg:p-0 lg:shadow-none dark:shadow-none dark:lg:bg-transparent\">\n              <div className=\"lg:hidden\">\n                <ul className=\"space-y-6 text-base\">\n                  {menuItems.map((item, index) => (\n                    <li key={index}>\n                      <Link\n                        href={item.href}\n                        className=\"text-muted-foreground hover:text-accent-foreground block duration-150\">\n                        <span>{item.name}</span>\n                      </Link>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n              <div className=\"flex w-full flex-col space-y-3 sm:flex-row sm:gap-3 sm:space-y-0 md:w-fit\">\n                <Button\n                  asChild\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className={cn(isScrolled && 'lg:hidden')}>\n                  <Link href=\"#\">\n                    <span>Entrar</span>\n                  </Link>\n                </Button>\n                <Button\n                  asChild\n                  size=\"sm\"\n                  className={cn(isScrolled && 'lg:hidden')}>\n                  <Link href=\"#\">\n                    <span>Cadastre-se</span>\n                  </Link>\n                </Button>\n                <Button\n                  asChild\n                  size=\"sm\"\n                  className={cn(isScrolled ? 'lg:inline-flex' : 'hidden')}>\n                  <Link href=\"#\">\n                    <span>Comece Agora</span>\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </header>\n  )\n}\n*/\n\n// Commented out for future use\n// const Logo = ({ className }: { className?: string }) => {\n//   return (\n//     <svg\n//       viewBox=\"0 0 78 18\"\n//       fill=\"none\"\n//       xmlns=\"http://www.w3.org/2000/svg\"\n//       className={cn('h-5 w-auto', className)}>\n//       <path\n//         d=\"M3 0H5V18H3V0ZM13 0H15V18H13V0ZM18 3V5H0V3H18ZM0 15V13H18V15H0Z\"\n//         fill=\"url(#logo-gradient)\"\n//       />\n//       <path\n//         d=\"M27.06 7.054V12.239C27.06 12.5903 27.1393 12.8453 27.298 13.004C27.468 13.1513 27.7513 13.225 28.148 13.225H29.338V14.84H27.808C26.9353 14.84 26.2667 14.636 25.802 14.228C25.3373 13.82 25.105 13.157 25.105 12.239V7.054H24V5.473H25.105V3.144H27.06V5.473H29.338V7.054H27.06ZM30.4782 10.114C30.4782 9.17333 30.6709 8.34033 31.0562 7.615C31.4529 6.88967 31.9855 6.32867 32.6542 5.932C33.3342 5.524 34.0822 5.32 34.8982 5.32C35.6349 5.32 36.2752 5.46733 36.8192 5.762C37.3745 6.04533 37.8165 6.40233 38.1452 6.833V5.473H40.1002V14.84H38.1452V13.446C37.8165 13.888 37.3689 14.2563 36.8022 14.551C36.2355 14.8457 35.5895 14.993 34.8642 14.993C34.0595 14.993 33.3229 14.789 32.6542 14.381C31.9855 13.9617 31.4529 13.3837 31.0562 12.647C30.6709 11.899 30.4782 11.0547 30.4782 10.114ZM38.1452 10.148C38.1452 9.502 38.0092 8.941 37.7372 8.465C37.4765 7.989 37.1309 7.62633 36.7002 7.377C36.2695 7.12767 35.8049 7.003 35.3062 7.003C34.8075 7.003 34.3429 7.12767 33.9122 7.377C33.4815 7.615 33.1302 7.972 32.8582 8.448C32.5975 8.91267 32.4672 9.468 32.4672 10.114C32.4672 10.76 32.5975 11.3267 32.8582 11.814C33.1302 12.3013 33.4815 12.6753 33.9122 12.936C34.3542 13.1853 34.8189 13.31 35.3062 13.31C35.8049 13.31 36.2695 13.1853 36.7002 12.936C37.1309 12.6867 37.4765 12.324 37.7372 11.848C38.0092 11.3607 38.1452 10.794 38.1452 10.148ZM43.6317 4.232C43.2803 4.232 42.9857 4.113 42.7477 3.875C42.5097 3.637 42.3907 3.34233 42.3907 2.991C42.3907 2.63967 42.5097 2.345 42.7477 2.107C42.9857 1.869 43.2803 1.75 43.6317 1.75C43.9717 1.75 44.2607 1.869 44.4987 2.107C44.7367 2.345 44.8557 2.63967 44.8557 2.991C44.8557 3.34233 44.7367 3.637 44.4987 3.875C44.2607 4.113 43.9717 4.232 43.6317 4.232ZM44.5837 5.473V14.84H42.6457V5.473H44.5837ZM49.0661 2.26V14.84H47.1281V2.26H49.0661ZM50.9645 10.114C50.9645 9.17333 51.1572 8.34033 51.5425 7.615C51.9392 6.88967 52.4719 6.32867 53.1405 5.932C53.8205 5.524 54.5685 5.32 55.3845 5.32C56.1212 5.32 56.7615 5.46733 57.3055 5.762C57.8609 6.04533 58.3029 6.40233 58.6315 6.833V5.473H60.5865V14.84H58.6315V13.446C58.3029 13.888 57.8552 14.2563 57.2885 14.551C56.7219 14.8457 56.0759 14.993 55.3505 14.993C54.5459 14.993 53.8092 14.789 53.1405 14.381C52.4719 13.9617 51.9392 13.3837 51.5425 12.647C51.1572 11.899 50.9645 11.0547 50.9645 10.114ZM58.6315 10.148C58.6315 9.502 58.4955 8.941 58.2235 8.465C57.9629 7.989 57.6172 7.62633 57.1865 7.377C56.7559 7.12767 56.2912 7.003 55.7925 7.003C55.2939 7.003 54.8292 7.12767 54.3985 7.377C53.9679 7.615 53.6165 7.972 53.3445 8.448C53.0839 8.91267 52.9535 9.468 52.9535 10.114C52.9535 10.76 53.0839 11.3267 53.3445 11.814C53.6165 12.3013 53.9679 12.6753 54.3985 12.936C54.8405 13.1853 55.3052 13.31 55.7925 13.31C56.2912 13.31 56.7559 13.1853 57.1865 12.936C57.6172 12.6867 57.9629 12.324 58.2235 11.848C58.4955 11.3607 58.6315 10.794 58.6315 10.148ZM65.07 6.833C65.3533 6.357 65.7273 5.98867 66.192 5.728C66.668 5.456 67.229 5.32 67.875 5.32V7.326H67.382C66.6227 7.326 66.0447 7.51867 65.648 7.904C65.2627 8.28933 65.07 8.958 65.07 9.91V14.84H63.132V5.473H65.07V6.833ZM73.3624 10.165L77.6804 14.84H75.0624L71.5944 10.811V14.84H69.6564V2.26H71.5944V9.57L74.9944 5.473H77.6804L73.3624 10.165Z\"\n//         fill=\"currentColor\"\n//       />\n//       <defs>\n//         <linearGradient\n//           id=\"logo-gradient\"\n//           x1=\"10\"\n//           y1=\"0\"\n//           x2=\"10\"\n//           y2=\"20\"\n//           gradientUnits=\"userSpaceOnUse\">\n//           <stop stopColor=\"#9B99FE\" />\n//           <stop\n//             offset=\"1\"\n//             stopColor=\"#2BC8B7\"\n//           />\n//         </linearGradient>\n//       </defs>\n//     </svg>\n//   )\n// }\n","size_bytes":19991},"src/components/marketing/testimonials.tsx":{"content":"const testimonials = [\n  {\n    name: \"Avery L.\",\n    role: \"Fundador, PixelForge\",\n    quote: \"Nós enviamos nosso MVP em dias, não em semanas. O sistema de créditos e autenticação economizou muito tempo.\",\n  },\n  {\n    name: \"Jordan P.\",\n    role: \"CTO, FlowLabs\",\n    quote: \"Padrões limpos para APIs e banco de dados tornaram a integração de novos desenvolvedores indolor.\",\n  },\n  {\n    name: \"Sam R.\",\n    role: \"Indie Hacker\",\n    quote: \"Exatamente o que eu precisava para ir da ideia a usuários pagantes rapidamente.\",\n  },\n]\n\nexport function Testimonials() {\n  return (\n    <section className=\"container mx-auto px-4 mt-24\">\n      <div className=\"mx-auto max-w-2xl text-center\">\n        <h2 className=\"text-3xl md:text-4xl font-semibold tracking-tight\">Amado pelos construtores</h2>\n        <p className=\"mt-3 text-muted-foreground\">Junte-se a equipes que enviam com confiança e velocidade.</p>\n      </div>\n      <div className=\"mt-10 grid grid-cols-1 gap-6 md:grid-cols-3\">\n        {testimonials.map((t) => (\n          <figure\n            key={t.name}\n            className=\"group relative overflow-hidden rounded-xl border border-gray-100/80 bg-white p-6 transition-all duration-300 will-change-transform hover:-translate-y-0.5 hover:shadow-[0_2px_12px_rgba(0,0,0,0.03)] dark:border-white/10 dark:bg-black\"\n          >\n            <div className=\"absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100\">\n              <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(0,0,0,0.02)_1px,transparent_1px)] bg-[length:4px_4px] dark:bg-[radial-gradient(circle_at_center,rgba(255,255,255,0.02)_1px,transparent_1px)]\" />\n            </div>\n            <blockquote className=\"relative text-sm leading-relaxed\">“{t.quote}”</blockquote>\n            <figcaption className=\"relative mt-4 text-sm text-muted-foreground\">\n              <span className=\"font-medium text-foreground\">{t.name}</span> · {t.role}\n            </figcaption>\n            <div className=\"absolute inset-0 -z-10 rounded-xl p-px opacity-0 transition-opacity duration-300 group-hover:opacity-100 bg-gradient-to-br from-transparent via-gray-100/50 to-transparent dark:via-white/10\" />\n          </figure>\n        ))}\n      </div>\n    </section>\n  )\n}\n","size_bytes":2286},"src/components/navigation/breadcrumb-nav.tsx":{"content":"\"use client\"\n\nimport { ChevronRight } from \"lucide-react\"\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport React from \"react\"\n\nexport function BreadcrumbNav() {\n  const pathname = usePathname()\n  const segments = pathname.split(\"/\").filter(Boolean)\n\n  return (\n    <nav aria-label=\"Breadcrumb\" className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n      <Link href=\"/dashboard\" className=\"hover:text-foreground transition-colors\">\n        Início\n      </Link>\n      {segments.length > 0 && segments[0] !== \"home\" && (\n        <>\n          {segments.map((segment, index) => {\n            const href = `/${segments.slice(0, index + 1).join(\"/\")}`\n            const isLast = index === segments.length - 1\n            const label = segment.charAt(0).toUpperCase() + segment.slice(1).replace(/-/g, \" \")\n\n            return (\n              <React.Fragment key={segment}>\n                <ChevronRight className=\"h-4 w-4\" />\n                {isLast ? (\n                  <span className=\"text-foreground font-medium\">{label}</span>\n                ) : (\n                  <Link href={href} className=\"hover:text-foreground transition-colors\">\n                    {label}\n                  </Link>\n                )}\n              </React.Fragment>\n            )\n          })}\n        </>\n      )}\n    </nav>\n  )\n}","size_bytes":1357},"src/components/providers/query-provider.tsx":{"content":"\"use client\";\n\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\nimport { useState } from \"react\";\n\nexport function QueryProvider({ children }: { children: React.ReactNode }) {\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            staleTime: 60 * 1000, // 1 minute\n            refetchOnWindowFocus: false,\n            retry: (failureCount, error: unknown) => {\n              // Don't retry on 4xx errors\n              if ((error as { status?: number })?.status >= 400 && (error as { status?: number })?.status < 500) {\n                return false;\n              }\n              return failureCount < 3;\n            },\n          },\n          mutations: {\n            retry: false,\n          },\n        },\n      })\n  );\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  );\n}","size_bytes":1045},"src/components/ui/alert-dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn(\"text-lg font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: \"outline\" }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":3864},"src/components/ui/animated-group.tsx":{"content":"'use client';\nimport { ReactNode } from 'react';\nimport { motion, Variants } from 'framer-motion';\nimport { cn } from '@/lib/utils';\nimport React from 'react';\n\ntype PresetType =\n  | 'fade'\n  | 'slide'\n  | 'scale'\n  | 'blur'\n  | 'blur-slide'\n  | 'zoom'\n  | 'flip'\n  | 'bounce'\n  | 'rotate'\n  | 'swing';\n\ntype AnimatedGroupProps = {\n  children: ReactNode;\n  className?: string;\n  variants?: {\n    container?: Variants;\n    item?: Variants;\n  };\n  preset?: PresetType;\n};\n\nconst defaultContainerVariants: Variants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.1,\n    },\n  },\n};\n\nconst defaultItemVariants: Variants = {\n  hidden: { opacity: 0 },\n  visible: { opacity: 1 },\n};\n\nconst presetVariants: Record<\n  PresetType,\n  { container: Variants; item: Variants }\n> = {\n  fade: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0 },\n      visible: { opacity: 1 },\n    },\n  },\n  slide: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, y: 20 },\n      visible: { opacity: 1, y: 0 },\n    },\n  },\n  scale: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, scale: 0.8 },\n      visible: { opacity: 1, scale: 1 },\n    },\n  },\n  blur: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, filter: 'blur(4px)' },\n      visible: { opacity: 1, filter: 'blur(0px)' },\n    },\n  },\n  'blur-slide': {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, filter: 'blur(4px)', y: 20 },\n      visible: { opacity: 1, filter: 'blur(0px)', y: 0 },\n    },\n  },\n  zoom: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, scale: 0.5 },\n      visible: {\n        opacity: 1,\n        scale: 1,\n        transition: { type: 'spring', stiffness: 300, damping: 20 },\n      },\n    },\n  },\n  flip: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, rotateX: -90 },\n      visible: {\n        opacity: 1,\n        rotateX: 0,\n        transition: { type: 'spring', stiffness: 300, damping: 20 },\n      },\n    },\n  },\n  bounce: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, y: -50 },\n      visible: {\n        opacity: 1,\n        y: 0,\n        transition: { type: 'spring', stiffness: 400, damping: 10 },\n      },\n    },\n  },\n  rotate: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, rotate: -180 },\n      visible: {\n        opacity: 1,\n        rotate: 0,\n        transition: { type: 'spring', stiffness: 200, damping: 15 },\n      },\n    },\n  },\n  swing: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, rotate: -10 },\n      visible: {\n        opacity: 1,\n        rotate: 0,\n        transition: { type: 'spring', stiffness: 300, damping: 8 },\n      },\n    },\n  },\n};\n\nfunction AnimatedGroup({\n  children,\n  className,\n  variants,\n  preset,\n}: AnimatedGroupProps) {\n  const selectedVariants = preset\n    ? presetVariants[preset]\n    : { container: defaultContainerVariants, item: defaultItemVariants };\n  const containerVariants = variants?.container || selectedVariants.container;\n  const itemVariants = variants?.item || selectedVariants.item;\n\n  return (\n    <motion.div\n      initial='hidden'\n      animate='visible'\n      variants={containerVariants}\n      className={cn(className)}\n    >\n      {React.Children.map(children, (child, index) => (\n        <motion.div key={index} variants={itemVariants}>\n          {child}\n        </motion.div>\n      ))}\n    </motion.div>\n  );\n}\n\nexport { AnimatedGroup };\n\n\n","size_bytes":3645},"src/components/ui/autocomplete.tsx":{"content":"\"use client\"\n\nimport * as React from 'react'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { DropdownTriggerButton } from '@/components/ui/dropdown-trigger-button'\nimport { Input } from '@/components/ui/input'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { cn } from '@/lib/utils'\n\nexport type AutocompleteItem = { value: string; label: string }\n\ntype AutocompleteProps = {\n  items: AutocompleteItem[]\n  value?: string\n  onChange: (value: string) => void\n  icon?: React.ReactNode\n  placeholder?: string\n  buttonAriaLabel?: string\n  className?: string\n}\n\nexport function Autocomplete({\n  items,\n  value,\n  onChange,\n  icon,\n  placeholder = 'Buscar... ',\n  buttonAriaLabel,\n  className,\n}: AutocompleteProps) {\n  const [open, setOpen] = React.useState(false)\n  const [query, setQuery] = React.useState('')\n  const [activeIndex, setActiveIndex] = React.useState(0)\n\n  const filtered = React.useMemo(() => {\n    const q = query.trim().toLowerCase()\n    if (!q) return items\n    return items.filter((i) => i.label.toLowerCase().includes(q) || i.value.toLowerCase().includes(q))\n  }, [items, query])\n\n  React.useEffect(() => {\n    if (open) setActiveIndex(0)\n  }, [open, query])\n\n  const selected = React.useMemo(() => items.find((i) => i.value === value), [items, value])\n\n  const selectAt = (idx: number) => {\n    const item = filtered[idx]\n    if (item) {\n      onChange(item.value)\n      setOpen(false)\n    }\n  }\n\n  return (\n    <DropdownMenu open={open} onOpenChange={(o) => { setOpen(o); if (!o) setQuery('') }}>\n      <DropdownMenuTrigger asChild>\n        <DropdownTriggerButton isOpen={open} aria-label={buttonAriaLabel} className={cn('min-w-[140px] justify-start', className)}>\n          {icon}\n          <span className=\"truncate max-w-[200px]\">{selected?.label || 'Selecionar...'}</span>\n        </DropdownTriggerButton>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"start\" className=\"w-[320px] p-0\">\n        <div className=\"p-2\">\n          <Input\n            autoFocus\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            placeholder={placeholder}\n            className=\"h-8\"\n            onKeyDown={(e) => {\n              if (e.key === 'ArrowDown') {\n                e.preventDefault()\n                setActiveIndex((i) => (i + 1) % Math.max(filtered.length, 1))\n              } else if (e.key === 'ArrowUp') {\n                e.preventDefault()\n                setActiveIndex((i) => (i - 1 + Math.max(filtered.length, 1)) % Math.max(filtered.length, 1))\n              } else if (e.key === 'Enter') {\n                e.preventDefault()\n                selectAt(activeIndex)\n              } else if (e.key === 'Escape') {\n                setOpen(false)\n              }\n            }}\n          />\n        </div>\n        <ScrollArea className=\"max-h-72 p-1\">\n          <div role=\"listbox\" aria-activedescendant={filtered[activeIndex]?.value} className=\"space-y-1\">\n            {filtered.length === 0 && (\n              <div className=\"px-2 py-3 text-sm text-muted-foreground\">Sem resultados</div>\n            )}\n            {filtered.map((item, idx) => (\n              <button\n                key={item.value}\n                role=\"option\"\n                aria-selected={value === item.value}\n                className={cn(\n                  'w-full rounded-md px-2 py-1.5 text-left text-sm',\n                  idx === activeIndex ? 'bg-muted text-foreground' : 'hover:bg-muted/60',\n                )}\n                onMouseEnter={() => setActiveIndex(idx)}\n                onClick={() => {\n                  onChange(item.value)\n                  setOpen(false)\n                }}\n              >\n                {item.label}\n              </button>\n            ))}\n          </div>\n        </ScrollArea>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n\n","size_bytes":3908},"src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        // Subtle gradient ring + neon border using CSS utilities\n        \"relative flex size-10 shrink-0 overflow-hidden rounded-full neon-border\",\n        // gradient backdrop if no image or while loading\n        \"bg-[radial-gradient(120%_120%_at_10%_-10%,color-mix(in_oklch,var(--retro-cyan)_25%,transparent),transparent_55%),linear-gradient(135deg,color-mix(in_oklch,var(--retro-cyan)_35%,var(--background))_0%,color-mix(in_oklch,var(--retro-magenta)_30%,var(--background))_100%)]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        // Gradient text badge with subtle glow\n        \"flex h-full w-full items-center justify-center rounded-full text-xs font-semibold text-primary-foreground\",\n        \"bg-[linear-gradient(135deg,color-mix(in_oklch,var(--retro-cyan)_55%,var(--primary)_45%)_0%,color-mix(in_oklch,var(--retro-magenta)_50%,var(--primary)_50%)_100%)]\",\n        \"shadow-[0_0_0_1px_color-mix(in_oklch,var(--neon)_20%,transparent)_inset]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1860},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1631},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { Loader2 } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg text-sm font-medium transition-all duration-200 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-zinc-900 dark:focus-visible:ring-zinc-300 relative\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-zinc-900 text-white hover:bg-zinc-800 active:bg-zinc-700 \\\ndark:bg-zinc-100 dark:text-zinc-900 dark:hover:bg-zinc-200 dark:active:bg-zinc-300 \\\nshadow-sm\",\n        destructive:\n          \"bg-red-600 text-white hover:bg-red-700 active:bg-red-800 \\\ndark:bg-red-600 dark:hover:bg-red-700 dark:active:bg-red-800 \\\nshadow-sm focus-visible:ring-red-600 dark:focus-visible:ring-red-600\",\n        outline:\n          \"border border-zinc-200 bg-white text-zinc-900 hover:bg-zinc-50 active:bg-zinc-100 \\\ndark:border-zinc-700 dark:bg-transparent dark:text-zinc-100 dark:hover:bg-zinc-800 dark:active:bg-zinc-700 \\\nshadow-sm\",\n        secondary:\n          \"bg-zinc-100 text-zinc-900 hover:bg-zinc-200 active:bg-zinc-300 \\\ndark:bg-zinc-800 dark:text-zinc-100 dark:hover:bg-zinc-700 dark:active:bg-zinc-600 \\\nshadow-sm\",\n        ghost:\n          \"text-zinc-600 hover:bg-zinc-100 hover:text-zinc-900 active:bg-zinc-200 \\\ndark:text-zinc-400 dark:hover:bg-zinc-800 dark:hover:text-zinc-100 dark:active:bg-zinc-700\",\n        link: \"text-zinc-900 underline-offset-4 hover:underline hover:text-zinc-700 \\\ndark:text-zinc-100 dark:hover:text-zinc-300 \\\nfocus-visible:ring-0 focus-visible:ring-offset-0\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 px-3 text-xs\",\n        lg: \"h-11 px-8 text-base\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\ninterface ButtonProps\n  extends React.ComponentProps<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n  loadingText?: string\n}\n\nfunction Button({\n  className,\n  variant = 'default',\n  size,\n  asChild = false,\n  isLoading = false,\n  loadingText,\n  children,\n  disabled,\n  ...props\n}: ButtonProps) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      disabled={disabled || isLoading}\n      {...props}\n    >\n      {isLoading ? (\n        <>\n          <Loader2 className=\"h-4 w-4 animate-spin\" />\n          {loadingText || children}\n        </>\n      ) : (\n        children\n      )}\n    </Comp>\n  )\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2960},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm glass-panel neon-border\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold text-neon\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":2023},"src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":800},"src/components/ui/component.tsx":{"content":"\"use client\"\n\nimport React, {\n  ReactNode,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\"\nimport {\n  AnimatePresence as FramerAnimatePresence,\n  HTMLMotionProps,\n  TargetAndTransition,\n  motion as framerMotion,\n  useMotionValue as framerUseMotionValue,\n  useSpring as framerUseSpring,\n} from \"framer-motion\"\nimport type { Transition, Easing } from \"framer-motion\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst springConfig = { stiffness: 200, damping: 20, bounce: 0.2 }\nconst defaultEase: Easing = [0.42, 0, 0.58, 1]\n\ninterface ExpandableContextType {\n  isExpanded: boolean\n  toggleExpand: () => void\n  expandDirection: \"vertical\" | \"horizontal\" | \"both\"\n  expandBehavior: \"replace\" | \"push\"\n  transitionDuration: number\n  easeType: Easing | Easing[]\n  initialDelay: number\n  onExpandEnd?: () => void\n  onCollapseEnd?: () => void\n}\n\nconst ExpandableContext = createContext<ExpandableContextType>({\n  isExpanded: false,\n  toggleExpand: () => {},\n  expandDirection: \"vertical\",\n  expandBehavior: \"replace\",\n  transitionDuration: 0.3,\n  easeType: defaultEase,\n  initialDelay: 0,\n})\n\nconst useExpandable = () => useContext(ExpandableContext)\n\ntype ExpandablePropsBase = Omit<HTMLMotionProps<\"div\">, \"children\">\n\ninterface ExpandableProps extends ExpandablePropsBase {\n  children: ReactNode | ((props: { isExpanded: boolean }) => ReactNode)\n  expanded?: boolean\n  onToggle?: () => void\n  transitionDuration?: number\n  easeType?: Easing | Easing[]\n  expandDirection?: \"vertical\" | \"horizontal\" | \"both\"\n  expandBehavior?: \"replace\" | \"push\"\n  initialDelay?: number\n  onExpandStart?: () => void\n  onExpandEnd?: () => void\n  onCollapseStart?: () => void\n  onCollapseEnd?: () => void\n}\n\nexport const Component = React.forwardRef<HTMLDivElement, ExpandableProps>(\n  (\n    {\n      children,\n      expanded,\n      onToggle,\n      transitionDuration = 0.3,\n      easeType = defaultEase,\n      expandDirection = \"vertical\",\n      expandBehavior = \"replace\",\n      initialDelay = 0,\n      onExpandStart,\n      onExpandEnd,\n      onCollapseStart,\n      onCollapseEnd,\n      ...props\n    },\n    ref\n  ) => {\n    const [isExpandedInternal, setIsExpandedInternal] = useState(false)\n    const isExpanded = expanded !== undefined ? expanded : isExpandedInternal\n    const toggleExpand =\n      onToggle || (() => setIsExpandedInternal((prev) => !prev))\n\n    useEffect(() => {\n      if (isExpanded) {\n        onExpandStart?.()\n      } else {\n        onCollapseStart?.()\n      }\n    }, [isExpanded, onExpandStart, onCollapseStart])\n\n    const contextValue: ExpandableContextType = {\n      isExpanded,\n      toggleExpand,\n      expandDirection,\n      expandBehavior,\n      transitionDuration,\n      easeType,\n      initialDelay,\n      onExpandEnd,\n      onCollapseEnd,\n    }\n\n    return (\n      <ExpandableContext.Provider value={contextValue}>\n        <framerMotion.div\n          ref={ref}\n          initial={false}\n          animate={{\n            transition: {\n              duration: transitionDuration,\n              ease: easeType,\n              delay: initialDelay,\n            },\n          }}\n          {...props}\n        >\n          {typeof children === \"function\" ? children({ isExpanded }) : children}\n        </framerMotion.div>\n      </ExpandableContext.Provider>\n    )\n  }\n)\nComponent.displayName = \"Component\"\n\ntype AnimationPreset = {\n  initial: TargetAndTransition\n  animate: TargetAndTransition\n  exit: TargetAndTransition\n}\n\nconst ANIMATION_PRESETS: Record<string, AnimationPreset> = {\n  fade: {\n    initial: { opacity: 0 },\n    animate: { opacity: 1 },\n    exit: { opacity: 0 },\n  },\n  \"slide-up\": {\n    initial: { opacity: 0, y: 20 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: 20 },\n  },\n  \"slide-down\": {\n    initial: { opacity: 0, y: -20 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: -20 },\n  },\n  \"slide-left\": {\n    initial: { opacity: 0, x: 20 },\n    animate: { opacity: 1, x: 0 },\n    exit: { opacity: 0, x: 20 },\n  },\n  \"slide-right\": {\n    initial: { opacity: 0, x: -20 },\n    animate: { opacity: 1, x: 0 },\n    exit: { opacity: 0, x: -20 },\n  },\n  scale: {\n    initial: { opacity: 0, scale: 0.8 },\n    animate: { opacity: 1, scale: 1 },\n    exit: { opacity: 0, scale: 0.8 },\n  },\n  rotate: {\n    initial: { opacity: 0, rotate: -10 },\n    animate: { opacity: 1, rotate: 0 },\n    exit: { opacity: 0, rotate: -10 },\n  },\n  \"blur-sm\": {\n    initial: { opacity: 0, filter: \"blur(4px)\" },\n    animate: { opacity: 1, filter: \"blur(0px)\" },\n    exit: { opacity: 0, filter: \"blur(4px)\" },\n  },\n  \"blur-md\": {\n    initial: { opacity: 0, filter: \"blur(8px)\" },\n    animate: { opacity: 1, filter: \"blur(0px)\" },\n    exit: { opacity: 0, filter: \"blur(8px)\" },\n  },\n  \"blur-lg\": {\n    initial: { opacity: 0, filter: \"blur(16px)\" },\n    animate: { opacity: 1, filter: \"blur(0px)\" },\n    exit: { opacity: 0, filter: \"blur(16px)\" },\n  },\n}\n\ninterface AnimationProps {\n  initial?: TargetAndTransition\n  animate?: TargetAndTransition\n  exit?: TargetAndTransition\n  transition?: Transition\n}\n\nconst getAnimationProps = (\n  preset: keyof typeof ANIMATION_PRESETS | undefined,\n  animateIn?: AnimationProps,\n  animateOut?: AnimationProps\n) => {\n  const defaultAnimation = {\n    initial: {},\n    animate: {},\n    exit: {},\n  }\n\n  const presetAnimation = preset ? ANIMATION_PRESETS[preset] : defaultAnimation\n\n  return {\n    initial: presetAnimation.initial,\n    animate: presetAnimation.animate,\n    exit: animateOut?.exit || presetAnimation.exit,\n  }\n}\n\nexport const ExpandableContent = React.forwardRef<\n  HTMLDivElement,\n  Omit<HTMLMotionProps<\"div\">, \"ref\"> & {\n    preset?: keyof typeof ANIMATION_PRESETS\n    animateIn?: AnimationProps\n    animateOut?: AnimationProps\n    stagger?: boolean\n    staggerChildren?: number\n    keepMounted?: boolean\n  }\n>(\n  (\n    {\n      children,\n      preset,\n      animateIn,\n      animateOut,\n      stagger = false,\n      staggerChildren = 0.1,\n      keepMounted = false,\n      ...props\n    },\n    ref\n  ) => {\n    const { isExpanded, transitionDuration, easeType } = useExpandable()\n    const [measureRef, { height: measuredHeight }] = useMeasure()\n    const animatedHeight = framerUseMotionValue(0)\n    const smoothHeight = framerUseSpring(animatedHeight, springConfig)\n\n    useEffect(() => {\n      if (isExpanded) {\n        animatedHeight.set(measuredHeight)\n      } else {\n        animatedHeight.set(0)\n      }\n    }, [isExpanded, measuredHeight, animatedHeight])\n\n    const animationProps = getAnimationProps(preset, animateIn, animateOut)\n\n    return (\n      <framerMotion.div\n        ref={ref}\n        style={{\n          height: smoothHeight,\n          overflow: \"hidden\",\n        }}\n        transition={{ duration: transitionDuration, ease: easeType }}\n        {...props}\n      >\n        <FramerAnimatePresence initial={false}>\n          {(isExpanded || keepMounted) && (\n            <framerMotion.div\n              ref={measureRef}\n              initial={animationProps.initial}\n              animate={animationProps.animate}\n              exit={animationProps.exit}\n              transition={{ duration: transitionDuration, ease: easeType }}\n            >\n              {stagger ? (\n                <framerMotion.div\n                  variants={{\n                    hidden: {},\n                    visible: {\n                      transition: {\n                        staggerChildren: staggerChildren,\n                      },\n                    },\n                  }}\n                  initial=\"hidden\"\n                  animate=\"visible\"\n                >\n                  {React.Children.map(\n                    children as React.ReactNode,\n                    (child, index) => (\n                      <framerMotion.div\n                        key={index}\n                        variants={{\n                          hidden: { opacity: 0, y: 20 },\n                          visible: { opacity: 1, y: 0 },\n                        }}\n                      >\n                        {child}\n                      </framerMotion.div>\n                    )\n                  )}\n                </framerMotion.div>\n              ) : (\n                children\n              )}\n            </framerMotion.div>\n          )}\n        </FramerAnimatePresence>\n      </framerMotion.div>\n    )\n  }\n)\nExpandableContent.displayName = \"ExpandableContent\"\n\n\ninterface ExpandableCardProps {\n  children: ReactNode\n  className?: string\n  collapsedSize?: { width?: number; height?: number }\n  expandedSize?: { width?: number; height?: number }\n  hoverToExpand?: boolean\n  expandDelay?: number\n  collapseDelay?: number\n}\n\nexport const ExpandableCard = React.forwardRef<HTMLDivElement, ExpandableCardProps>(\n  (\n    {\n      children,\n      className = \"\",\n      collapsedSize = { width: 320, height: 211 },\n      expandedSize = { width: 480, height: undefined },\n      hoverToExpand = false,\n      expandDelay = 0,\n      collapseDelay = 0,\n      ...props\n    },\n    ref\n  ) => {\n    const { isExpanded, toggleExpand, expandDirection } = useExpandable()\n    const [measureRef, { width, height }] = useMeasure()\n    const animatedWidth = framerUseMotionValue(collapsedSize.width || 0)\n    const animatedHeight = framerUseMotionValue(collapsedSize.height || 0)\n    const smoothWidth = framerUseSpring(animatedWidth, springConfig)\n    const smoothHeight = framerUseSpring(animatedHeight, springConfig)\n\n    useEffect(() => {\n      if (isExpanded) {\n        animatedWidth.set(expandedSize.width || width)\n        animatedHeight.set(expandedSize.height || height)\n      } else {\n        animatedWidth.set(collapsedSize.width || width)\n        animatedHeight.set(collapsedSize.height || height)\n      }\n    }, [\n      isExpanded,\n      collapsedSize,\n      expandedSize,\n      width,\n      height,\n      animatedWidth,\n      animatedHeight,\n    ])\n\n    const handleHover = () => {\n      if (hoverToExpand && !isExpanded) {\n        setTimeout(toggleExpand, expandDelay)\n      }\n    }\n\n    const handleHoverEnd = () => {\n      if (hoverToExpand && isExpanded) {\n        setTimeout(toggleExpand, collapseDelay)\n      }\n    }\n\n    return (\n      <framerMotion.div\n        ref={ref}\n        className={cn(\"cursor-pointer\", className)}\n        style={{\n          width:\n            expandDirection === \"vertical\" ? collapsedSize.width : smoothWidth,\n          height:\n            expandDirection === \"horizontal\"\n              ? collapsedSize.height\n              : smoothHeight,\n        }}\n        transition={springConfig}\n        onHoverStart={handleHover}\n        onHoverEnd={handleHoverEnd}\n        {...props}\n      >\n        <div\n          className={cn(\n            \"grid grid-cols-1 rounded-lg sm:rounded-xl md:rounded-[2rem]\",\n            \"shadow-[inset_0_0_1px_1px_#ffffff4d] sm:shadow-[inset_0_0_2px_1px_#ffffff4d]\",\n            \"ring-1 ring-black/5\",\n            \"max-w-[calc(100%-1rem)] sm:max-w-[calc(100%-2rem)] md:max-w-[calc(100%-4rem)]\",\n            \"w-full\",\n            \"transition-all duration-300 ease-in-out\"\n          )}\n        >\n          <div className=\"grid grid-cols-1 rounded-lg sm:rounded-xl md:rounded-[2rem] p-1 sm:p-1.5 md:p-2 shadow-md shadow-black/5\">\n            <div className=\"rounded-md sm:rounded-lg md:rounded-3xl bg-white p-2 sm:p-3 md:p-4 shadow-xl ring-1 ring-black/5\">\n              <div className=\"w-full h-full overflow-hidden\">\n                <div ref={measureRef} className=\"flex flex-col h-full\">\n                  {children}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </framerMotion.div>\n    )\n  }\n)\nExpandableCard.displayName = \"ExpandableCard\"\n\nexport const ExpandableTrigger = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children, ...props }, ref) => {\n  const { toggleExpand } = useExpandable()\n  return (\n    <div ref={ref} onClick={toggleExpand} className=\"cursor-pointer\" {...props}>\n      {children}\n    </div>\n  )\n})\nExpandableTrigger.displayName = \"ExpandableTrigger\"\n\nexport const ExpandableCardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  >\n    <framerMotion.div layout className=\"flex justify-between items-start\">\n      {children}\n    </framerMotion.div>\n  </div>\n))\nExpandableCardHeader.displayName = \"ExpandableCardHeader\"\n\nexport const ExpandableCardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"p-6 pt-0 px-4 overflow-hidden flex-grow\", className)}\n    {...props}\n  >\n    <framerMotion.div layout>{children}</framerMotion.div>\n  </div>\n))\nExpandableCardContent.displayName = \"ExpandableCardContent\"\n\nexport const ExpandableCardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-4 pt-0\", className)}\n    {...props}\n  />\n))\nExpandableCardFooter.displayName = \"ExpandableCardFooter\"\n\n// Minimal local useMeasure implementation to avoid external dependency\nfunction useMeasure<T extends HTMLElement = HTMLDivElement>(): [\n  (node: T | null) => void,\n  { width: number; height: number }\n] {\n  const [node, setNode] = useState<T | null>(null)\n  const [size, setSize] = useState({ width: 0, height: 0 })\n\n  useEffect(() => {\n    if (!node) return\n\n    const updateFromRect = () => {\n      const rect = node.getBoundingClientRect()\n      setSize({ width: rect.width, height: rect.height })\n    }\n\n    let ro: ResizeObserver | null = null\n    if (typeof ResizeObserver !== \"undefined\") {\n      ro = new ResizeObserver((entries) => {\n        const entry = entries[0]\n        const cr = entry.contentRect\n        setSize({ width: cr.width, height: cr.height })\n      })\n      ro.observe(node)\n    } else {\n      // Fallback initial measure\n      updateFromRect()\n    }\n\n    // Initial measure\n    updateFromRect()\n\n    return () => {\n      ro?.disconnect()\n    }\n  }, [node])\n\n  return [setNode, size]\n}\n\n\n\n// Static Card variant reusing ExpandableCard styles (without expand logic)\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: ReactNode\n  className?: string\n}\n\nexport const Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({ children, className = \"\", ...props }, ref) => {\n    return (\n      <div ref={ref} className={cn(\"w-full\", className)} {...props}>\n        <div\n          className={cn(\n            \"grid grid-cols-1 rounded-lg sm:rounded-xl md:rounded-[2rem]\",\n            \"shadow-[inset_0_0_1px_1px_#ffffff4d] sm:shadow-[inset_0_0_2px_1px_#ffffff4d]\",\n            \"ring-1 ring-black/5\",\n            \"max-w-[calc(100%-1rem)] sm:max-w-[calc(100%-2rem)] md:max-w-[calc(100%-4rem)]\",\n            \"w-full\",\n            \"transition-all duration-300 ease-in-out\"\n          )}\n        >\n          <div className=\"grid grid-cols-1 rounded-lg sm:rounded-xl md:rounded-[2rem] p-1 sm:p-1.5 md:p-2 shadow-md shadow-black/5\">\n            <div className=\"rounded-md sm:rounded-lg md:rounded-3xl bg-white p-2 sm:p-3 md:p-4 shadow-xl ring-1 ring-black/5\">\n              <div className=\"w-full h-full overflow-hidden\">\n                <div className=\"flex flex-col h-full\">{children}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nCard.displayName = \"Card\"\n\n// Re-export header/content/footer variations for convenience\nexport {\n  ExpandableCardHeader as CardHeader,\n  ExpandableCardContent as CardContent,\n  ExpandableCardFooter as CardFooter,\n}\n\n","size_bytes":15698},"src/components/ui/data-table.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Search } from \"lucide-react\";\n\ninterface Column<T> {\n  key: keyof T | string;\n  header: string;\n  render?: (item: T) => React.ReactNode;\n  className?: string;\n}\n\ninterface DataTableProps<T> {\n  data: T[];\n  columns: Column<T>[];\n  searchable?: boolean;\n  searchPlaceholder?: string;\n  searchKeys?: (keyof T)[];\n  onSearch?: (term: string) => void;\n  searchTerm?: string;\n  loading?: boolean;\n  emptyMessage?: string;\n  showCount?: boolean;\n  countLabel?: string;\n  headerContent?: React.ReactNode;\n  className?: string;\n}\n\nexport function DataTable<T extends Record<string, unknown>>({\n  data,\n  columns,\n  searchable = true,\n  searchPlaceholder = \"Pesquisar...\",\n  searchKeys,\n  onSearch,\n  searchTerm: controlledSearchTerm,\n  loading = false,\n  emptyMessage = \"Nenhum item encontrado\",\n  showCount = true,\n  countLabel = \"itens\",\n  headerContent,\n  className = \"\",\n}: DataTableProps<T>) {\n  const [internalSearchTerm, setInternalSearchTerm] = React.useState(\"\");\n  const searchTerm = controlledSearchTerm ?? internalSearchTerm;\n\n  const filteredData = React.useMemo(() => {\n    if (!searchable || !searchTerm || !searchKeys) return data;\n\n    return data.filter((item) =>\n      searchKeys.some((key) => {\n        const value = item[key as keyof T];\n        // Handle nested objects (like user.name, user.email)\n        if (typeof value === 'object' && value !== null) {\n          return Object.values(value).some(nestedValue =>\n            nestedValue?.toString().toLowerCase().includes(searchTerm.toLowerCase())\n          );\n        }\n        return value?.toString().toLowerCase().includes(searchTerm.toLowerCase());\n      })\n    );\n  }, [data, searchTerm, searchKeys, searchable]);\n\n  const handleSearchChange = (value: string) => {\n    if (onSearch) {\n      onSearch(value);\n    } else {\n      setInternalSearchTerm(value);\n    }\n  };\n\n  const displayData = searchKeys ? filteredData : data;\n\n  if (loading) {\n    return (\n      <Card className={className}>\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      {(searchable || headerContent || showCount) && (\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4 flex-1\">\n              {searchable && (\n                <div className=\"relative flex-1 max-w-sm\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    type=\"search\"\n                    placeholder={searchPlaceholder}\n                    className=\"pl-10\"\n                    value={searchTerm}\n                    onChange={(e) => handleSearchChange(e.target.value)}\n                  />\n                </div>\n              )}\n              {showCount && (\n                <Badge variant=\"secondary\">\n                  {displayData.length} {countLabel}\n                </Badge>\n              )}\n            </div>\n            {headerContent && <div>{headerContent}</div>}\n          </div>\n        </div>\n      )}\n\n      <Table>\n        <TableHeader>\n          <TableRow className=\"border-border\">\n            {columns.map((column) => (\n              <TableHead\n                key={typeof column.key === 'string' ? column.key : String(column.key)}\n                className={`text-muted-foreground ${column.className || \"\"}`}\n              >\n                {column.header}\n              </TableHead>\n            ))}\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {displayData.length === 0 ? (\n            <TableRow className=\"border-border\">\n              <TableCell\n                colSpan={columns.length}\n                className=\"text-center text-muted-foreground py-6\"\n              >\n                {emptyMessage}\n              </TableCell>\n            </TableRow>\n          ) : (\n            displayData.map((item, index) => (\n              <TableRow key={(item as { id?: string | number }).id || index} className=\"border-border\">\n                {columns.map((column) => (\n                  <TableCell\n                    key={typeof column.key === 'string' ? column.key : String(column.key)}\n                    className={column.className}\n                  >\n                    {column.render\n                      ? column.render(item)\n                      : String(item[column.key as keyof T] || '')\n                    }\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n      </Table>\n    </Card>\n  );\n}","size_bytes":5091},"src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","size_bytes":3982},"src/components/ui/dropdown-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","size_bytes":8284},"src/components/ui/dropdown-trigger-button.tsx":{"content":"\"use client\"\n\nimport * as React from 'react'\nimport { Button } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\n\ntype Props = React.ComponentProps<typeof Button> & {\n  isOpen?: boolean\n}\n\nexport function DropdownTriggerButton({ isOpen, className, children, ...props }: Props) {\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      className={cn(\n        'relative h-8 gap-2 overflow-hidden rounded-lg px-2 text-xs group',\n        isOpen && 'bg-muted/60',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <span className=\"pointer-events-none absolute inset-0 rounded-lg bg-gradient-to-r from-violet-500/10 to-indigo-500/10 opacity-0 transition-opacity group-hover:opacity-100\" />\n      <span className=\"pointer-events-none absolute bottom-0 left-0 h-0.5 w-full bg-gradient-to-r from-violet-500 to-indigo-500 opacity-0 transition-opacity group-hover:opacity-100\" />\n    </Button>\n  )\n}\n\n","size_bytes":938},"src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3759},"src/components/ui/glowing-effect.tsx":{"content":"\"use client\"\n\nimport { memo, useCallback, useEffect, useRef } from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { animate } from \"framer-motion\"\n\ninterface GlowingEffectProps {\n  blur?: number\n  inactiveZone?: number\n  proximity?: number\n  spread?: number\n  variant?: \"default\" | \"white\"\n  glow?: boolean\n  className?: string\n  disabled?: boolean\n  movementDuration?: number\n  borderWidth?: number\n}\nconst GlowingEffect = memo(\n  ({\n    blur = 0,\n    inactiveZone = 0.7,\n    proximity = 0,\n    spread = 20,\n    variant = \"default\",\n    glow = false,\n    className,\n    movementDuration = 2,\n    borderWidth = 1,\n    disabled = true,\n  }: GlowingEffectProps) => {\n    const containerRef = useRef<HTMLDivElement>(null)\n    const lastPosition = useRef({ x: 0, y: 0 })\n    const animationFrameRef = useRef<number>(0)\n\n    const handleMove = useCallback(\n      (e?: MouseEvent | { x: number; y: number }) => {\n        if (!containerRef.current) return\n\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current)\n        }\n\n        animationFrameRef.current = requestAnimationFrame(() => {\n          const element = containerRef.current\n          if (!element) return\n\n          const { left, top, width, height } = element.getBoundingClientRect()\n          const mouseX = (e as MouseEvent)?.x ?? lastPosition.current.x\n          const mouseY = (e as MouseEvent)?.y ?? lastPosition.current.y\n\n          if (e) {\n            lastPosition.current = { x: mouseX, y: mouseY }\n          }\n\n          const center = [left + width * 0.5, top + height * 0.5]\n          const distanceFromCenter = Math.hypot(\n            mouseX - center[0],\n            mouseY - center[1]\n          )\n          const inactiveRadius = 0.5 * Math.min(width, height) * inactiveZone\n\n          if (distanceFromCenter < inactiveRadius) {\n            element.style.setProperty(\"--active\", \"0\")\n            return\n          }\n\n          const isActive =\n            mouseX > left - proximity &&\n            mouseX < left + width + proximity &&\n            mouseY > top - proximity &&\n            mouseY < top + height + proximity\n\n          element.style.setProperty(\"--active\", isActive ? \"1\" : \"0\")\n\n          if (!isActive) return\n\n          const currentAngle =\n            parseFloat(element.style.getPropertyValue(\"--start\")) || 0\n          const targetAngle =\n            (180 * Math.atan2(mouseY - center[1], mouseX - center[0])) /\n              Math.PI +\n            90\n\n          const angleDiff = ((targetAngle - currentAngle + 180) % 360) - 180\n          const newAngle = currentAngle + angleDiff\n\n          animate(currentAngle, newAngle, {\n            duration: movementDuration,\n            ease: [0.16, 1, 0.3, 1],\n            onUpdate: (value) => {\n              element.style.setProperty(\"--start\", String(value))\n            },\n          })\n        })\n      },\n      [inactiveZone, proximity, movementDuration]\n    )\n\n    useEffect(() => {\n      if (disabled) return\n\n      const handleScroll = () => handleMove()\n      const handlePointerMove = (e: PointerEvent) => handleMove(e)\n\n      window.addEventListener(\"scroll\", handleScroll, { passive: true })\n      document.body.addEventListener(\"pointermove\", handlePointerMove, {\n        passive: true,\n      })\n\n      return () => {\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current)\n        }\n        window.removeEventListener(\"scroll\", handleScroll)\n        document.body.removeEventListener(\"pointermove\", handlePointerMove)\n      }\n    }, [handleMove, disabled])\n\n    return (\n      <>\n        <div\n          className={cn(\n            \"pointer-events-none absolute -inset-px hidden rounded-[inherit] border opacity-0 transition-opacity\",\n            glow && \"opacity-100\",\n            variant === \"white\" && \"border-white\",\n            disabled && \"!block\"\n          )}\n        />\n        <div\n          ref={containerRef}\n          style={{\n            \"--blur\": `${blur}px`,\n            \"--spread\": spread as unknown as string,\n            \"--start\": \"0\",\n            \"--active\": \"0\",\n            \"--glowingeffect-border-width\": `${borderWidth}px`,\n            \"--repeating-conic-gradient-times\": \"5\",\n            \"--gradient\":\n              variant === \"white\"\n                ? `repeating-conic-gradient(\n                  from 236.84deg at 50% 50%,\n                  var(--black),\n                  var(--black) calc(25% / var(--repeating-conic-gradient-times))\n                )`\n                : `linear-gradient(135deg, rgba(29,78,216,0.8) 0%, rgba(59,130,246,0.8) 50%, rgba(236,72,153,0.8) 100%)`,\n          } as React.CSSProperties}\n          className={cn(\n            \"pointer-events-none absolute inset-0 rounded-[inherit] opacity-100 transition-opacity\",\n            glow && \"opacity-100\",\n            blur > 0 && \"blur-[var(--blur)] \",\n            className,\n            disabled && \"!hidden\"\n          )}\n        >\n          <div\n            className={cn(\n              \"glow\",\n              \"rounded-[inherit]\",\n              'after:content-[\"\"] after:rounded-[inherit] after:absolute after:inset-[calc(-1*var(--glowingeffect-border-width))]',\n              \"after:[border:var(--glowingeffect-border-width)_solid_transparent]\",\n              \"after:[background:var(--gradient)] after:[background-attachment:fixed]\",\n              \"after:opacity-[var(--active)] after:transition-opacity after:duration-300\",\n              \"after:[mask-clip:padding-box,border-box]\",\n              \"after:[mask-composite:intersect]\",\n              \"after:[mask-image:linear-gradient(#0000,#0000),conic-gradient(from_calc((var(--start)-var(--spread))*1deg),#00000000_0deg,#fff,#00000000_calc(var(--spread)*2deg))]\"\n            )}\n          />\n        </div>\n      </>\n    )\n  }\n)\n\nGlowingEffect.displayName = \"GlowingEffect\"\n\nexport { GlowingEffect }\n\n\n","size_bytes":5878},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        \"neon-border focus-visible:neon-focus\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","size_bytes":1015},"src/components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":611},"src/components/ui/markdown.tsx":{"content":"\"use client\"\n\nimport * as React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\nimport rehypeHighlight from 'rehype-highlight'\nimport { Button } from '@/components/ui/button'\nimport { Copy } from 'lucide-react'\nimport { cn } from '@/lib/utils'\n\ntype MarkdownProps = {\n  children: string\n  className?: string\n}\n\nexport function Markdown({ children, className }: MarkdownProps) {\n  // Extract language from a code className like \"language-tsx\"\n  const getLang = (cls?: string): string | null => {\n    if (!cls) return null\n    const m = /(language|lang)-([a-z0-9+#-]+)/i.exec(cls)\n    return m?.[2] || null\n  }\n\n  // Extract plain text from nested children\n  const toText = (node: unknown): string => {\n    if (node == null) return ''\n    if (typeof node === 'string') return node\n    if (Array.isArray(node)) return node.map(toText).join('')\n    if (typeof node === 'object' && 'props' in node) return toText((node as { props?: { children?: unknown } }).props?.children)\n    return ''\n  }\n\n  return (\n    <ReactMarkdown\n      remarkPlugins={[remarkGfm]}\n      rehypePlugins={[rehypeHighlight]}\n      className={cn(\n        // Enhanced typography (no @tailwindcss/typography plugin)\n        '[&_p]:leading-relaxed [&_p:not(:first-child)]:mt-3',\n        '[&_a]:text-primary [&_a]:underline hover:[&_a]:opacity-80',\n        '[&_ul]:list-disc [&_ol]:list-decimal [&_ul, &_ol]:pl-5 [&_li]:mt-1.5',\n        '[&_blockquote]:my-3 [&_blockquote]:border-l-2 [&_blockquote]:pl-3 [&_blockquote]:text-muted-foreground',\n        '[&_hr]:my-5',\n        // Headings\n        '[&_h1]:text-xl [&_h1]:font-semibold [&_h1]:mt-4 [&_h1]:mb-2',\n        '[&_h2]:text-lg [&_h2]:font-semibold [&_h2]:mt-4 [&_h2]:mb-2',\n        '[&_h3]:text-base [&_h3]:font-semibold [&_h3]:mt-3 [&_h3]:mb-1.5',\n        // Images\n        '[&_img]:my-2 [&_img]:rounded-md [&_img]:border max-w-full',\n        // Task lists\n        '[&_input[type=checkbox]]:mr-2',\n        className,\n      )}\n      components={{\n        // Render inline code as <code>; block code is wrapped by react-markdown in <pre>\n        code({ inline, className, children, ...props }: { inline?: boolean; className?: string; children?: React.ReactNode; [key: string]: unknown }) {\n          const text = String(children).replace(/\\n$/, '')\n          return inline ? (\n            <code className={cn('rounded bg-muted px-1 py-0.5 text-xs', className)} {...props}>\n              {text}\n            </code>\n          ) : (\n            <code className={className} {...props}>\n              {text}\n            </code>\n          )\n        },\n        // Style the <pre> created for fenced code blocks\n        pre: function Pre({ className, children, ...props }) {\n          const [copied, setCopied] = React.useState(false)\n          // Try to read language from the nested <code> element\n          let lang: string | null = null\n          try {\n            const child = Array.isArray(children) ? children[0] : children\n            lang = getLang((child as { props?: { className?: string } })?.props?.className || '')\n          } catch {}\n          const codeText = toText(children)\n          const handleCopy = async () => {\n            try {\n              await navigator.clipboard.writeText(codeText)\n              setCopied(true)\n              setTimeout(() => setCopied(false), 1200)\n            } catch {}\n          }\n          return (\n            <div className=\"group relative my-3\">\n              <div className=\"absolute right-2 top-2 z-10 flex items-center gap-1 opacity-0 transition-opacity group-hover:opacity-100\">\n                {lang && <span className=\"rounded bg-background/70 px-1.5 py-0.5 text-[10px] uppercase tracking-wide ring-1 ring-border\">{lang}</span>}\n                <Button type=\"button\" size=\"icon\" variant=\"ghost\" className=\"h-7 w-7\" aria-label=\"Copiar código\" onClick={handleCopy}>\n                  {copied ? <span className=\"text-[10px]\">OK</span> : <Copy className=\"h-3.5 w-3.5\" />}\n                </Button>\n              </div>\n              <pre className={cn('max-w-full overflow-x-auto rounded-md bg-background p-3 text-xs ring-1 ring-border', className)} {...props}>\n                {children}\n              </pre>\n            </div>\n          )\n        },\n        a: function Link({ href, children, ...props }) {\n          const external = typeof href === 'string' && /^(https?:)?\\/\\//.test(href)\n          return (\n            <a href={href as string} target={external ? '_blank' : undefined} rel={external ? 'noopener noreferrer' : undefined} {...props}>\n              {children}\n            </a>\n          )\n        },\n        img({ src, alt, ...props }) {\n          const url = typeof src === 'string' ? src : ''\n          return (\n            // eslint-disable-next-line @next/next/no-img-element\n            <img\n              src={url}\n              alt={typeof alt === 'string' ? alt : ''}\n              loading=\"lazy\"\n              className=\"my-2 max-w-full rounded-md border bg-background\"\n              {...props}\n            />\n          )\n        },\n        table({ className, ...props }) {\n          return (\n            <div className=\"my-3 w-full overflow-x-auto\">\n              <table className={cn('w-full border-collapse text-sm', className)} {...props} />\n            </div>\n          )\n        },\n        th({ className, ...props }) {\n          return <th className={cn('border-b bg-muted/50 px-2 py-1 text-left font-medium', className)} {...props} />\n        },\n        td({ className, ...props }) {\n          return <td className={cn('border-b px-2 py-1 align-top', className)} {...props} />\n        },\n      }}\n    >\n      {children}\n    </ReactMarkdown>\n  )\n}\n","size_bytes":5695},"src/components/ui/scroll-area.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1 overflow-auto\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1659},"src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":5628},"src/components/ui/separator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","size_bytes":699},"src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\"\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-2/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4090},"src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"size-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21633},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }","size_bytes":260},"src/components/ui/switch.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1153},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}","size_bytes":2763},"src/components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1896},"src/components/ui/text-effect.tsx":{"content":"'use client';\n\nimport { cn } from '@/lib/utils';\nimport {\n  AnimatePresence,\n  motion,\n  TargetAndTransition,\n  Variants,\n} from 'framer-motion';\nimport React from 'react';\n\ntype PresetType = 'blur' | 'shake' | 'scale' | 'fade' | 'slide';\n\ntype TextEffectProps = {\n  children: string;\n  per?: 'word' | 'char' | 'line';\n  as?: keyof React.JSX.IntrinsicElements;\n  variants?: {\n    container?: Variants;\n    item?: Variants;\n  };\n  className?: string;\n  preset?: PresetType;\n  delay?: number;\n  trigger?: boolean;\n  onAnimationComplete?: () => void;\n  segmentWrapperClassName?: string;\n};\n\nconst defaultStaggerTimes: Record<'char' | 'word' | 'line', number> = {\n  char: 0.03,\n  word: 0.05,\n  line: 0.1,\n};\n\nconst defaultContainerVariants: Variants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.05,\n    },\n  },\n  exit: {\n    transition: { staggerChildren: 0.05, staggerDirection: -1 },\n  },\n};\n\nconst defaultItemVariants: Variants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n  },\n  exit: { opacity: 0 },\n};\n\nconst presetVariants: Record<\n  PresetType,\n  { container: Variants; item: Variants }\n> = {\n  blur: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, filter: 'blur(12px)' },\n      visible: { opacity: 1, filter: 'blur(0px)' },\n      exit: { opacity: 0, filter: 'blur(12px)' },\n    },\n  },\n  shake: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { x: 0 },\n      visible: { x: [-5, 5, -5, 5, 0], transition: { duration: 0.5 } },\n      exit: { x: 0 },\n    },\n  },\n  scale: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, scale: 0 },\n      visible: { opacity: 1, scale: 1 },\n      exit: { opacity: 0, scale: 0 },\n    },\n  },\n  fade: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0 },\n      visible: { opacity: 1 },\n      exit: { opacity: 0 },\n    },\n  },\n  slide: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, y: 20 },\n      visible: { opacity: 1, y: 0 },\n      exit: { opacity: 0, y: 20 },\n    },\n  },\n};\n\nconst AnimationComponent: React.FC<{\n  segment: string;\n  variants: Variants;\n  per: 'line' | 'word' | 'char';\n  segmentWrapperClassName?: string;\n}> = React.memo(({ segment, variants, per, segmentWrapperClassName }) => {\n  const content =\n    per === 'line' ? (\n      <motion.span variants={variants} className='block'>\n        {segment}\n      </motion.span>\n    ) : per === 'word' ? (\n      <motion.span\n        aria-hidden='true'\n        variants={variants}\n        className='inline-block whitespace-pre'\n      >\n        {segment}\n      </motion.span>\n    ) : (\n      <motion.span className='inline-block whitespace-pre'>\n        {segment.split('').map((char, charIndex) => (\n          <motion.span\n            key={`char-${charIndex}`}\n            aria-hidden='true'\n            variants={variants}\n            className='inline-block whitespace-pre'\n          >\n            {char}\n          </motion.span>\n        ))}\n      </motion.span>\n    );\n\n  if (!segmentWrapperClassName) {\n    return content;\n  }\n\n  const defaultWrapperClassName = per === 'line' ? 'block' : 'inline-block';\n\n  return (\n    <span className={cn(defaultWrapperClassName, segmentWrapperClassName)}>\n      {content}\n    </span>\n  );\n});\n\nAnimationComponent.displayName = 'AnimationComponent';\n\nexport function TextEffect({\n  children,\n  per = 'word',\n  as = 'p',\n  variants,\n  className,\n  preset,\n  delay = 0,\n  trigger = true,\n  onAnimationComplete,\n  segmentWrapperClassName,\n}: TextEffectProps) {\n  let segments: string[];\n\n  if (per === 'line') {\n    segments = children.split('\\n');\n  } else if (per === 'word') {\n    segments = children.split(/(\\s+)/);\n  } else {\n    segments = children.split('');\n  }\n\n  const MotionTag = motion[as as keyof typeof motion] as typeof motion.div;\n  const selectedVariants = preset\n    ? presetVariants[preset]\n    : { container: defaultContainerVariants, item: defaultItemVariants };\n  const containerVariants = variants?.container || selectedVariants.container;\n  const itemVariants = variants?.item || selectedVariants.item;\n  const ariaLabel = per === 'line' ? undefined : children;\n\n  const stagger = defaultStaggerTimes[per];\n\n  const delayedContainerVariants: Variants = {\n    hidden: containerVariants.hidden,\n    visible: {\n      ...containerVariants.visible,\n      transition: {\n        ...(containerVariants.visible as TargetAndTransition)?.transition,\n        staggerChildren:\n          (containerVariants.visible as TargetAndTransition)?.transition\n            ?.staggerChildren || stagger,\n        delayChildren: delay,\n      },\n    },\n    exit: containerVariants.exit,\n  };\n\n  return (\n    <AnimatePresence mode='popLayout'>\n      {trigger && (\n        <MotionTag\n          initial='hidden'\n          animate='visible'\n          exit='exit'\n          aria-label={ariaLabel}\n          variants={delayedContainerVariants}\n          className={cn('whitespace-pre-wrap', className)}\n          onAnimationComplete={onAnimationComplete}\n        >\n          {segments.map((segment, index) => (\n            <AnimationComponent\n              key={`${per}-${index}-${segment}`}\n              segment={segment}\n              variants={itemVariants}\n              per={per}\n              segmentWrapperClassName={segmentWrapperClassName}\n            />\n          ))}\n        </MotionTag>\n      )}\n    </AnimatePresence>\n  );\n}\n\n\n","size_bytes":5487},"src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":756},"src/components/ui/toast.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      // Top-right viewport on all screens\n      \"fixed top-4 right-4 z-[100] flex max-h-screen w-full max-w-[420px] flex-col gap-2 p-0\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  // Container and motion\n  \"group pointer-events-auto relative flex w-full items-start justify-between gap-3 overflow-hidden rounded-lg border p-4 pr-6 shadow-2xl transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border-border/60 bg-card/80 text-foreground backdrop-blur supports-[backdrop-filter]:bg-background/70 border-l-4 border-l-primary\",\n        destructive:\n          \"destructive group border-destructive/50 bg-destructive text-destructive-foreground border-l-4 border-l-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n  VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold [&+div]:text-xs\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4932},"src/components/ui/toaster.tsx":{"content":"\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider swipeDirection=\"right\">\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":809},"src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({ children, ...props }: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props}>\n        {children}\n      </TooltipPrimitive.Root>\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1947},"src/hooks/admin/use-admin-invitations.ts":{"content":"\"use client\";\n\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api-client\";\n\nexport interface Invitation {\n  id: string;\n  emailAddress: string;\n  status: string;\n  createdAt?: string;\n  updatedAt?: string;\n  expiresAt?: string;\n}\n\nexport interface InvitationsResponse {\n  invitations: Invitation[];\n}\n\nexport function useAdminInvitations() {\n  return useQuery<InvitationsResponse>({\n    queryKey: ['admin', 'invitations'],\n    queryFn: () => api.get('/api/admin/users/invitations'),\n    staleTime: 30_000, // 30 seconds\n    gcTime: 5 * 60_000, // 5 minutes\n  });\n}\n\nexport function useInviteUser() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: ({ email, name }: { email: string; name?: string }) =>\n      api.post('/api/admin/users/invite', { email, name }),\n    onSuccess: (data, variables) => {\n      const status = (data as { status?: string })?.status || 'ok';\n      if (status === 'invited') {\n        toast({ title: 'Convite enviado', description: variables.email });\n      } else if (status === 'exists') {\n        toast({ title: 'Usuário existe', description: 'Usuário já está no sistema' });\n      } else {\n        toast({ title: 'Sucesso', description: 'Usuário processado' });\n      }\n\n      // Invalidate both invitations and users queries\n      queryClient.invalidateQueries({ queryKey: ['admin', 'invitations'] });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Falha no convite',\n        description: error.message,\n        variant: 'destructive'\n      });\n    },\n  });\n}\n\nexport function useResendInvitation() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: (invitationId: string) =>\n      api.post(`/api/admin/users/invitations/${invitationId}/resend`),\n    onSuccess: (data, invitationId) => {\n      // We don't have the email here, so we'll get it from the cache\n      const invitations = queryClient.getQueryData<InvitationsResponse>(['admin', 'invitations']);\n      const invitation = invitations?.invitations.find(inv => inv.id === invitationId);\n\n      toast({\n        title: 'Convite reenviado',\n        description: invitation?.emailAddress || 'Convite reenviado com sucesso'\n      });\n\n      queryClient.invalidateQueries({ queryKey: ['admin', 'invitations'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Falha ao reenviar',\n        description: error.message,\n        variant: 'destructive'\n      });\n    },\n  });\n}\n\nexport function useRevokeInvitation() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: (invitationId: string) =>\n      api.post(`/api/admin/users/invitations/${invitationId}/revoke`),\n    onSuccess: (data, invitationId) => {\n      // We don't have the email here, so we'll get it from the cache\n      const invitations = queryClient.getQueryData<InvitationsResponse>(['admin', 'invitations']);\n      const invitation = invitations?.invitations.find(inv => inv.id === invitationId);\n\n      toast({\n        title: 'Convite revogado',\n        description: invitation?.emailAddress || 'Convite revogado com sucesso'\n      });\n\n      queryClient.invalidateQueries({ queryKey: ['admin', 'invitations'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Falha ao revogar',\n        description: error.message,\n        variant: 'destructive'\n      });\n    },\n  });\n}","size_bytes":3634},"src/hooks/admin/use-admin-users.ts":{"content":"\"use client\";\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n\nexport interface User {\n  id: string;\n  clerkId: string;\n  email: string | null;\n  name: string | null;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n  _count?: {\n    usageHistory: number;\n  };\n}\n\nexport interface AdminUsersResponse {\n  users: User[];\n  total: number;\n  page: number;\n  pageSize: number;\n}\n\nexport interface AdminUsersParams {\n  page?: number;\n  pageSize?: number;\n  search?: string;\n  includeUsageCount?: boolean;\n}\n\n// Basic user management hook - simplified without credit functionality\nexport function useAdminUsers(params: AdminUsersParams = {}) {\n  return useQuery({\n    queryKey: ['admin-users', params],\n    queryFn: async (): Promise<AdminUsersResponse> => {\n      const searchParams = new URLSearchParams();\n      if (params.page) searchParams.append('page', params.page.toString());\n      if (params.pageSize) searchParams.append('pageSize', params.pageSize.toString());\n      if (params.search) searchParams.append('search', params.search);\n      if (params.includeUsageCount) searchParams.append('includeUsageCount', 'true');\n\n      const response = await fetch(`/api/admin/users?${searchParams}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n      return response.json();\n    },\n  });\n}\n\nexport function useEditUser() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ userId, name, email }: { userId: string; name: string; email: string }) => {\n      const response = await fetch(`/api/admin/users/${userId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name, email }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update user');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-users'] });\n    },\n  });\n}\n\nexport function useDeactivateUser() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/admin/users/${userId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to deactivate user');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-users'] });\n    },\n  });\n}\n\nexport function useActivateUser() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/admin/users/${userId}/activate`, {\n        method: 'POST',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to activate user');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-users'] });\n    },\n  });\n}\n\n// Removed credit management functions as they are no longer needed in manual access control model\nexport function useUpdateUserCredits() {\n  return {\n    mutate: () => {\n      alert('Credit management has been removed. Users are managed manually through Clerk admin panel.');\n    },\n    isPending: false,\n  };\n}\n\nexport function useSyncFromClerk() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (options: any) => {\n      const response = await fetch('/api/admin/users/sync', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(options),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to sync from Clerk');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-users'] });\n    },\n  });\n}","size_bytes":3845},"src/app/(protected)/ai-chat/page.tsx":{"content":"\"use client\"\n\nimport * as React from 'react'\nimport { useChat } from '@ai-sdk/react'\nimport { Button } from '@/components/ui/button'\nimport { DropdownTriggerButton } from '@/components/ui/dropdown-trigger-button'\nimport { Autocomplete } from '@/components/ui/autocomplete'\nimport { MessageBubble } from '@/components/chat/message-bubble'\nimport { Card } from '@/components/ui/card'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { usePageConfig } from '@/hooks/use-page-config'\nimport { Bot, Loader2, Paperclip, Send, Square, Trash2, X as XIcon, Sparkles, Image as ImageIcon, MessageSquare } from 'lucide-react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { useOpenRouterModels } from '@/hooks/use-openrouter-models'\nimport { useGenerateImage } from '@/hooks/use-ai-image'\n\nconst PROVIDERS = [\n  { key: 'openrouter', name: 'OpenRouter' },\n  { key: 'openai', name: 'OpenAI' },\n  { key: 'anthropic', name: 'Anthropic' },\n  { key: 'google', name: 'Google' },\n  { key: 'mistral', name: 'Mistral' },\n]\n\nconst STATIC_MODELS: Record<string, { id: string; label: string }[]> = {\n  openrouter: [\n    { id: 'openai/gpt-4o-mini', label: 'OpenAI · gpt-4o-mini' },\n    { id: 'anthropic/claude-3.5-sonnet', label: 'Anthropic · Claude 3.5 Sonnet' },\n    { id: 'google/gemini-2.0-flash-001', label: 'Google · Gemini 2.0 Flash' },\n    { id: 'mistralai/mistral-small', label: 'Mistral · mistral-small' },\n  ],\n  openai: [\n    { id: 'gpt-5', label: 'GPT‑5' },\n  ],\n  anthropic: [\n    { id: 'claude-4-sonnet', label: 'Claude Sonnet 4' },\n  ],\n  google: [\n    { id: 'gemini-2.5-pro', label: 'Gemini 2.5 Pro' },\n  ],\n  mistral: [\n    { id: 'mistral-small-latest', label: 'mistral-small-latest' },\n  ],\n}\n\nconst STATIC_IMAGE_MODELS_OPENROUTER: { id: string; label: string }[] = [\n  { id: 'google/gemini-2.5-flash-image-preview', label: 'Nano Banana' }\n]\n\nexport default function AIChatPage() {\n  usePageConfig('Chat com IA', 'Converse com diferentes LLMs via provedores selecionáveis.', [\n    { label: 'Início', href: '/dashboard' },\n    { label: 'Chat com IA' },\n  ])\n  const [provider, setProvider] = React.useState('openrouter')\n  const [model, setModel] = React.useState(STATIC_MODELS['openrouter'][0].id)\n  const [dynamicOpenRouterModels, setDynamicOpenRouterModels] = React.useState<{ id: string; label: string }[] | null>(null)\n  const [mode, setMode] = React.useState<'text' | 'image'>('text')\n  const currentModels = provider === 'openrouter'\n    ? (dynamicOpenRouterModels ?? (mode === 'image' ? STATIC_IMAGE_MODELS_OPENROUTER : STATIC_MODELS['openrouter']))\n    : STATIC_MODELS[provider]\n\n  // Upload state (declared before useChat so it can be referenced in request body)\n  const fileInputRef = React.useRef<HTMLInputElement>(null)\n  const uploadRefs = React.useRef<Record<string, XMLHttpRequest>>({})\n  type UploadItem = { id: string; name: string; size: number; url?: string; status: 'uploading'|'done'|'error'; progress: number; error?: string }\n  const [attachments, setAttachments] = React.useState<UploadItem[]>([])\n  const [dragActive, setDragActive] = React.useState(false)\n\n  const { messages, input, setInput, handleInputChange, handleSubmit, isLoading, stop, setMessages, reload } = useChat({\n    api: '/api/ai/chat',\n    body: {\n      provider,\n      model,\n      attachments: attachments\n        .filter(a => a.status === 'done' && a.url)\n        .map(a => ({ name: a.name, url: a.url! })),\n    },\n    // Credit system removed\n  })\n\n  // Credit system removed - all users have full access\n\n  // Use TanStack Query for OpenRouter models\n  const {\n    data: openRouterModelsData,\n    isLoading: isLoadingModels\n  } = useOpenRouterModels(\n    provider === 'openrouter' ? (mode === 'image' ? 'image' : 'text') : undefined\n  )\n\n  React.useEffect(() => {\n    if (provider === 'openrouter') {\n      if (openRouterModelsData?.models && openRouterModelsData.models.length > 0) {\n        // Convert OpenRouterModel to the expected format\n        const formattedModels = openRouterModelsData.models.map(model => ({\n          id: model.id,\n          label: model.label\n        }))\n        setDynamicOpenRouterModels(formattedModels)\n        setModel(openRouterModelsData.models[0].id)\n      } else if (!isLoadingModels) {\n        // Fallback to static models if API fails\n        setDynamicOpenRouterModels(null)\n        const fallback = (mode === 'image' ? STATIC_IMAGE_MODELS_OPENROUTER : STATIC_MODELS['openrouter'])[0]?.id\n        if (fallback) setModel(fallback)\n      }\n    } else {\n      setModel(STATIC_MODELS[provider]?.[0]?.id)\n    }\n  }, [provider, mode, openRouterModelsData, isLoadingModels])\n\n  const listRef = React.useRef<HTMLDivElement>(null)\n  const endRef = React.useRef<HTMLDivElement>(null)\n\n  React.useEffect(() => {\n    // auto-scroll to bottom when messages update\n    endRef.current?.scrollIntoView({ block: 'end' })\n  }, [messages])\n\n  const onKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      // submit form programmatically\n      const form = (e.currentTarget as HTMLTextAreaElement).form\n      form?.requestSubmit()\n    }\n  }\n\n  // Animated input concept states\n  // input focus state removed with command palette removal\n  const [providerMenuOpen, setProviderMenuOpen] = React.useState(false)\n  const [modeMenuOpen, setModeMenuOpen] = React.useState(false)\n  // Switch to OpenRouter automatically when enabling image mode\n  React.useEffect(() => {\n    if (mode === 'image') {\n      if (provider !== 'openrouter') setProvider('openrouter')\n      // Prefer the first image-capable model from the fetched list; otherwise wait for fetch effect\n      const firstImageModel = (dynamicOpenRouterModels ?? STATIC_IMAGE_MODELS_OPENROUTER)[0]?.id\n      if (firstImageModel) setModel(firstImageModel)\n    } else {\n      // back to text: ensure a text-capable model is selected\n      if (provider === 'openrouter') {\n        const fallback = (dynamicOpenRouterModels ?? STATIC_MODELS['openrouter'])[0]?.id\n        if (fallback) setModel(fallback)\n      } else {\n        const fallback = STATIC_MODELS[provider]?.[0]?.id\n        if (fallback) setModel(fallback)\n      }\n    }\n  }, [mode, provider, dynamicOpenRouterModels])\n\n  // Use TanStack Query for image generation\n  const generateImage = useGenerateImage()\n\n  const handleSubmitImage = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const prompt = input.trim()\n    if (!prompt) return\n\n    // Clear input immediately after sending\n    setInput('')\n\n    try {\n      const result = await generateImage.mutateAsync({\n        model,\n        prompt,\n        size: '1024x1024',\n        count: 1,\n        attachments: attachments\n          .filter(a => a.status === 'done' && a.url)\n          .map(a => ({ name: a.name, url: a.url! })),\n      })\n\n      // refresh() removed\n      const images: string[] = Array.isArray(result?.images) ? result.images : []\n      const id1 = `u-${Date.now()}`\n      const id2 = `a-${Date.now()}`\n      setMessages([\n        ...messages,\n        { id: id1, role: 'user', content: prompt + (attachments.length ? `\\n\\n(Anexada${attachments.length>1?'s':''} ${attachments.length} imagem${attachments.length>1?'ns':''})` : '') },\n        { id: id2, role: 'assistant', content: JSON.stringify({ images }) },\n      ])\n      setAttachments([])\n    } catch (error) {\n      const id1 = `u-${Date.now()}`\n      const id2 = `a-${Date.now()}`\n\n      // All users have access\n      {\n        setMessages([\n          ...messages,\n          { id: id1, role: 'user', content: prompt },\n          { id: id2, role: 'assistant', content: 'Não foi possível gerar a imagem. Tente novamente.' },\n        ])\n      }\n    }\n  }\n  \n  // Wrap text submit to clear input right after sending\n  const handleSubmitText = (e: React.FormEvent<HTMLFormElement>) => {\n    const prompt = input.trim()\n    if (!prompt) {\n      e.preventDefault()\n      return\n    }\n    handleSubmit(e)\n    // clear input immediately after sending\n    setInput('')\n    setAttachments([])\n    // No credit deduction needed\n  }\n  \n\n  const handleAttachFile = () => {\n    fileInputRef.current?.click()\n  }\n  const removeAttachment = (i: number) => setAttachments((prev) => prev.filter((_, idx) => idx !== i))\n\n  const startUpload = (file: File) => {\n    const id = `u-${Date.now()}-${Math.random().toString(36).slice(2,8)}`\n    const item: UploadItem = { id, name: file.name, size: file.size, status: 'uploading', progress: 0 }\n    setAttachments(prev => [...prev, item])\n    const fd = new FormData()\n    fd.set('file', file)\n    const xhr = new XMLHttpRequest()\n    uploadRefs.current[id] = xhr\n    xhr.upload.onprogress = (ev) => {\n      if (ev.lengthComputable) {\n        const pct = Math.min(99, Math.round((ev.loaded / ev.total) * 100))\n        setAttachments(prev => prev.map(a => a.id === id ? { ...a, progress: pct } : a))\n      }\n    }\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        delete uploadRefs.current[id]\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            const data = JSON.parse(xhr.responseText)\n            setAttachments(prev => prev.map(a => a.id === id ? { ...a, url: data?.url, status: 'done', progress: 100 } : a))\n          } catch {\n            setAttachments(prev => prev.map(a => a.id === id ? { ...a, status: 'error', error: 'Resposta inválida do servidor' } : a))\n          }\n        } else {\n          let msg = 'Falha no upload'\n          try { msg = (JSON.parse(xhr.responseText)?.error) || msg } catch {}\n          setAttachments(prev => prev.map(a => a.id === id ? { ...a, status: 'error', error: msg } : a))\n        }\n      }\n    }\n    xhr.open('POST', '/api/upload')\n    xhr.send(fd)\n  }\n\n  const onFileSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || [])\n    files.forEach(f => startUpload(f))\n    if (fileInputRef.current) fileInputRef.current.value = ''\n  }\n\n  const onDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault(); e.stopPropagation(); setDragActive(false)\n    const files = Array.from(e.dataTransfer.files || [])\n    files.forEach(f => startUpload(f))\n  }\n  const onDragOver = (e: React.DragEvent<HTMLDivElement>) => { e.preventDefault(); e.stopPropagation(); setDragActive(true) }\n  const onDragLeave = (e: React.DragEvent<HTMLDivElement>) => { e.preventDefault(); e.stopPropagation(); setDragActive(false) }\n\n  const handleRetry = (assistantIndex: number) => {\n    // Only makes sense for assistant messages – trim to the last user message before it and reload\n    const target = messages[assistantIndex]\n    if (!target || target.role === 'user') return\n    let cut = assistantIndex - 1\n    while (cut >= 0 && messages[cut].role !== 'user') cut--\n    if (cut < 0) return\n    const trimmed = messages.slice(0, cut + 1)\n    setMessages(trimmed)\n    // trigger a reload of the last user message\n    try {\n      // reload may exist on this hook version\n      reload?.()\n    } catch {}\n  }\n\n  // Credit system removed - all users have full access\n\n  return (\n    <Card className=\"p-4\">\n      <div className=\"mb-3 flex items-center justify-between gap-2 text-xs text-muted-foreground\">\n        <div>\n          Modo: <span className=\"font-medium text-foreground\">{mode === 'text' ? 'Texto' : 'Imagem'}</span> · Provedor: <span className=\"font-medium text-foreground\">{PROVIDERS.find(p=>p.key===provider)?.name}</span> · Modelo: <span className=\"font-medium text-foreground\">{model}</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"hidden sm:flex items-center gap-2 mr-2\">\n            <span className=\"text-xs text-green-600 font-medium\">Acesso Completo</span>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" aria-label=\"Limpar chat\" onClick={() => setMessages([])}>\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n          {/* Stop button moved next to Enviar */}\n        </div>\n      </div>\n\n      <ScrollArea className=\"mb-3\">\n        <div ref={listRef} className=\"flex flex-col gap-3 pr-2\">\n          {messages.length === 0 && (\n            <p className=\"text-sm text-muted-foreground\">\n              Selecione o provedor e o modelo, envie uma mensagem e acompanhe a resposta em tempo real.\n            </p>\n          )}\n          {messages.map((m, idx) => (\n            <MessageBubble\n              key={m.id}\n              message={{\n                id: m.id,\n                role: (m.role === 'user' || m.role === 'assistant' || m.role === 'system') ? m.role : 'assistant',\n                content: m.content\n              }}\n              onRetry={m.role !== 'user' ? () => handleRetry(idx) : undefined}\n            />\n          ))}\n          {(isLoading || generateImage.isPending) && (\n            <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n              <Loader2 className=\"h-3.5 w-3.5 animate-spin\" /> {mode === 'image' ? 'Gerando imagem...' : 'Gerando resposta...'}\n            </div>\n          )}\n          <div ref={endRef} />\n        </div>\n      </ScrollArea>\n\n      {/* Animated input concept */}\n      <div className={\"relative rounded-2xl border bg-background/90 \" + (dragActive ? 'border-primary ring-2 ring-primary/30' : 'border-border/60')} onDrop={onDrop} onDragOver={onDragOver} onDragLeave={onDragLeave}>\n\n        <form onSubmit={mode === 'image' ? handleSubmitImage : handleSubmitText} className=\"p-3\">\n          <textarea\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={onKeyDown}\n            placeholder=\"Digite sua mensagem... (Shift+Enter para nova linha)\"\n            rows={2}\n            className=\"min-h-[60px] w-full resize-none rounded-md bg-transparent px-3 py-2 text-sm outline-none placeholder:text-muted-foreground\"\n          />\n          <input ref={fileInputRef} type=\"file\" className=\"hidden\" onChange={onFileSelected} multiple accept={mode==='image' ? 'image/*' : undefined} />\n          <AnimatePresence>\n            {attachments.length > 0 && (\n              <motion.div\n                className=\"mt-2 flex flex-wrap gap-2\"\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n              >\n                {attachments.map((att, i) => (\n                  <motion.div\n                    key={i}\n                    className=\"flex items-center gap-2 rounded-lg bg-muted px-3 py-1.5 text-xs\"\n                    initial={{ opacity: 0, scale: 0.95 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.95 }}\n                  >\n                    {att.url ? (\n                      <a href={att.url} target=\"_blank\" rel=\"noreferrer\" className=\"underline hover:no-underline\">{att.name}</a>\n                    ) : (\n                      <span>{att.name}</span>\n                    )}\n                    {att.status === 'uploading' && (\n                      <span className=\"text-muted-foreground\">{att.progress}%</span>\n                    )}\n                    {att.status === 'error' && (\n                      <span className=\"text-destructive\">{att.error || 'Falhou'}</span>\n                    )}\n                    <button type=\"button\" onClick={() => {\n                      const a = attachments[i]\n                      if (a && a.status === 'uploading') {\n                        const xhr = uploadRefs.current[a.id]\n                        try { xhr?.abort() } catch {}\n                        delete uploadRefs.current[a.id]\n                      }\n                      removeAttachment(i)\n                    }} className=\"text-muted-foreground hover:text-foreground\">\n                      <XIcon className=\"h-3 w-3\" />\n                    </button>\n                  </motion.div>\n                ))}\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          <div className=\"mt-3 flex items-center justify-between gap-3 border-t pt-3\">\n            <div className=\"flex items-center gap-2\">\n              <Button type=\"button\" variant=\"ghost\" size=\"icon\" onClick={handleAttachFile} aria-label=\"Anexar\">\n                <Paperclip className=\"h-4 w-4\" />\n              </Button>\n              \n              {/* Mode selector */}\n              <DropdownMenu open={modeMenuOpen} onOpenChange={setModeMenuOpen}>\n                <DropdownMenuTrigger asChild>\n                  <DropdownTriggerButton isOpen={modeMenuOpen} aria-label=\"Selecionar modo\">\n                    {mode === 'image' ? (\n                      <ImageIcon className=\"h-4 w-4\" />\n                    ) : (\n                      <MessageSquare className=\"h-4 w-4\" />\n                    )}\n                    <span className=\"truncate max-w-[100px]\">{mode === 'text' ? 'Texto' : 'Imagem'}</span>\n                  </DropdownTriggerButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\">\n                  <DropdownMenuItem onClick={() => setMode('text')}>\n                    <MessageSquare className=\"h-4 w-4 mr-2\" /> Texto\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setMode('image')}>\n                    <ImageIcon className=\"h-4 w-4 mr-2\" /> Imagem\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              {/* Provider selector */}\n              <DropdownMenu open={mode === 'image' ? false : providerMenuOpen} onOpenChange={(o)=>{ if (mode !== 'image') setProviderMenuOpen(o) }}>\n                <DropdownMenuTrigger asChild>\n                  <DropdownTriggerButton isOpen={providerMenuOpen} aria-label=\"Selecionar provedor\" disabled={mode==='image'}>\n                    <Bot className=\"h-4 w-4\" />\n                    <span className=\"truncate max-w-[140px]\">{PROVIDERS.find((p) => p.key === provider)?.name}</span>\n                  </DropdownTriggerButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\">\n                  {PROVIDERS.map((p) => (\n                    <DropdownMenuItem key={p.key} onClick={() => setProvider(p.key)}>\n                      {p.name}\n                    </DropdownMenuItem>\n                  ))}\n                </DropdownMenuContent>\n              </DropdownMenu>\n              {/* Model selector */}\n              <Autocomplete\n                items={(currentModels || []).map((m) => ({ value: m.id, label: m.label }))}\n                value={model}\n                onChange={setModel}\n                icon={<Sparkles className=\"h-4 w-4\" />}\n                buttonAriaLabel=\"Selecionar modelo\"\n                placeholder=\"Buscar modelo...\"\n                className=\"min-w-[200px]\"\n              />\n            </div>\n            <span className=\"text-xs text-green-600 mr-2\">✓ Acesso Liberado</span>\n            {isLoading ? (\n              <Button\n                type=\"button\"\n                onClick={() => stop?.()}\n                variant=\"secondary\"\n                className=\"gap-2\"\n                aria-label=\"Parar geração\"\n              >\n                <Square className=\"h-4 w-4\" />\n                Parar\n              </Button>\n            ) : (\n              <Button\n                type=\"submit\"\n                disabled={\n                  attachments.some(a => a.status === 'uploading') ||\n                  (mode === 'image' && attachments.filter(a => a.status === 'done' && a.url).length === 0) ||\n                  !input.trim()\n                }\n                className=\"gap-2\"\n              >\n                {generateImage.isPending ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Send className=\"h-4 w-4\" />}\n                Enviar\n              </Button>\n            )}\n          </div>\n        </form>\n      </div>\n    </Card>\n  )\n}\n","size_bytes":20080},"src/app/(protected)/dashboard/page.tsx":{"content":"\"use client\";\n\nimport { useUser } from \"@clerk/nextjs\";\nimport { PortfolioSummary } from \"@/components/dashboard/portfolio-summary\";\nimport { QuickActions } from \"@/components/dashboard/quick-actions\";\nimport { RecentAnalysis } from \"@/components/dashboard/recent-analysis\";\nimport { useSetPageMetadata } from \"@/contexts/page-metadata\";\n\nexport default function DashboardPage() {\n  const { user } = useUser();\n  \n  useSetPageMetadata({\n    title: `Bem-vindo à FiiAI, ${user?.firstName || \"Usuário\"}!`,\n    description: \"Sua plataforma de análise inteligente de Fundos Imobiliários\",\n    breadcrumbs: [\n      { label: \"Dashboard\" }\n    ]\n  });\n  \n  return (\n    <div className=\"space-y-8\">\n      {/* Status Bar */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Dashboard FiiAI</h1>\n          <p className=\"text-muted-foreground\">Análise inteligente de Fundos Imobiliários</p>\n        </div>\n      </div>\n\n      {/* Portfolio Overview */}\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        <PortfolioSummary />\n      </div>\n\n      {/* Actions and Analysis */}\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <QuickActions />\n        <RecentAnalysis />\n      </div>\n    </div>\n  );\n}","size_bytes":1290},"src/app/admin/settings/page.tsx":{"content":"\"use client\";\n\nimport Link from \"next/link\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { SlidersHorizontal, DollarSign, ArrowRight } from \"lucide-react\";\n\nexport default function AdminSettingsPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground\">Configurações do Administrador</h1>\n        <p className=\"text-muted-foreground mt-2\">Configure os custos de funcionalidades e os créditos dos planos</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-primary/10\">\n              <SlidersHorizontal className=\"h-5 w-5 text-primary\" />\n            </div>\n            <h2 className=\"text-xl font-semibold text-foreground\">Custos por Funcionalidade</h2>\n          </div>\n          <p className=\"text-muted-foreground mb-6\">\n            Configure os custos de crédito para cada funcionalidade do sistema\n          </p>\n          <Button asChild className=\"w-full\">\n            <Link href=\"/admin/settings/features\" className=\"flex items-center justify-center gap-2\">\n              Configurar Custos\n              <ArrowRight className=\"h-4 w-4\" />\n            </Link>\n          </Button>\n        </Card>\n\n        <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-primary/10\">\n              <DollarSign className=\"h-5 w-5 text-primary\" />\n            </div>\n            <h2 className=\"text-xl font-semibold text-foreground\">Planos de Assinatura</h2>\n          </div>\n          <p className=\"text-muted-foreground mb-6\">\n            Gerencie os planos do Clerk e seus créditos mensais\n          </p>\n          <Button asChild className=\"w-full\">\n            <Link href=\"/admin/settings/plans\" className=\"flex items-center justify-center gap-2\">\n              Gerenciar Planos\n              <ArrowRight className=\"h-4 w-4\" />\n            </Link>\n          </Button>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":2317},"src/app/admin/storage/page.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Trash2, ExternalLink, RefreshCw } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useStorage, useDeleteStorageItem, type StorageItem } from \"@/hooks/use-storage\";\n\n\nexport default function AdminStoragePage() {\n  const { toast } = useToast()\n  const [q, setQ] = useState(\"\")\n  const [typeFilter, setTypeFilter] = useState<string>(\"\")\n  const [userFilter, setUserFilter] = useState<string>(\"\")\n  const [searchParams, setSearchParams] = useState({ q: \"\", type: \"\", userId: \"\" })\n\n  // Use TanStack Query hooks\n  const { data: storageData, isLoading: loading, refetch } = useStorage({\n    q: searchParams.q,\n    type: searchParams.type,\n    userId: searchParams.userId,\n    limit: 50\n  })\n  const deleteStorageMutation = useDeleteStorageItem()\n\n  const items = storageData?.items || []\n  const nextCursor = storageData?.nextCursor || null\n\n  useEffect(() => {\n    setSearchParams({ q, type: typeFilter, userId: userFilter })\n  }, [q, typeFilter, userFilter])\n\n  const onSearch = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setSearchParams({ q, type: typeFilter, userId: userFilter })\n  }\n\n  const uniqueTypes = Array.from(new Set(items.map(i => i.contentType).filter(Boolean))) as string[]\n  const uniqueUsers = Array.from(new Set(items.map(i => i.user?.id).filter(Boolean))) as string[]\n  const userOptions = uniqueUsers.map(id => items.find(i => i.user?.id === id)!.user)\n\n  const onDelete = async (id: string) => {\n    if (!confirm('Excluir este objeto? Isso removerá o acesso público e o marcará como excluído.')) return\n    deleteStorageMutation.mutate(id, {\n      onSuccess: () => {\n        toast({ title: 'Objeto excluído' })\n        refetch() // Refresh the data after deletion\n      }\n    })\n  }\n\n  const formatSize = (n: number) => {\n    const kb = n / 1024\n    if (kb < 1024) return `${kb.toFixed(1)} KB`\n    const mb = kb / 1024\n    return `${mb.toFixed(2)} MB`\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Armazenamento</h1>\n          <p className=\"text-muted-foreground mt-2\">Navegue e gerencie os objetos enviados</p>\n        </div>\n        <Button variant=\"outline\" onClick={() => refetch()} disabled={loading}>\n          <RefreshCw className=\"h-4 w-4 mr-2\" /> Atualizar\n        </Button>\n      </div>\n\n      <Card className=\"p-6\">\n        <form onSubmit={onSearch} className=\"flex flex-col md:flex-row gap-3 mb-4\">\n          <Input className=\"flex-1\" placeholder=\"Pesquisar por nome, tipo, URL, nome/email do usuário...\" value={q} onChange={(e)=>setQ(e.target.value)} />\n          <Select value={typeFilter} onValueChange={(v)=>{ setTypeFilter(v === 'all' ? '' : v); }}>\n            <SelectTrigger className=\"w-[220px]\"><SelectValue placeholder=\"Todos os tipos\" /></SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Todos os tipos</SelectItem>\n              {uniqueTypes.map((t) => (\n                <SelectItem key={t} value={t}>{t}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Select value={userFilter} onValueChange={(v)=>{ setUserFilter(v === 'all' ? '' : v); }}>\n            <SelectTrigger className=\"w-[240px]\"><SelectValue placeholder=\"Todos os usuários\" /></SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Todos os usuários</SelectItem>\n              {userOptions.map((u) => (\n                <SelectItem key={u.id} value={u.id}>{u.name || u.email || u.clerkId}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Button type=\"submit\" disabled={loading}>Pesquisar</Button>\n        </form>\n      </Card>\n\n      <DataTable\n        data={items as unknown as Record<string, unknown>[]}\n        columns={[\n          {\n            key: \"name\",\n            header: \"Nome\",\n            render: (item: unknown) => {\n              const i = item as StorageItem;\n              return (\n                <div className=\"flex flex-col\">\n                  <span className=\"font-medium text-foreground truncate max-w-[360px]\" title={i.name}>{i.name}</span>\n                  <span className=\"text-xs text-muted-foreground truncate max-w-[360px]\" title={i.pathname}>{i.pathname}</span>\n                </div>\n              );\n            },\n          },\n          {\n            key: \"contentType\",\n            header: \"Tipo\",\n            render: (item: unknown) => {\n              const i = item as StorageItem;\n              return <span className=\"text-muted-foreground\">{i.contentType || '—'}</span>;\n            },\n          },\n          {\n            key: \"size\",\n            header: \"Tamanho\",\n            render: (item: unknown) => {\n              const i = item as StorageItem;\n              return <span className=\"text-muted-foreground\">{formatSize(i.size)}</span>;\n            },\n          },\n          {\n            key: \"user\",\n            header: \"Enviado por\",\n            render: (item: unknown) => {\n              const i = item as StorageItem;\n              return (\n                <div className=\"flex flex-col\">\n                  <span className=\"text-foreground\">{i.user.name || 'Desconhecido'}</span>\n                  <span className=\"text-xs text-muted-foreground\">{i.user.email || i.user.clerkId}</span>\n                </div>\n              );\n            },\n          },\n          {\n            key: \"createdAt\",\n            header: \"Data\",\n            render: (item: unknown) => {\n              const i = item as StorageItem;\n              return <span className=\"text-muted-foreground\">{new Date(i.createdAt).toLocaleString()}</span>;\n            },\n          },\n          {\n            key: \"actions\",\n            header: \"Ações\",\n            className: \"text-right\",\n            render: (item: unknown) => {\n              const i = item as StorageItem;\n              return (\n                <div className=\"flex justify-end space-x-2\">\n                  <Button asChild variant=\"outline\" size=\"sm\">\n                    <a href={i.url} target=\"_blank\" rel=\"noreferrer\">\n                      <ExternalLink className=\"h-4 w-4\" />\n                    </a>\n                  </Button>\n                  <Button variant=\"destructive\" size=\"sm\" onClick={() => onDelete(i.id)}>\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              );\n            },\n          },\n        ]}\n        searchable={false}\n        loading={loading}\n        countLabel=\"arquivos\"\n        emptyMessage=\"Nenhum arquivo encontrado\"\n        headerContent={\n          <div className=\"flex justify-center\">\n            {nextCursor ? (\n              <span className=\"text-xs text-muted-foreground\">Mais resultados disponíveis - ajuste os filtros para refinar</span>\n            ) : (\n              <span className=\"text-xs text-muted-foreground\">Não há mais resultados</span>\n            )}\n          </div>\n        }\n      />\n    </div>\n  )\n}\n","size_bytes":7418},"src/app/admin/users/page.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\n\nimport { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport {\n  MoreVertical,\n  UserPlus,\n  Mail,\n  Calendar,\n  Edit,\n  Trash2,\n  Settings\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  useAdminUsers,\n  useUpdateUserCredits,\n  useDeactivateUser,\n  useActivateUser,\n  useEditUser,\n  useSyncFromClerk,\n  type User\n} from \"@/hooks/admin/use-admin-users\";\nimport {\n  useAdminInvitations,\n  useInviteUser,\n  useResendInvitation,\n  useRevokeInvitation,\n  type Invitation\n} from \"@/hooks/admin/use-admin-invitations\";\n\nexport default function UsersPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [inviteOpen, setInviteOpen] = useState(false);\n  const [inviteEmail, setInviteEmail] = useState(\"\");\n  const [inviteName, setInviteName] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"users\");\n  const [editOpen, setEditOpen] = useState(false);\n  const [editId, setEditId] = useState<string | null>(null);\n  const [editName, setEditName] = useState(\"\");\n  const [editEmail, setEditEmail] = useState(\"\");\n  const [syncOpen, setSyncOpen] = useState(false);\n  const [syncUsersOpt, setSyncUsersOpt] = useState(true)\n  const [syncPlansOpt, setSyncPlansOpt] = useState(true)\n  const [setCreditsOpt, setSetCreditsOpt] = useState(true)\n  const [overrideCredits, setOverrideCredits] = useState<string>(\"\")\n  const [confirmOpen, setConfirmOpen] = useState(false)\n\n  // TanStack Query hooks\n  const { data: usersData, isLoading: usersLoading } = useAdminUsers({\n    page: 1,\n    pageSize: 1000,\n    search: searchTerm || undefined,\n    includeUsageCount: true\n  });\n\n  const { data: invitationsData, isLoading: invitationsLoading } = useAdminInvitations();\n\n  const updateCreditsMutation = useUpdateUserCredits();\n  const deactivateUserMutation = useDeactivateUser();\n  const activateUserMutation = useActivateUser();\n  const editUserMutation = useEditUser();\n  const syncFromClerkMutation = useSyncFromClerk();\n  const inviteUserMutation = useInviteUser();\n  const resendInvitationMutation = useResendInvitation();\n  const revokeInvitationMutation = useRevokeInvitation();\n\n  const users = usersData?.users || [];\n  const pendingInvites = invitationsData?.invitations || [];\n  const loading = usersLoading;\n  const invLoading = invitationsLoading;\n\n  const runSync = () => {\n    const options = {\n      syncUsers: syncUsersOpt,\n      syncPlans: syncPlansOpt,\n      setCredits: setCreditsOpt,\n      ...(overrideCredits !== '' && Number.isFinite(Number(overrideCredits))\n        ? { overrideCredits: Number(overrideCredits) }\n        : {}\n      )\n    };\n\n    syncFromClerkMutation.mutate(options, {\n      onSuccess: () => {\n        setSyncOpen(false);\n        setConfirmOpen(false);\n      }\n    });\n  };\n\n  const promptAndUpdateCredits = async (userId: string, current?: number) => {\n    alert('Gerenciamento de créditos foi removido. Usuários são gerenciados manualmente através do painel admin do Clerk.');\n  }\n\n  const handleDeactivateUser = (userId: string) => {\n    if (!confirm(\"Tem certeza de que deseja desativar este usuário?\")) return;\n    deactivateUserMutation.mutate(userId);\n  };\n\n  const openEdit = (user: User) => {\n    setEditId(user.id);\n    setEditName(user.name || \"\");\n    setEditEmail(user.email || \"\");\n    setEditOpen(true);\n  }\n\n  const saveEdit = () => {\n    if (!editId) return;\n    editUserMutation.mutate(\n      { userId: editId, name: editName, email: editEmail },\n      {\n        onSuccess: () => {\n          setEditOpen(false);\n          setEditId(null);\n        }\n      }\n    );\n  }\n\n  const handleInviteUser = () => {\n    if (!inviteEmail) return;\n    inviteUserMutation.mutate(\n      { email: inviteEmail, name: inviteName },\n      {\n        onSuccess: () => {\n          setInviteOpen(false);\n          setInviteEmail('');\n          setInviteName('');\n        }\n      }\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Usuários</h1>\n          <p className=\"text-muted-foreground mt-2\">Gerenciar todos os usuários registrados</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={()=> setSyncOpen(true)}>Sincronizar do Clerk</Button>\n          <Dialog open={syncOpen} onOpenChange={setSyncOpen}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle className=\"text-foreground\">Sincronizar do Clerk</DialogTitle>\n                <DialogDescription className=\"text-muted-foreground\">Escolha o escopo e como aplicar créditos.</DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-2\">\n                <div className=\"flex items-center gap-2\">\n                  <input id=\"syncUsers\" type=\"checkbox\" checked={syncUsersOpt} onChange={(e)=> setSyncUsersOpt(e.target.checked)} />\n                  <Label htmlFor=\"syncUsers\">Sincronizar usuários (criar/atualizar e saldo inicial)</Label>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <input id=\"syncPlans\" type=\"checkbox\" checked={syncPlansOpt} onChange={(e)=> setSyncPlansOpt(e.target.checked)} />\n                  <Label htmlFor=\"syncPlans\">Sincronizar planos/assinaturas</Label>\n                </div>\n                <div className=\"ml-6 space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <input id=\"setCredits\" type=\"checkbox\" checked={setCreditsOpt} disabled={!syncPlansOpt} onChange={(e)=> setSetCreditsOpt(e.target.checked)} />\n                    <Label htmlFor=\"setCredits\">Aplicar créditos do plano</Label>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div className=\"col-span-2\">\n                      <Label className=\"mb-1 block\">Sobrescrever créditos (opcional)</Label>\n                      <Input type=\"number\" min={0} placeholder=\"ex.: 500\" value={overrideCredits} onChange={(e)=> setOverrideCredits(e.target.value)} />\n                      <p className=\"text-xs text-muted-foreground mt-1\">Se informado, aplica este valor a todos com plano ativo.</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <DialogFooter>\n                <Button variant=\"outline\" onClick={()=> setSyncOpen(false)}>Cancelar</Button>\n                <Button disabled={syncFromClerkMutation.isPending} onClick={()=> setConfirmOpen(true)}>Sincronizar</Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n\n          {/* Second confirmation dialog */}\n          <AlertDialog open={confirmOpen} onOpenChange={setConfirmOpen}>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>Confirmar sincronização</AlertDialogTitle>\n                <AlertDialogDescription>\n                  <div className=\"space-y-2 text-left\">\n                    <p className=\"text-sm\">Você está prestes a iniciar uma sincronização com os seguintes efeitos:</p>\n                    <ul className=\"list-disc pl-5 space-y-1\">\n                      {syncUsersOpt && (<li>Criar/atualizar usuários e garantir saldos (0 por padrão).</li>)}\n                      {!syncUsersOpt && (<li>Não irá criar/atualizar usuários nem saldos.</li>)}\n                      {syncPlansOpt && (<li>Consultar assinaturas no Clerk e vincular aos planos locais.</li>)}\n                      {!syncPlansOpt && (<li>Não irá consultar assinaturas/planos.</li>)}\n                      {syncPlansOpt && setCreditsOpt && overrideCredits !== '' && Number.isFinite(Number(overrideCredits)) && (\n                        <li>Aplicar {Number(overrideCredits)} créditos a todos os usuários com plano ativo.</li>\n                      )}\n                      {syncPlansOpt && setCreditsOpt && !(overrideCredits !== '' && Number.isFinite(Number(overrideCredits))) && (\n                        <li>Aplicar créditos conforme mapeamento dos planos (tabela Plans).</li>\n                      )}\n                      {syncPlansOpt && !setCreditsOpt && (\n                        <li>Não irá alterar créditos, mesmo com plano ativo.</li>\n                      )}\n                    </ul>\n                  </div>\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                <AlertDialogAction onClick={runSync} disabled={syncFromClerkMutation.isPending}>\n                  {syncFromClerkMutation.isPending ? 'Sincronizando...' : 'Confirmar' }\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n          <Dialog open={inviteOpen} onOpenChange={setInviteOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-primary hover:bg-primary/90\">\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Adicionar Usuário\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle className=\"text-foreground\">Convidar Usuário</DialogTitle>\n                <DialogDescription className=\"text-muted-foreground\">\n                  Envie um convite para participar via e-mail. Se o usuário já existir, garantiremos que ele apareça na lista.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"inviteEmail\">E-mail</Label>\n                  <Input\n                    id=\"inviteEmail\"\n                    type=\"email\"\n                    placeholder=\"user@example.com\"\n                    className=\"pl-3\"\n                    value={inviteEmail}\n                    onChange={(e) => setInviteEmail(e.target.value)}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"inviteName\">Nome (opcional)</Label>\n                  <Input\n                    id=\"inviteName\"\n                    placeholder=\"Jane Doe\"\n                    className=\"pl-3\"\n                    value={inviteName}\n                    onChange={(e) => setInviteName(e.target.value)}\n                  />\n                </div>\n              </div>\n              <DialogFooter>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setInviteOpen(false)}\n                >\n                  Cancelar\n                </Button>\n                <Button\n                  className=\"bg-primary hover:bg-primary/90\"\n                  onClick={handleInviteUser}\n                  disabled={inviteUserMutation.isPending}\n                >\n                  {inviteUserMutation.isPending ? 'Enviando...' : 'Enviar Convite'}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"users\">Todos os Usuários</TabsTrigger>\n          <TabsTrigger value=\"invites\">Convites Pendentes</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"users\">\n          <DataTable\n            data={users as unknown as Record<string, unknown>[]}\n            columns={[\n              {\n                key: \"user\",\n                header: \"Usuário\",\n                render: (item: unknown) => {\n                  const user = item as User;\n                  return (\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-gradient-to-br from-primary/20 to-primary/10 rounded-full flex items-center justify-center\">\n                        <span className=\"text-xs font-medium text-primary\">\n                          {(user.name ? user.name.charAt(0) : (user.email || '').charAt(0)).toUpperCase()}\n                        </span>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-foreground\">{user.name || \"Sem nome\"}</p>\n                        <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                      </div>\n                    </div>\n                  );\n                },\n              },\n              {\n                key: \"access\",\n                header: \"Acesso\",\n                render: (item: unknown) => {\n                  const user = item as User;\n                  return (\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-green-600 font-medium\">Manual</span>\n                    </div>\n                  );\n                },\n              },\n              {\n                key: \"usage\",\n                header: \"Uso\",\n                render: (item: unknown) => {\n                  const user = item as User;\n                  return (\n                    <span className=\"text-muted-foreground\">\n                      {user._count?.usageHistory || 0} operações\n                    </span>\n                  );\n                },\n              },\n              {\n                key: \"createdAt\",\n                header: \"Entrou\",\n                render: (item: unknown) => {\n                  const user = item as User;\n                  return (\n                    <div className=\"flex items-center space-x-2\">\n                      <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-muted-foreground\">\n                        {new Date(user.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n                  );\n                },\n              },\n              {\n                key: \"status\",\n                header: \"Status\",\n                render: (item: unknown) => {\n                  const user = item as User;\n                  return (\n                    user.isActive !== false ? (\n                      <Badge variant=\"outline\" className=\"border-green-500 text-green-500\">Ativo</Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"border-gray-500 text-gray-400\">Inativo</Badge>\n                    )\n                  );\n                },\n              },\n              {\n                key: \"actions\",\n                header: \"Ações\",\n                className: \"text-right\",\n                render: (item: unknown) => {\n                  const user = item as User;\n                  return (\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\">\n                          <MoreVertical className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => openEdit(user)}>\n                          <Edit className=\"h-4 w-4 mr-2\" />\n                          Editar Usuário\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          onClick={() => promptAndUpdateCredits(user.id)}\n                        >\n                          <Settings className=\"h-4 w-4 mr-2\" />\n                          Gerenciar Acesso\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-gray-300 hover:text-white\" onClick={() => { if (user.email) window.location.href = `mailto:${user.email}` }}>\n                          <Mail className=\"h-4 w-4 mr-2\" />\n                          Enviar E-mail\n                        </DropdownMenuItem>\n                        {user.isActive === false ? (\n                          <DropdownMenuItem\n                            className=\"text-green-400 hover:text-green-300\"\n                            onClick={() => activateUserMutation.mutate(user.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-2\" />\n                            Ativar Usuário\n                          </DropdownMenuItem>\n                        ) : (\n                          <DropdownMenuItem\n                            className=\"text-red-400 hover:text-red-300\"\n                            onClick={() => handleDeactivateUser(user.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-2\" />\n                            Desativar Usuário\n                          </DropdownMenuItem>\n                        )}\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  );\n                },\n              },\n            ]}\n            searchable={true}\n            searchPlaceholder=\"Pesquisar usuários...\"\n            searchKeys={[\"name\", \"email\"]}\n            searchTerm={searchTerm}\n            onSearch={setSearchTerm}\n            loading={loading}\n            countLabel=\"usuários\"\n            emptyMessage=\"Nenhum usuário encontrado\"\n          />\n        </TabsContent>\n\n        <TabsContent value=\"invites\">\n          <DataTable\n            data={pendingInvites as unknown as Record<string, unknown>[]}\n            columns={[\n              {\n                key: \"emailAddress\",\n                header: \"E-mail\",\n                render: (item: unknown) => {\n                  const inv = item as Invitation;\n                  return <span className=\"text-foreground\">{inv.emailAddress}</span>;\n                },\n              },\n              {\n                key: \"status\",\n                header: \"Status\",\n                render: (item: unknown) => {\n                  const inv = item as Invitation;\n                  const status = (inv.status || '').toLowerCase()\n                  const badgeClass = status === 'accepted' ? 'bg-green-500/20 text-green-300' : status === 'revoked' ? 'bg-red-500/20 text-red-300' : status === 'expired' ? 'bg-yellow-500/20 text-yellow-300' : 'bg-blue-500/20 text-blue-300'\n                  return (\n                    <span className={`px-2 py-1 rounded text-xs ${badgeClass}`}>\n                      {status || 'pending'}\n                    </span>\n                  );\n                },\n              },\n              {\n                key: \"createdAt\",\n                header: \"Convidado\",\n                render: (item: unknown) => {\n                  const inv = item as Invitation;\n                  return (\n                    <span className=\"text-muted-foreground\">\n                      {inv.createdAt ? new Date(inv.createdAt).toLocaleString() : '-'}\n                    </span>\n                  );\n                },\n              },\n              {\n                key: \"expiresAt\",\n                header: \"Expira\",\n                render: (item: unknown) => {\n                  const inv = item as Invitation;\n                  return (\n                    <span className=\"text-muted-foreground\">\n                      {inv.expiresAt ? new Date(inv.expiresAt).toLocaleString() : '-'}\n                    </span>\n                  );\n                },\n              },\n              {\n                key: \"actions\",\n                header: \"Ações\",\n                className: \"text-right\",\n                render: (item: unknown) => {\n                  const inv = item as Invitation;\n                  const status = (inv.status || '').toLowerCase()\n                  const disabled = status === 'accepted' || status === 'revoked' || status === 'expired'\n                  return (\n                    <div className=\"flex items-center justify-end gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        disabled={disabled || resendInvitationMutation.isPending}\n                        onClick={() => resendInvitationMutation.mutate(inv.id)}\n                      >\n                        {resendInvitationMutation.isPending ? 'Reenviando...' : 'Reenviar'}\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        disabled={disabled || revokeInvitationMutation.isPending}\n                        onClick={() => {\n                          if (!confirm('Revogar este convite?')) return;\n                          revokeInvitationMutation.mutate(inv.id);\n                        }}\n                      >\n                        {revokeInvitationMutation.isPending ? 'Revogando...' : 'Revogar'}\n                      </Button>\n                    </div>\n                  );\n                },\n              },\n            ]}\n            searchable={false}\n            loading={invLoading}\n            countLabel=\"convites\"\n            emptyMessage=\"Nenhum convite pendente\"\n            headerContent={\n              <Button\n                variant=\"outline\"\n                onClick={() => {/* refresh will happen automatically through TanStack Query */}}\n                disabled={invLoading}\n              >\n                {invLoading ? 'Atualizando...' : 'Atualizar'}\n              </Button>\n            }\n          />\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit User Dialog */}\n      <Dialog open={editOpen} onOpenChange={(o)=>{ setEditOpen(o); if(!o){ setEditId(null) } }}>\n        <DialogContent className=\"bg-gray-800 border-gray-700\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Editar Usuário</DialogTitle>\n            <DialogDescription className=\"text-gray-400\">Atualizar informações do perfil do usuário.</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"editName\" className=\"text-gray-300\">Nome</Label>\n              <Input id=\"editName\" className=\"bg-gray-900 border-gray-700 text-white\" value={editName} onChange={(e)=>setEditName(e.target.value)} />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"editEmail\" className=\"text-gray-300\">E-mail</Label>\n              <Input id=\"editEmail\" type=\"email\" className=\"bg-gray-900 border-gray-700 text-white\" value={editEmail} onChange={(e)=>setEditEmail(e.target.value)} />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" className=\"border-gray-600 text-gray-300\" onClick={()=>setEditOpen(false)}>Cancelar</Button>\n            <Button\n              className=\"bg-primary hover:bg-primary/90\"\n              onClick={saveEdit}\n              disabled={editUserMutation.isPending}\n            >\n              {editUserMutation.isPending ? 'Salvando...' : 'Salvar'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":24028},"src/app/api/upload/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { auth } from '@clerk/nextjs/server'\nimport { put } from '@vercel/blob'\nimport { getUserFromClerkId } from '@/lib/auth-utils'\nimport { db } from '@/lib/db'\n\nexport const runtime = 'nodejs'\n\nexport async function POST(req: Request) {\n  try {\n    const { userId } = await auth()\n    if (!userId) return NextResponse.json({ error: 'Não autorizado' }, { status: 401 })\n\n    const form = await req.formData()\n    const file = form.get('file') as File | null\n    if (!file) return NextResponse.json({ error: 'Nenhum arquivo' }, { status: 400 })\n\n    const maxMb = Number(process.env.BLOB_MAX_SIZE_MB || '25')\n    const maxBytes = Math.max(1, maxMb) * 1024 * 1024 // default 25MB (configurable)\n    if (file.size > maxBytes) {\n      return NextResponse.json({ error: `Arquivo muito grande (máx ${maxMb}MB)` }, { status: 413 })\n    }\n\n    const ext = file.name?.split('.').pop()?.toLowerCase() || 'bin'\n    const safeName = file.name?.replace(/[^a-z0-9._-]/gi, '_') || `upload.${ext}`\n    const key = `uploads/${userId}/${Date.now()}-${safeName}`\n\n    const token = process.env.BLOB_READ_WRITE_TOKEN\n    const uploaded = await put(key, file, { access: 'public', token })\n\n    // Persist record for admin management\n    try {\n      const user = await getUserFromClerkId(userId)\n      await db.storageObject.create({\n        data: {\n          userId: user.id,\n          clerkUserId: userId,\n          provider: 'vercel_blob',\n          url: uploaded.url,\n          pathname: uploaded.pathname,\n          name: file.name || safeName,\n          contentType: file.type || null,\n          size: file.size,\n        },\n      })\n    } catch (e) {\n      console.error('Failed to persist StorageObject:', e)\n    }\n\n    return NextResponse.json({\n      url: uploaded.url,\n      pathname: uploaded.pathname,\n      contentType: file.type,\n      size: file.size,\n      name: file.name,\n    })\n  } catch (err) {\n    console.error('Upload failed:', err)\n    return NextResponse.json({ error: 'Falha no upload' }, { status: 500 })\n  }\n}\n","size_bytes":2063},"src/app/(protected)/profile/[[...rest]]/page.tsx":{"content":"\"use client\";\n\nimport { UserProfile } from \"@clerk/nextjs\";\nimport { useSetPageMetadata } from \"@/contexts/page-metadata\";\n\nexport default function ProfilePage() {\n  useSetPageMetadata({\n    title: \"Configurações de Perfil\",\n    description: \"Gerencie suas informações pessoais e preferências\",\n    breadcrumbs: [\n      { label: \"Início\", href: \"/dashboard\" },\n      { label: \"Perfil\" }\n    ]\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <UserProfile \n        path=\"/profile\"\n        routing=\"path\"\n      />\n    </div>\n  );\n}","size_bytes":542},"src/app/(public)/sign-in/[[...sign-in]]/page.tsx":{"content":"import { SignIn } from \"@clerk/nextjs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport Link from \"next/link\";\n\nexport default function SignInPage() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-6\">\n      <div className=\"w-full max-w-md pt-20\">\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle>Entrar</CardTitle>\n            <CardDescription>\n              Bem-vindo de volta!\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <SignIn \n              appearance={{\n                elements: {\n                  formButtonPrimary: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n                  card: \"shadow-none border-0\",\n                  headerTitle: \"text-2xl font-semibold\",\n                  headerSubtitle: \"text-muted-foreground\",\n                  socialButtonsBlockButton: \"border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n                  formFieldInput: \"border-input bg-background\",\n                  footerActionLink: \"text-primary hover:text-primary/80\",\n                }\n              }}\n              routing=\"path\"\n              path=\"/sign-in\"\n            />\n          </CardContent>\n        </Card>\n        \n        <div className=\"text-center mt-6\">\n          <p className=\"text-sm text-muted-foreground\">\n            Acesso restrito. Entre em contato conosco para obter uma conta.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1585},"src/app/admin/settings/features/page.tsx":{"content":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAdminSettings, useUpdateAdminSettings } from \"@/hooks/use-admin-settings\";\n\ntype FeatureCosts = Record<string, number>\n\nexport default function FeatureCostsPage() {\n  const { toast } = useToast()\n  const { data: settings, isLoading, error } = useAdminSettings()\n  const updateSettingsMutation = useUpdateAdminSettings()\n  const [featureCosts, setFeatureCosts] = useState<FeatureCosts>({})\n\n  // Initialize feature costs when settings load\n  React.useEffect(() => {\n    if (settings?.featureCosts) {\n      setFeatureCosts(settings.featureCosts)\n    }\n  }, [settings])\n\n  React.useEffect(() => {\n    if (error) {\n      toast({\n        title: 'Erro de rede',\n        description: 'Não foi possível carregar as configurações',\n        variant: 'destructive'\n      })\n    }\n  }, [error, toast])\n\n  const updateFeature = (key: string, val: string) => {\n    const n = Number(val)\n    setFeatureCosts((prev) => ({ ...prev, [key]: Number.isFinite(n) ? Math.max(0, Math.floor(n)) : 0 }))\n  }\n\n  const onSave = async () => {\n    try {\n      await updateSettingsMutation.mutateAsync({\n        featureCosts,\n        planCredits: settings?.planCredits || {}\n      })\n      toast({ title: 'Configurações salvas' })\n    } catch (err) {\n      toast({\n        title: 'Falha ao salvar',\n        description: err instanceof Error ? err.message : 'Erro desconhecido',\n        variant: 'destructive'\n      })\n    }\n  }\n\n  const hasUnsavedChanges = JSON.stringify(settings?.featureCosts || {}) !== JSON.stringify(featureCosts)\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[300px]\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground\">Custos por Funcionalidade</h1>\n        <p className=\"text-muted-foreground mt-2\">Configure os custos de crédito para cada funcionalidade do sistema</p>\n      </div>\n\n      <Card className=\"p-6\">\n        <h2 className=\"text-xl font-semibold text-foreground mb-4\">Custos de Crédito por Funcionalidade</h2>\n        <div className=\"space-y-4\">\n          {Object.entries(featureCosts).map(([key, value]) => (\n            <div key={key} className=\"grid grid-cols-1 sm:grid-cols-3 items-center gap-3\">\n              <Label className=\"sm:col-span-1 capitalize\">{key.replaceAll('_', ' ')}</Label>\n              <Input\n                type=\"number\"\n                className=\"sm:col-span-2\"\n                value={String(value)}\n                onChange={(e) => updateFeature(key, e.target.value)}\n                min={0}\n              />\n            </div>\n          ))}\n        </div>\n        <div className=\"flex justify-between items-center mt-6\">\n          {hasUnsavedChanges && <span className=\"text-sm text-muted-foreground\">Alterações não salvas</span>}\n          <Button\n            className=\"ml-auto\"\n            onClick={onSave}\n            disabled={updateSettingsMutation.isPending}\n          >\n            {updateSettingsMutation.isPending ? 'Salvando...' : 'Salvar Configurações'}\n          </Button>\n        </div>\n      </Card>\n    </div>\n  )\n}","size_bytes":3501},"src/app/api/admin/dashboard/route.ts":{"content":"import { auth } from \"@clerk/nextjs/server\";\nimport { NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport { isAdmin } from \"@/lib/admin-utils\";\n\nexport async function GET() {\n  try {\n    const { userId } = await auth();\n    \n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const [totalUsers] = await Promise.all([\n      db.user.count(),\n    ])\n\n    const last30Days = new Date();\n    last30Days.setDate(last30Days.getDate() - 30);\n\n    // Count users with recent analysis reports (active users)\n    const activeUsers = await db.analysisReport.findMany({\n      where: { generatedAt: { gte: last30Days } },\n      distinct: [\"userId\"],\n      select: { userId: true },\n    })\n\n    // Get total analysis reports count\n    const totalAnalysisReports = await db.analysisReport.count()\n\n    // Build months range: last 6 months for basic activity metrics\n    const months = Array.from({ length: 6 }).map((_, i) => {\n      const d = new Date()\n      d.setMonth(d.getMonth() - (5 - i))\n      return d\n    })\n\n    // Get analysis activity by month\n    const activitySeries = [] as { label: string; value: number }[]\n    const userActivitySeries = [] as { label: string; value: number }[]\n    \n    for (const d of months) {\n      const label = d.toLocaleString('default', { month: 'short' })\n      const start = new Date(d.getFullYear(), d.getMonth(), 1)\n      const end = new Date(d.getFullYear(), d.getMonth() + 1, 0, 23, 59, 59, 999)\n      \n      // Count total analysis reports in this month\n      const monthlyReports = await db.analysisReport.count({\n        where: {\n          generatedAt: { gte: start, lte: end }\n        }\n      })\n      \n      // Count unique active users in this month\n      const monthlyActiveUsers = await db.analysisReport.findMany({\n        where: {\n          generatedAt: { gte: start, lte: end }\n        },\n        distinct: [\"userId\"],\n        select: { userId: true }\n      })\n      \n      activitySeries.push({ label, value: monthlyReports })\n      userActivitySeries.push({ label, value: monthlyActiveUsers.length })\n    }\n\n    return NextResponse.json({\n      totalUsers,\n      activeUsers: activeUsers.length,\n      totalAnalysisReports,\n      activitySeries,\n      userActivitySeries,\n    });\n  } catch (error) {\n    console.error(\"Dashboard stats error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch dashboard stats\" },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":2518},"src/app/api/admin/settings/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { auth } from '@clerk/nextjs/server'\nimport { isAdmin } from '@/lib/admin-utils'\nimport { FEATURE_CREDIT_COSTS, FeatureKey } from '@/lib/credits/feature-config'\nimport { getEffectiveFeatureCosts, getEffectivePlanCredits, upsertAdminSettings } from '@/lib/credits/settings'\nimport { db } from '@/lib/db'\n\nexport async function GET() {\n  const { userId } = await auth()\n  if (!userId || !(await isAdmin(userId))) {\n    return NextResponse.json({ error: 'Não autorizado' }, { status: 401 })\n  }\n\n  const featureCosts = await getEffectiveFeatureCosts()\n  const planCredits = await getEffectivePlanCredits()\n  // Compose billingPlans view from Plan rows for backward compatibility with current UI\n  const plans = await db.plan.findMany({ orderBy: { createdAt: 'asc' } })\n  const billingPlans: Record<string, { name: string; credits: number }> = {}\n  for (const p of plans) billingPlans[p.clerkId] = { name: p.name, credits: p.credits }\n  return NextResponse.json({ featureCosts, planCredits, billingPlans })\n}\n\nexport async function PUT(req: Request) {\n  const { userId } = await auth()\n  if (!userId || !(await isAdmin(userId))) {\n    return NextResponse.json({ error: 'Não autorizado' }, { status: 401 })\n  }\n\n  try {\n    const body = await req.json().catch(() => ({}))\n    const incoming = body as {\n      featureCosts?: Partial<Record<string, number>>\n      billingPlans?: Record<string, { name: string; credits: number }>\n    }\n\n    const cleanFeatureCosts: Partial<Record<FeatureKey, number>> = {}\n    if (incoming.featureCosts) {\n      for (const key of Object.keys(FEATURE_CREDIT_COSTS) as FeatureKey[]) {\n        const v = incoming.featureCosts[key]\n        if (typeof v === 'number' && Number.isFinite(v) && v >= 0) cleanFeatureCosts[key] = Math.floor(v)\n      }\n    }\n\n    // Persist featureCosts in AdminSettings\n    await upsertAdminSettings({ featureCosts: cleanFeatureCosts })\n\n    // Upsert Plans in DB\n    if (incoming.billingPlans && typeof incoming.billingPlans === 'object') {\n      const incomingIds = Object.keys(incoming.billingPlans)\n      // Upsert by clerkId (unique)\n      for (const [clerkId, cfg] of Object.entries(incoming.billingPlans)) {\n        const name = (cfg?.name || '').trim()\n        const credits = Math.max(0, Math.floor(Number(cfg?.credits ?? 0)))\n        await db.plan.upsert({\n          where: { clerkId },\n          update: { name, credits, active: true },\n          create: { clerkId, name, credits, active: true },\n        })\n      }\n      // Inactivate any plan whose clerkId is not in incoming (do not delete)\n      await db.plan.updateMany({ where: { clerkId: { notIn: incomingIds } }, data: { active: false } })\n    }\n\n    // Return updated snapshot\n    const featureCosts = await getEffectiveFeatureCosts()\n    const planCredits = await getEffectivePlanCredits()\n    const plans = await db.plan.findMany({ orderBy: { createdAt: 'asc' } })\n    const billingPlans: Record<string, { name: string; credits: number }> = {}\n    for (const p of plans) billingPlans[p.clerkId] = { name: p.name, credits: p.credits }\n    return NextResponse.json({ featureCosts, planCredits, billingPlans })\n  } catch (e) {\n    console.error('PUT /api/admin/settings error', e)\n    return NextResponse.json({ error: 'Dados inválidos' }, { status: 400 })\n  }\n}\n","size_bytes":3335},"src/app/api/admin/storage/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { auth } from '@clerk/nextjs/server'\nimport { isAdmin } from '@/lib/admin-utils'\nimport { db } from '@/lib/db'\n\nexport async function GET(req: Request) {\n  const { userId } = await auth()\n  if (!userId || !(await isAdmin(userId))) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  }\n  const { searchParams } = new URL(req.url)\n  const q = (searchParams.get('q') || '').trim().toLowerCase()\n  const type = (searchParams.get('type') || '').trim().toLowerCase()\n  const userIdFilter = (searchParams.get('userId') || '').trim()\n  const limit = Math.min(100, Math.max(1, Number(searchParams.get('limit') || '50')))\n  const cursor = searchParams.get('cursor') || undefined\n\n  const where: Record<string, unknown> = {\n    deletedAt: null,\n  }\n  if (q) {\n    where.OR = [\n      { name: { contains: q, mode: 'insensitive' } },\n      { contentType: { contains: q, mode: 'insensitive' } },\n      { pathname: { contains: q, mode: 'insensitive' } },\n      { url: { contains: q, mode: 'insensitive' } },\n      { user: { email: { contains: q, mode: 'insensitive' } } },\n      { user: { name: { contains: q, mode: 'insensitive' } } },\n    ]\n  }\n  if (type) {\n    where.contentType = { contains: type, mode: 'insensitive' }\n  }\n  if (userIdFilter) {\n    where.userId = userIdFilter\n  }\n\n  const items = await db.storageObject.findMany({\n    where,\n    include: { user: { select: { id: true, clerkId: true, email: true, name: true } } },\n    orderBy: { createdAt: 'desc' },\n    take: limit + 1,\n    ...(cursor ? { cursor: { id: cursor }, skip: 1 } : {}),\n  })\n  const nextCursor = items.length > limit ? items[limit].id : null\n  const page = items.slice(0, limit)\n  return NextResponse.json({ items: page, nextCursor })\n}\n","size_bytes":1781},"src/app/api/admin/usage/route.ts":{"content":"import { auth } from \"@clerk/nextjs/server\";\nimport { NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport { isAdmin } from \"@/lib/admin-utils\";\nimport type { Prisma } from \"../../../../../prisma/generated/client\";\n\nexport async function GET(request: Request) {\n  try {\n    const { userId } = await auth();\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const type = searchParams.get(\"type\") || \"all\";\n    const range = searchParams.get(\"range\") || \"7days\";\n    const q = (searchParams.get(\"q\") || \"\").trim();\n    const page = Math.max(1, Number(searchParams.get(\"page\") || 1));\n    const pageSize = Math.min(100, Math.max(1, Number(searchParams.get(\"pageSize\") || 25)));\n\n    const whereClause: Prisma.UsageHistoryWhereInput = { AND: [] };\n    \n    if (type !== \"all\") {\n      (whereClause.AND as Prisma.UsageHistoryWhereInput[]).push({ \n        operationType: type as any \n      });\n    }\n\n    if (range !== \"all\") {\n      const now = new Date();\n      const startDate = new Date();\n      switch (range) {\n        case \"24hours\":\n          startDate.setHours(now.getHours() - 24);\n          break;\n        case \"7days\":\n          startDate.setDate(now.getDate() - 7);\n          break;\n        case \"30days\":\n          startDate.setDate(now.getDate() - 30);\n          break;\n      }\n      (whereClause.AND as Prisma.UsageHistoryWhereInput[]).push({ \n        timestamp: { gte: startDate } \n      });\n    }\n\n    if (q) {\n      (whereClause.AND as Prisma.UsageHistoryWhereInput[]).push({\n        user: {\n          is: {\n            OR: [\n              { name: { contains: q, mode: 'insensitive' } },\n              { email: { contains: q, mode: 'insensitive' } },\n            ],\n          },\n        },\n      });\n    }\n\n    const [total, usageHistory] = await Promise.all([\n      db.usageHistory.count({ where: whereClause }),\n      db.usageHistory.findMany({\n        where: whereClause,\n        include: {\n          user: { select: { name: true, email: true } },\n        },\n        orderBy: { timestamp: \"desc\" },\n        skip: (page - 1) * pageSize,\n        take: pageSize,\n      }),\n    ]);\n\n    return NextResponse.json({ data: usageHistory, total, page, pageSize });\n  } catch (error) {\n    console.error(\"Failed to fetch usage history:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch usage history\" },\n      { status: 500 }\n    );\n  }\n}","size_bytes":2521},"src/app/api/admin/users/route.ts":{"content":"import { auth } from \"@clerk/nextjs/server\";\nimport { NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport { isAdmin } from \"@/lib/admin-utils\";\nimport { cache, getCacheKey } from \"@/lib/cache\";\n\nexport async function GET(request: Request) {\n  try {\n    const { userId } = await auth();\n\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const page = Math.max(1, Number(searchParams.get(\"page\") || 1));\n    const pageSize = Math.min(100, Math.max(1, Number(searchParams.get(\"pageSize\") || 50)));\n    const search = searchParams.get(\"search\")?.trim() || \"\";\n    const includeUsageCount = searchParams.get(\"includeUsageCount\") === \"true\";\n\n    // Build where clause for search\n    const whereClause = search ? {\n      OR: [\n        { name: { contains: search, mode: 'insensitive' as const } },\n        { email: { contains: search, mode: 'insensitive' as const } },\n      ]\n    } : {};\n\n    // Create cache key based on query parameters\n    const cacheKey = getCacheKey('admin:users', page, pageSize, search, includeUsageCount.toString());\n\n    // Try to get from cache first (only for non-search queries to avoid stale search results)\n    if (!search) {\n      const cached = cache.get(cacheKey);\n      if (cached) {\n        return NextResponse.json(cached);\n      }\n    }\n\n    // Get total count and users in parallel\n    const [total, users] = await Promise.all([\n      db.user.count({ where: whereClause }),\n      db.user.findMany({\n        where: whereClause,\n        include: {\n          creditBalance: {\n            select: {\n              creditsRemaining: true,\n            },\n          },\n          ...(includeUsageCount ? {\n            _count: {\n              select: {\n                usageHistory: true,\n              },\n            },\n          } : {}),\n        },\n        orderBy: {\n          createdAt: \"desc\",\n        },\n        skip: (page - 1) * pageSize,\n        take: pageSize,\n      }),\n    ]);\n\n    const result = {\n      users,\n      pagination: {\n        page,\n        pageSize,\n        total,\n        pages: Math.ceil(total / pageSize),\n      },\n    };\n\n    // Cache the result (only for non-search queries, cache for 2 minutes)\n    if (!search) {\n      cache.set(cacheKey, result, 120);\n    }\n\n    return NextResponse.json(result);\n  } catch (error) {\n    console.error(\"Failed to fetch users:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch users\" },\n      { status: 500 }\n    );\n  }\n}","size_bytes":2588},"src/app/api/admin/verify/route.ts":{"content":"import { auth, currentUser } from \"@clerk/nextjs/server\";\nimport { NextResponse } from \"next/server\";\nimport { isAdmin } from \"@/lib/admin-utils\";\n\nexport async function GET() {\n  try {\n    const { userId } = await auth();\n    if (!userId) return NextResponse.json({ isAdmin: false }, { status: 401 });\n\n    const user = await currentUser();\n    if (!user) return NextResponse.json({ isAdmin: false }, { status: 401 });\n\n    const admin = await isAdmin(userId);\n    const userEmail = user.emailAddresses[0]?.emailAddress;\n\n    return NextResponse.json({ isAdmin: admin, email: userEmail, userId });\n  } catch (error) {\n    console.error(\"Admin verification error:\", error);\n    return NextResponse.json({ isAdmin: false }, { status: 500 });\n  }\n}\n","size_bytes":747},"src/app/api/ai/chat/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { streamText } from 'ai'\nimport { createOpenAI } from '@ai-sdk/openai'\nimport { createAnthropic } from '@ai-sdk/anthropic'\nimport { createGoogleGenerativeAI } from '@ai-sdk/google'\nimport { createMistral } from '@ai-sdk/mistral'\nimport { z } from 'zod'\nimport { validateUserAuthentication } from '@/lib/auth-utils'\nimport { InsufficientCreditsError } from '@/lib/credits/errors'\nimport { validateCreditsForFeature, deductCreditsForFeature, refundCreditsForFeature } from '@/lib/credits/deduct'\nimport { type FeatureKey } from '@/lib/credits/feature-config'\n\nconst openai = createOpenAI({ apiKey: process.env.OPENAI_API_KEY })\nconst anthropic = createAnthropic({ apiKey: process.env.ANTHROPIC_API_KEY })\nconst google = createGoogleGenerativeAI({ apiKey: process.env.GOOGLE_GENERATIVE_AI_API_KEY })\nconst mistral = createMistral({ apiKey: process.env.MISTRAL_API_KEY })\n// OpenRouter is OpenAI-compatible\nconst openrouter = createOpenAI({\n  apiKey: process.env.OPENROUTER_API_KEY,\n  baseURL: 'https://openrouter.ai/api/v1',\n})\n\nfunction getModel(provider: string, model: string) {\n  switch (provider) {\n    case 'openai':\n      return openai(model)\n    case 'anthropic':\n      return anthropic(model)\n    case 'google':\n      return google(model)\n    case 'mistral':\n      return mistral(model)\n    case 'openrouter':\n      return openrouter(model)\n    default:\n      throw new Error('Unsupported provider')\n  }\n}\n\nconst ProviderSchema = z.enum(['openai', 'anthropic', 'google', 'mistral', 'openrouter'])\n\n// Known-safe models for direct providers. OpenRouter models are dynamic; validate format below.\nconst ALLOWED_MODELS: Record<z.infer<typeof ProviderSchema>, string[]> = {\n  openai: ['gpt-5'],\n  anthropic: ['claude-4-sonnet'],\n  google: ['gemini-2.5-pro'],\n  mistral: ['mistral-small-latest'],\n  openrouter: [\n    // Representative defaults; OpenRouter validated by pattern\n    'openai/gpt-4o-mini',\n    'anthropic/claude-3.5-sonnet',\n    'google/gemini-2.0-flash-001',\n    'mistralai/mistral-small',\n  ],\n}\n\nconst MessageSchema = z.object({\n  role: z.enum(['user', 'assistant', 'system']),\n  content: z.string().min(1).max(20000),\n})\n\nconst AttachmentSchema = z.object({ name: z.string().min(1).max(500), url: z.string().url() })\n\nconst BodySchema = z\n  .object({\n    provider: ProviderSchema,\n    model: z.string().min(1),\n    messages: z.array(MessageSchema).min(1),\n    temperature: z.number().min(0).max(2).optional(),\n    attachments: z.array(AttachmentSchema).optional(),\n  })\n  .strict()\n\nfunction isAllowedModel(provider: z.infer<typeof ProviderSchema>, model: string) {\n  if (provider === 'openrouter') {\n    // Basic sanity for OpenRouter model IDs: vendor/model and restricted charset\n    return /^[a-z0-9-]+\\/[a-z0-9_.:-]+$/i.test(model) && model.length <= 100\n  }\n  return ALLOWED_MODELS[provider].includes(model)\n}\n\nexport async function POST(req: Request) {\n  try {\n    // AuthN: require logged-in user for chat usage\n    try {\n      // clerk user id\n      const userId = await validateUserAuthentication()\n      // Pre-parse to also include in credits usage details if valid\n      const parsed = BodySchema.safeParse(await req.json())\n      if (!parsed.success) {\n        return NextResponse.json({ error: 'Corpo da requisição inválido', issues: parsed.error.flatten() }, { status: 400 })\n      }\n      const { provider, model, messages, temperature = 0.4, attachments } = parsed.data\n\n      if (!isAllowedModel(provider, model)) {\n        return NextResponse.json({ error: 'Modelo não permitido para este provedor' }, { status: 400 })\n      }\n\n      // quick key presence check\n      const missingKey =\n        (provider === 'openai' && !process.env.OPENAI_API_KEY) ||\n        (provider === 'anthropic' && !process.env.ANTHROPIC_API_KEY) ||\n        (provider === 'google' && !process.env.GOOGLE_GENERATIVE_AI_API_KEY) ||\n        (provider === 'mistral' && !process.env.MISTRAL_API_KEY) ||\n        (provider === 'openrouter' && !process.env.OPENROUTER_API_KEY)\n\n      if (missingKey) {\n        return NextResponse.json({ error: `Chave API ausente para ${provider}.` }, { status: 400 })\n      }\n\n      // If there are attachments, append a user message listing them so the model can reference the files\n      let mergedMessages = messages\n      if (attachments && attachments.length > 0) {\n        const lines = attachments.map(a => `- ${a.name}: ${a.url}`).join('\\n')\n        const attachNote = `Anexos:\\n${lines}`\n        mergedMessages = [...messages, { role: 'user' as const, content: attachNote }]\n      }\n\n      // Credits: 1 credit per LLM request\n      const feature: FeatureKey = 'ai_text_chat'\n      try {\n        await validateCreditsForFeature(userId, feature)\n        await deductCreditsForFeature({\n          clerkUserId: userId,\n          feature,\n          details: { provider, model },\n        })\n      } catch (err: unknown) {\n        if (err instanceof InsufficientCreditsError) {\n          return NextResponse.json(\n            { error: 'insufficient_credits', required: err.required, available: err.available },\n            { status: 402 }\n          )\n        }\n        throw err\n      }\n\n      try {\n        const result = await streamText({\n          model: getModel(provider, model),\n          messages: mergedMessages,\n          temperature,\n        })\n        return result.toAIStreamResponse()\n      } catch (providerErr: unknown) {\n        // Provider call failed after deduction — reimburse user\n        await refundCreditsForFeature({\n          clerkUserId: userId,\n          feature,\n          quantity: 1,\n          reason: (providerErr as { message?: string })?.message || 'chat_provider_error',\n          details: { provider, model },\n        })\n        return NextResponse.json({ error: 'Erro do provedor' }, { status: 502 })\n      }\n    } catch (e: unknown) {\n      if ((e as { message?: string })?.message === 'Unauthorized') {\n        return NextResponse.json({ error: 'Não autorizado' }, { status: 401 })\n      }\n      throw e\n    }\n  } catch {\n    // Avoid leaking provider errors verbosely\n    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 })\n  }\n}\n","size_bytes":6199},"src/app/api/ai/image/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { z } from 'zod'\nimport { validateUserAuthentication } from '@/lib/auth-utils'\nimport { validateCreditsForFeature, deductCreditsForFeature, refundCreditsForFeature } from '@/lib/credits/deduct'\nimport { InsufficientCreditsError } from '@/lib/credits/errors'\nimport { type FeatureKey } from '@/lib/credits/feature-config'\n\ntype ImageUrl = {\n  type?: string\n  image_url?: { url: string } | string\n  url?: string\n  b64_json?: string\n  b64?: string\n  image_base64?: string\n}\n\ntype AssistantMessage = {\n  role?: string\n  content?: string\n  images?: ImageUrl[]\n}\n\ntype Choice = {\n  message?: AssistantMessage\n}\n\ntype ChatCompletionsResponse = {\n  choices?: Choice[]\n  error?: { message?: string } | string\n}\n\nconst AttachmentSchema = z.object({\n  url: z.string().url(),\n  name: z.string().optional(),\n})\n\nconst BodySchema = z\n  .object({\n    // For now we support only OpenRouter for images\n    model: z\n      .string()\n      .min(3)\n      // basic vendor/model pattern used by OpenRouter\n      .regex(/^[a-z0-9-]+\\/[a-z0-9_.:-]+$/i, 'Invalid OpenRouter model id')\n      .max(100)\n      .default('google/gemini-2.5-flash-image-preview'),\n    prompt: z.string().min(1).max(2000),\n    // Optional knobs kept for API stability, though not used by chat/completions\n    size: z\n      .enum(['256x256', '512x512', '1024x1024'])\n      .optional()\n      .default('1024x1024'),\n    count: z.number().int().min(1).max(4).optional().default(1),\n    attachments: z.array(AttachmentSchema).optional(),\n  })\n  .strict()\n\nexport async function POST(req: Request) {\n  try {\n    let userId: string | null = null\n    try {\n      userId = await validateUserAuthentication()\n    } catch (e: unknown) {\n      if ((e as Error)?.message === 'Unauthorized') {\n        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n      }\n      throw e\n    }\n\n    const parsed = BodySchema.safeParse(await req.json())\n    if (!parsed.success) {\n      return NextResponse.json({ error: 'Invalid request body', issues: parsed.error.flatten() }, { status: 400 })\n    }\n    let { model } = parsed.data\n    const { prompt, count, attachments } = parsed.data\n\n    // Charge credits before calling provider\n    const feature: FeatureKey = 'ai_image_generation'\n    const quantity = typeof count === 'number' ? count : 1\n    try {\n      await validateCreditsForFeature(userId!, feature, quantity)\n      await deductCreditsForFeature({ clerkUserId: userId!, feature, quantity, details: { model } })\n    } catch (e: unknown) {\n      if (e instanceof InsufficientCreditsError) {\n        return NextResponse.json({ error: 'insufficient_credits', required: e.required, available: e.available }, { status: 402 })\n      }\n      throw e\n    }\n\n    // Map common vendorless ids when possible\n    if (model === 'gpt-image-1') model = 'openai/gpt-image-1'\n\n    // Build a reasonable Referer for OpenRouter attribution\n    const originFromEnv = process.env.NEXT_PUBLIC_APP_URL\n    const originFromReq = req.headers.get('origin') || req.headers.get('host')\n    const referer =\n      originFromEnv ||\n      (originFromReq\n        ? String(originFromReq).startsWith('http')\n          ? originFromReq\n          : `http://${originFromReq}`\n        : 'http://localhost:3000')\n\n    const DEBUG = process.env.IMAGE_DEBUG === '1' || process.env.NODE_ENV !== 'production'\n    const startedAt = Date.now()\n    if (DEBUG) {\n      console.log('[img] request', {\n        model,\n        promptPreview: prompt.slice(0, 200),\n        promptLength: prompt.length,\n        referer,\n      })\n    }\n\n    const apiKey = process.env.OPENROUTER_API_KEY\n    if (!apiKey) {\n      return NextResponse.json({ error: 'Missing OPENROUTER_API_KEY' }, { status: 400 })\n    }\n\n    // Simplified: use chat/completions with modalities [\"image\", \"text\"].\n    // Reference: https://openrouter.ai/docs/features/multimodal/image-generation\n    const hasImages = Array.isArray(attachments) && attachments.length > 0\n    const vendor = typeof model === 'string' && model.includes('/') ? model.split('/')[0].toLowerCase() : ''\n    // Use OpenAI-compatible parts for chat/completions: `text` and `image_url`\n    const userMessage = hasImages\n      ? {\n          role: 'user',\n          content: [\n            { type: 'text', text: prompt },\n            ...attachments.map(att => ({ type: 'image_url', image_url: { url: att.url } })),\n          ],\n        }\n      : {\n          role: 'user',\n          // For text-only requests, content should be plain string per OpenAI compatibility\n          content: prompt,\n        }\n\n    const payload: {\n      model: string;\n      messages: Array<{\n        role: string;\n        content: string | Array<{ type: string; text?: string; image_url?: { url: string } }>;\n      }>;\n    } = {\n      model,\n      messages: [userMessage],\n    }\n    // For chat/completions, modalities hint is optional; omit to keep maximum compatibility\n\n    if (DEBUG) {\n      try {\n        const messageContent = userMessage.content;\n        const sample = Array.isArray(messageContent)\n          ? messageContent.map((c: unknown) => ({ type: (c as { type?: string })?.type, hasUrl: !!((c as { image_url?: { url?: string } })?.image_url?.url) })).slice(0, 5)\n          : String(messageContent).slice(0, 120)\n        const payloadPreview = { vendor, hasImages, model, attachmentsCount: (attachments || []).length, contentSample: sample }\n        console.log('[img] payload preview', payloadPreview)\n      } catch (e) {\n        console.log('[img] preview error', String(e))\n      }\n    }\n\n    const res = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: `Bearer ${apiKey}`,\n        'HTTP-Referer': referer,\n        Referer: referer,\n        'X-Title': 'AI Chat Image Generation',\n      },\n      body: JSON.stringify(payload),\n    })\n\n    const ctype = res.headers.get('content-type') || ''\n    if (!res.ok) {\n      const providerBody = await res.text().catch(() => '')\n      if (DEBUG) {\n        console.error('[img] provider non-OK', {\n          status: res.status,\n          statusText: res.statusText,\n          contentType: ctype,\n          bodyPreview: providerBody?.slice(0, 2000),\n          elapsedMs: Date.now() - startedAt,\n        })\n        try {\n          console.error('[img] payload debug', JSON.stringify(payload).slice(0, 2000))\n        } catch {}\n        try {\n          const first = (payload?.messages && payload.messages[0]) || null\n          console.error('[img] first message debug', JSON.stringify(first).slice(0, 2000))\n        } catch {}\n      }\n      const errorPayload: Record<string, unknown> = { error: 'Failed to generate image' }\n      if (process.env.NODE_ENV !== 'production') {\n        errorPayload.providerStatus = res.status\n        errorPayload.providerBody = providerBody?.slice(0, 1200)\n      }\n      // Refund since provider request failed\n      await refundCreditsForFeature({ clerkUserId: userId!, feature, quantity, reason: `http_${res.status}`, details: { model } })\n      return NextResponse.json(errorPayload, { status: res.status })\n    }\n\n    if (!ctype.includes('application/json')) {\n      const body = await res.text().catch(() => '')\n      if (DEBUG) {\n        console.error('[img] unexpected content-type from chat/completions', {\n          contentType: ctype,\n          bodyPreview: body?.slice(0, 2000),\n        })\n      }\n      await refundCreditsForFeature({ clerkUserId: userId!, feature, quantity, reason: 'invalid_content_type', details: { model } })\n      return NextResponse.json({ error: 'Invalid provider response' }, { status: 502 })\n    }\n\n    const json = (await res.json().catch((err: unknown) => {\n      if (DEBUG) {\n        console.error('[img] provider json parse error', { err: String(err) })\n      }\n      return null\n    })) as ChatCompletionsResponse | null\n\n    if (!json) {\n      if (DEBUG) {\n        console.error('[img] invalid provider response (no json)', { elapsedMs: Date.now() - startedAt })\n      }\n      await refundCreditsForFeature({ clerkUserId: userId!, feature, quantity, reason: 'json_parse_error', details: { model } })\n      return NextResponse.json({ error: 'Invalid provider response' }, { status: 502 })\n    }\n\n    if (json.error) {\n      const message = typeof json.error === 'string' ? json.error : json.error.message || 'Provider error'\n      if (DEBUG) {\n        console.error('[img] provider error', { message, json })\n      }\n      const payload: Record<string, unknown> = { error: message }\n      if (process.env.NODE_ENV !== 'production') {\n        payload.provider = json\n      }\n      await refundCreditsForFeature({ clerkUserId: userId!, feature, quantity, reason: 'provider_error', details: { model, message } })\n      return NextResponse.json(payload, { status: 502 })\n    }\n\n    // Expected response (non-stream):\n    // { choices: [ { message: { role: 'assistant', content: '...', images: [ { type: 'image_url', image_url: { url: 'data:image/png;base64,...' } } ] } } ] }\n    const choices = Array.isArray(json?.choices) ? (json?.choices as Choice[]) : []\n    const images: string[] = []\n\n    for (const choice of choices) {\n      const msg = choice?.message || {}\n      const imgArr = Array.isArray(msg?.images) ? (msg.images as ImageUrl[]) : []\n      for (const image of imgArr) {\n        // Try a few shapes seen in providers\n        const url =\n          (typeof image?.image_url === 'string' ? image.image_url : image?.image_url?.url) ||\n          image?.url\n        const b64 = image?.b64_json || image?.b64 || image?.image_base64\n        if (typeof url === 'string' && url.length > 0) images.push(url)\n        else if (typeof b64 === 'string' && b64.length > 0) images.push(`data:image/png;base64,${b64}`)\n      }\n    }\n\n    if (images.length === 0) {\n      if (DEBUG) {\n        console.error('[img] empty images array (chat/completions)', { json })\n      }\n      await refundCreditsForFeature({ clerkUserId: userId!, feature, quantity, reason: 'no_images', details: { model } })\n      return NextResponse.json({ error: 'No images returned' }, { status: 502 })\n    }\n\n    if (DEBUG) {\n      console.log('[img] success', { count: images.length, elapsedMs: Date.now() - startedAt })\n    }\n    return NextResponse.json({ images })\n  } catch (err: unknown) {\n    const payload: Record<string, unknown> = { error: 'Internal server error' }\n    if (process.env.NODE_ENV !== 'production') {\n      payload.detail = (err as Error)?.message || String(err)\n    }\n    console.error('[img] unhandled error', { detail: (payload as { detail?: string }).detail })\n    // Attempt refund on unexpected error path\n    try {\n      // best-effort: we don't have quantity here; default to 1\n      await refundCreditsForFeature({ clerkUserId: (await validateUserAuthentication().catch(()=>null)) || '', feature: 'ai_image_generation', quantity: 1, reason: 'unhandled_error' })\n    } catch {}\n    return NextResponse.json(payload, { status: 500 })\n  }\n}\n","size_bytes":11082},"src/app/api/webhooks/clerk/route.ts":{"content":"import { Webhook } from 'svix';\nimport { headers } from 'next/headers';\nimport { WebhookEvent } from '@clerk/nextjs/server';\nimport { db } from \"@/lib/db\";\n// Credit system removed - manual access control only\n\nexport async function POST(req: Request) {\n  const WEBHOOK_SECRET = process.env.CLERK_WEBHOOK_SECRET || process.env.WEBHOOK_SECRET;\n\n  if (!WEBHOOK_SECRET) {\n    throw new Error('Please add WEBHOOK_SECRET from Clerk Dashboard to .env or .env.local');\n  }\n\n  const headerPayload = await headers();\n  const svix_id = headerPayload.get('svix-id');\n  const svix_timestamp = headerPayload.get('svix-timestamp');\n  const svix_signature = headerPayload.get('svix-signature');\n\n  if (!svix_id || !svix_timestamp || !svix_signature) {\n    return new Response('Error occured -- no svix headers', {\n      status: 400,\n    });\n  }\n\n  const payload = await req.json();\n  const body = JSON.stringify(payload);\n\n  const wh = new Webhook(WEBHOOK_SECRET);\n\n  let evt: WebhookEvent;\n\n  try {\n    evt = wh.verify(body, {\n      'svix-id': svix_id,\n      'svix-timestamp': svix_timestamp,\n      'svix-signature': svix_signature,\n    }) as WebhookEvent;\n  } catch (err) {\n    console.error('Error verifying webhook:', err);\n    return new Response('Error occured', {\n      status: 400,\n    });\n  }\n\n  const { id } = evt.data;\n  const eventType = evt.type;\n\n  console.log(`Webhook with and ID of ${id} and type of ${eventType}`);\n  console.log('Webhook body:', body);\n\n  if (eventType === 'user.created') {\n    const { id, email_addresses, first_name, last_name } = evt.data;\n    \n    try {\n      const primaryEmail = email_addresses.find(email => email.id === evt.data.primary_email_address_id);\n      \n      // Create user in database\n      const user = await db.user.create({\n        data: {\n          clerkId: id,\n          email: primaryEmail?.email_address || null,\n          name: `${first_name || ''} ${last_name || ''}`.trim() || null,\n        },\n      });\n\n      console.log('User created successfully');\n    } catch (error) {\n      console.error('Error creating user:', error);\n      return new Response('Error creating user', { status: 500 });\n    }\n  }\n\n  if (eventType === 'user.updated') {\n    const { id, email_addresses, first_name, last_name } = evt.data;\n    \n    try {\n      const primaryEmail = email_addresses.find(email => email.id === evt.data.primary_email_address_id);\n      \n      await db.user.update({\n        where: { clerkId: id },\n        data: {\n          email: primaryEmail?.email_address || null,\n          name: `${first_name || ''} ${last_name || ''}`.trim() || null,\n        },\n      });\n\n      // Credit system removed - metadata ignored\n\n      console.log('User updated successfully');\n    } catch (error) {\n      console.error('Error updating user:', error);\n    }\n  }\n\n  if (eventType === 'user.deleted') {\n    try {\n      await db.user.delete({\n        where: { clerkId: evt.data.id! },\n      });\n\n      console.log('User deleted successfully');\n    } catch (error) {\n      console.error('Error deleting user:', error);\n    }\n  }\n\n  // Subscription and billing system removed - manual access control only\n  console.log(`Webhook processed: ${eventType} - subscription/billing events ignored`);\n\n  return new Response('', { status: 200 });\n}\n","size_bytes":3272},"src/app/api/admin/clerk/plans/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { auth } from '@clerk/nextjs/server'\nimport { isAdmin } from '@/lib/admin-utils'\nimport { fetchCommercePlans } from '@/lib/clerk/commerce-plans'\n\nexport async function GET() {\n  const { userId } = await auth()\n  if (!userId || !(await isAdmin(userId))) {\n    return NextResponse.json({ error: 'Não autorizado' }, { status: 401 })\n  }\n\n  try {\n    const plans = await fetchCommercePlans()\n    return NextResponse.json({ plans })\n  } catch (error) {\n    const message = (error as Error)?.message || 'Falha ao obter planos do Clerk'\n    const lower = message.toLowerCase()\n    const status = lower.includes('not configured') || lower.includes('não configurado') ? 501 : 502\n    return NextResponse.json({ error: message }, { status })\n  }\n}\n","size_bytes":790},"src/app/api/admin/storage/[id]/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { auth } from '@clerk/nextjs/server'\nimport { isAdmin } from '@/lib/admin-utils'\nimport { db } from '@/lib/db'\nimport { del as delBlob } from '@vercel/blob'\n\nexport async function DELETE(_: Request, { params }: { params: Promise<{ id: string }> }) {\n  const { userId } = await auth()\n  if (!userId || !(await isAdmin(userId))) {\n    return NextResponse.json({ error: 'Não autorizado' }, { status: 401 })\n  }\n  const { id } = await params\n  const obj = await db.storageObject.findUnique({ where: { id } })\n  if (!obj || obj.deletedAt) return NextResponse.json({ error: 'Não encontrado' }, { status: 404 })\n\n  try {\n    const token = process.env.BLOB_READ_WRITE_TOKEN\n    // Attempt to delete by URL; if fails caller can manually purge via provider UI\n    await delBlob(obj.url, { token })\n  } catch (e) {\n    console.error('Blob delete failed (continuing to soft-delete):', e)\n  }\n\n  await db.storageObject.update({ where: { id }, data: { deletedAt: new Date() } })\n  return NextResponse.json({ ok: true })\n}\n\n","size_bytes":1061},"src/app/api/admin/users/[id]/route.ts":{"content":"import { auth } from \"@clerk/nextjs/server\";\nimport { NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport { isAdmin } from \"@/lib/admin-utils\";\nimport { z } from \"zod\";\n\nexport async function DELETE(\n  request: Request,\n  ctx: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { userId } = await auth();\n\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Não autorizado\" }, { status: 401 });\n    }\n\n    const { id } = await ctx.params\n    const existing = await db.user.findUnique({ where: { id } })\n    if (!existing) {\n      return NextResponse.json({ error: 'Usuário não encontrado' }, { status: 404 })\n    }\n\n    try {\n      const updated = await db.user.update({ where: { id }, data: { isActive: false } })\n      return NextResponse.json({ success: true, user: { id: updated.id, isActive: updated.isActive } })\n    } catch (e: unknown) {\n      const msg = (e && ((e as { message?: string }).message || e.toString())) || 'Falha na atualização'\n      // Provide a clearer hint if the DB schema hasn't been migrated yet\n      if (msg.includes('isActive') || msg.toLowerCase().includes('column') || msg.toLowerCase().includes('unknown')) {\n        return NextResponse.json(\n          { error: 'Schema do banco de dados desatualizado. Execute as migrações para adicionar `User.isActive` (npm run db:migrate).' },\n          { status: 409 }\n        )\n      }\n      throw e\n    }\n  } catch {\n    // console.error(\"Failed to delete user:\", error);\n    return NextResponse.json(\n      { error: \"Falha ao excluir usuário\" },\n      { status: 500 }\n    );\n  }\n}\n\nconst UpdateSchema = z\n  .object({\n    name: z.string().min(1).max(200).optional(),\n    email: z.string().email().optional(),\n  })\n  .strict()\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { userId } = await auth();\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Não autorizado\" }, { status: 401 });\n    }\n\n    const body = await request.json().catch(() => null);\n    const parsed = UpdateSchema.safeParse(body);\n    if (!parsed.success) {\n      return NextResponse.json({ error: \"Dados inválidos\", issues: parsed.error.flatten() }, { status: 400 });\n    }\n    const data = parsed.data;\n\n    const { id } = await params;\n    const existing = await db.user.findUnique({ where: { id } });\n    if (!existing) {\n      return NextResponse.json({ error: \"Usuário não encontrado\" }, { status: 404 });\n    }\n\n    const updated = await db.user.update({\n      where: { id },\n      data: {\n        name: data.name ?? existing.name,\n        email: data.email ?? existing.email,\n      },\n      include: {\n        creditBalance: { select: { creditsRemaining: true } },\n        _count: { select: { usageHistory: true } },\n      },\n    });\n\n    return NextResponse.json(updated);\n  } catch (error) {\n    console.error(\"Failed to update user:\", error);\n    return NextResponse.json({ error: \"Falha ao atualizar usuário\" }, { status: 500 });\n  }\n}\n","size_bytes":3080},"src/app/api/admin/users/invitations/route.ts":{"content":"import { auth, createClerkClient } from \"@clerk/nextjs/server\"\nimport { NextResponse } from \"next/server\"\nimport { isAdmin } from \"@/lib/admin-utils\"\n\nconst clerk = createClerkClient({ secretKey: process.env.CLERK_SECRET_KEY as string })\nexport const runtime = 'nodejs'\n\nexport async function GET() {\n  try {\n    const { userId } = await auth()\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 })\n    }\n\n    // Fetch invitations; filter to pending/unaccepted\n    const list = await clerk.invitations.getInvitationList({}) as unknown as {\n      data?: Array<{\n        id: string;\n        emailAddress?: string;\n        email_address?: string;\n        status: string;\n        createdAt?: string;\n        created_at?: string;\n        updatedAt?: string;\n        updated_at?: string;\n        expiresAt?: string;\n        expires_at?: string;\n        revoked?: boolean;\n      }>;\n    } | Array<{\n      id: string;\n      emailAddress?: string;\n      email_address?: string;\n      status: string;\n      createdAt?: string;\n      created_at?: string;\n      updatedAt?: string;\n      updated_at?: string;\n      expiresAt?: string;\n      expires_at?: string;\n      revoked?: boolean;\n    }>;\n    const invitations = (Array.isArray(list) ? list : list?.data || [])\n      .filter((inv) => !inv.revoked && inv.status !== 'accepted')\n      .map((inv) => ({\n        id: inv.id,\n        emailAddress: inv.emailAddress || inv.email_address,\n        status: inv.status,\n        createdAt: inv.createdAt || inv.created_at,\n        updatedAt: inv.updatedAt || inv.updated_at,\n        expiresAt: inv.expiresAt || inv.expires_at,\n        revoked: !!inv.revoked,\n      }))\n\n    return NextResponse.json({ invitations })\n  } catch (error: unknown) {\n    console.error('List invitations failed:', error)\n    const err = error as { errors?: Array<{ message?: string }>; message?: string; status?: number };\n    const message = err?.errors?.[0]?.message || err?.message || 'Failed to list invitations'\n    return NextResponse.json({ error: message }, { status: err?.status || 500 })\n  }\n}\n\n","size_bytes":2132},"src/app/api/admin/users/invite/route.ts":{"content":"import { auth, createClerkClient } from \"@clerk/nextjs/server\"\nimport { NextResponse } from \"next/server\"\nimport { z } from \"zod\"\nimport { isAdmin } from \"@/lib/admin-utils\"\nimport { db } from \"@/lib/db\"\n\nconst InviteSchema = z.object({\n  email: z.string().email(),\n  name: z.string().optional(),\n})\n\nconst clerk = createClerkClient({ secretKey: process.env.CLERK_SECRET_KEY as string })\n\nexport const runtime = 'nodejs'\n\nexport async function POST(request: Request) {\n  try {\n    const { userId } = await auth()\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Não autorizado\" }, { status: 401 })\n    }\n\n    const json = await request.json()\n    const { email, name } = InviteSchema.parse(json)\n\n    // Check if a Clerk user already exists for this email\n    const existing = await clerk.users.getUserList({ emailAddress: [email] })\n    if (existing?.data?.length) {\n      const user = existing.data[0] as {\n        id: string;\n        emailAddresses?: Array<{ id: string; emailAddress: string }>;\n        primaryEmailAddressId?: string;\n        firstName?: string;\n      }\n\n      // Ensure local DB user exists\n      const existingDbUser = await db.user.findUnique({ where: { clerkId: user.id } })\n      if (!existingDbUser) {\n        const primary = user.emailAddresses?.find((e) => e.id === user.primaryEmailAddressId) || user.emailAddresses?.[0]\n        await db.user.create({\n          data: {\n            clerkId: user.id,\n            email: primary?.emailAddress ?? email,\n            name: name || user.firstName || null,\n          },\n        })\n      }\n\n      return NextResponse.json({ status: \"exists\", message: \"Usuário já existe no Clerk\", clerkUserId: user.id })\n    }\n\n    // Try to create an invitation for the user to join\n    try {\n      const invitation = await clerk.invitations.createInvitation({\n        emailAddress: email,\n        redirectUrl: process.env.NEXT_PUBLIC_APP_URL\n          ? `${process.env.NEXT_PUBLIC_APP_URL}/sign-up`\n          : undefined,\n      })\n      return NextResponse.json({ status: \"invited\", invitation })\n    } catch (inviteErr: unknown) {\n      console.error(\"Clerk invitation failed:\", inviteErr)\n      const err = inviteErr as { errors?: Array<{ message?: string }>; message?: string; status?: number };\n      const message = err?.errors?.[0]?.message || err?.message || \"Falha ao enviar convite\"\n      return NextResponse.json({ error: message }, { status: err?.status || 400 })\n    }\n  } catch (error) {\n    console.error(\"Admin invite user error:\", error)\n    const err = error as { errors?: Array<{ message?: string }>; message?: string };\n    const message = err?.errors?.[0]?.message || err?.message || \"Requisição inválida\"\n    return NextResponse.json({ error: message }, { status: 400 })\n  }\n}\n","size_bytes":2802},"src/app/api/admin/users/sync/route.ts":{"content":"import { auth, createClerkClient } from \"@clerk/nextjs/server\"\nimport { NextResponse } from \"next/server\"\nimport { isAdmin } from \"@/lib/admin-utils\"\nimport { db } from \"@/lib/db\"\n\nconst clerk = createClerkClient({ secretKey: process.env.CLERK_SECRET_KEY as string })\nexport const runtime = 'nodejs'\nexport const maxDuration = 300 // 5 minutes\n\nexport async function POST(request: Request) {\n  try {\n    const { userId } = await auth()\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 })\n    }\n\n    // Fetch a page of users from Clerk; paginate here if needed\n    const { pageSize: bodyPageSize, maxPages, debug: bodyDebug } = await request.json().catch(() => ({}))\n    const pageSize = Math.max(1, Math.min(200, bodyPageSize || 50))\n    const max = Math.max(1, Math.min(20, maxPages || 10))\n    const debug = Boolean(bodyDebug) || process.env.DEBUG_CLERK_SYNC === '1'\n\n    const dlog = (...args: unknown[]) => { if (debug) console.log('[admin/users/sync]', ...args) }\n\n    let totalProcessed = 0\n    let createdUsers = 0\n    let updatedUsers = 0\n    let pagesProcessed = 0\n\n    for (let page = 0; page < max; page++) {\n      const res = await clerk.users.getUserList({ limit: pageSize, offset: page * pageSize }) as unknown as { data?: Array<Record<string, unknown>> } | Array<Record<string, unknown>>\n      const users: Array<Record<string, any>> = (res as { data?: Array<Record<string, any>> })?.data || (res as Array<Record<string, any>>) || []\n      if (!users.length) break\n      pagesProcessed++\n      dlog(`page ${page + 1}/${max}: fetched ${users.length} users`)\n\n      // Process users in batches to prevent database connection exhaustion\n      const BATCH_SIZE = 10\n      for (let i = 0; i < users.length; i += BATCH_SIZE) {\n        const batch = users.slice(i, i + BATCH_SIZE)\n        const batchPromises = batch.map(async (cu) => {\n          totalProcessed++\n          try {\n            const clerkId = cu.id\n            dlog('processing user', { clerkId })\n            const primary = cu.emailAddresses?.find((e: { id?: string }) => e.id === cu.primaryEmailAddressId) || cu.emailAddresses?.[0]\n            const email = primary?.emailAddress || null\n            const name = [cu.firstName, cu.lastName].filter(Boolean).join(' ') || cu.firstName || null\n\n            // Sync basic user data\n            let dbUser = await db.user.findUnique({ where: { clerkId } })\n            if (!dbUser) {\n              dbUser = await db.user.create({ data: { clerkId, email, name } })\n              createdUsers++\n              dlog('created user', { clerkId, email, name })\n            } else {\n              // Update existing user data\n              await db.user.update({ where: { id: dbUser.id }, data: { email, name } })\n              updatedUsers++\n              dlog('updated user', { clerkId, email, name })\n            }\n          } catch (innerErr) {\n            console.error('Sync user failed:', innerErr)\n          }\n        })\n\n        // Wait for batch to complete before processing next batch\n        await Promise.allSettled(batchPromises)\n      }\n    }\n\n    const payload: Record<string, unknown> = {\n      processed: totalProcessed,\n      createdUsers,\n      updatedUsers,\n      pagesProcessed,\n    }\n    if (debug) {\n      payload.debug = {\n        pagesProcessed,\n      }\n    }\n    return NextResponse.json(payload)\n  } catch (error: unknown) {\n    console.error('Sync from Clerk failed:', error)\n    const err = error as { errors?: Array<{ message?: string }>; message?: string; status?: number }\n    const message = err?.errors?.[0]?.message || err?.message || 'Failed to sync users'\n    return NextResponse.json({ error: message }, { status: err?.status || 500 })\n  }\n}\n","size_bytes":3765},"src/app/api/ai/openrouter/models/route.ts":{"content":"import { NextResponse } from 'next/server'\nimport { validateUserAuthentication } from '@/lib/auth-utils'\n\ntype OpenRouterModel = {\n  id?: string\n  slug?: string\n  name?: string\n  tags?: unknown\n  output_modalities?: unknown\n  modalities?: unknown\n  capabilities?: { output?: unknown; modalities?: unknown } | unknown\n}\n\ntype OpenRouterResponse = { data?: OpenRouterModel[] } | null\n\ntype Primitive = string | number | boolean | null | undefined\n\nfunction toStringArray(value: unknown): string[] {\n  if (!Array.isArray(value)) return []\n  return value.map((x: Primitive) => String(x ?? ''))\n}\n\nfunction supportsImage(m: OpenRouterModel): boolean {\n  try {\n    const id = String(m?.id || m?.slug || '')\n    const tags: string[] = Array.isArray(m?.tags) ? toStringArray(m.tags) : []\n    const modalities: string[] = toStringArray(\n      (m as { output_modalities?: unknown; modalities?: unknown; capabilities?: { output?: unknown; modalities?: unknown } }).output_modalities\n      ?? (m as { modalities?: unknown }).modalities\n      ?? (m as { capabilities?: { output?: unknown } }).capabilities?.output\n      ?? (m as { capabilities?: { modalities?: unknown } }).capabilities?.modalities\n      ?? []\n    ).map((x) => x.toLowerCase())\n    if (modalities.includes('image')) return true\n    if (tags.some((t) => t.toLowerCase().includes('image'))) return true\n    if (/gpt-image|stable-diffusion|sd3|sdxl|flux-1|ideogram|kandinsky|playground-v|sd-/.test(id)) return true\n  } catch {}\n  return false\n}\n\nexport async function GET(req: Request) {\n  try {\n    try {\n      await validateUserAuthentication()\n    } catch (e) {\n      if (e && typeof e === 'object' && 'message' in e && (e as { message?: string }).message === 'Unauthorized') {\n        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n      }\n      throw e\n    }\n    const url = new URL(req.url)\n    const capability = url.searchParams.get('capability')\n\n    const apiKey = process.env.OPENROUTER_API_KEY\n    if (!apiKey) {\n      return NextResponse.json({ error: 'Missing OPENROUTER_API_KEY' }, { status: 400 })\n    }\n\n    const res = await fetch('https://openrouter.ai/api/v1/models', {\n      headers: {\n        Authorization: `Bearer ${apiKey}`,\n        Accept: 'application/json',\n      },\n      next: { revalidate: 60 },\n    })\n\n    if (!res.ok) {\n      return NextResponse.json({ error: 'Failed to fetch models' }, { status: res.status })\n    }\n\n    const json = (await res.json().catch(() => null)) as OpenRouterResponse\n    const data = Array.isArray(json?.data) ? json!.data! : []\n\n    let items = data\n    if (capability === 'image') {\n      items = data.filter((m) => supportsImage(m))\n    }\n\n    const models = items\n      .map((m) => {\n        const id = (m?.id || m?.slug || m?.name) ?? ''\n        const label = (m?.name || id) ?? ''\n        return id ? { id: String(id), label: String(label) } : null\n      })\n      .filter(Boolean)\n\n    return NextResponse.json({ models })\n  } catch {\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n","size_bytes":3064},"src/app/api/admin/users/[id]/activate/route.ts":{"content":"import { auth } from \"@clerk/nextjs/server\"\nimport { NextResponse } from \"next/server\"\nimport { db } from \"@/lib/db\"\nimport { isAdmin } from \"@/lib/admin-utils\"\n\nexport async function POST(\n  request: Request,\n  ctx: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { userId } = await auth()\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 })\n    }\n\n    const { id } = await ctx.params\n    const existing = await db.user.findUnique({ where: { id } })\n    if (!existing) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 })\n    }\n\n    const updated = await db.user.update({ where: { id }, data: { isActive: true } })\n    return NextResponse.json({ success: true, user: { id: updated.id, isActive: updated.isActive } })\n  } catch (error) {\n    console.error('Failed to activate user:', error)\n    return NextResponse.json({ error: 'Failed to activate user' }, { status: 500 })\n  }\n}\n\n","size_bytes":988},"src/app/api/admin/users/invitations/[id]/resend/route.ts":{"content":"import { auth } from \"@clerk/nextjs/server\"\nimport { NextResponse } from \"next/server\"\nimport { isAdmin } from \"@/lib/admin-utils\"\n\nexport const runtime = 'nodejs'\n\nexport async function POST(\n  _req: Request,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { userId } = await auth()\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Não autorizado\" }, { status: 401 })\n    }\n\n    const { id } = await params\n    try {\n      // Clerk Backend API for resend: POST /v1/invitations/{invitation_id}/resend\n      const token = process.env.CLERK_SECRET_KEY\n      if (!token) return NextResponse.json({ error: 'CLERK_SECRET_KEY não configurado' }, { status: 501 })\n      const url = `https://api.clerk.com/v1/invitations/${encodeURIComponent(id)}/resend`\n      const res = await fetch(url, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n      })\n      const text = await res.text()\n      if (!res.ok) {\n        let msg = text\n        try { const j = JSON.parse(text); msg = j?.message || j?.error || text } catch {}\n        return NextResponse.json({ error: msg || 'Falha ao reenviar' }, { status: res.status })\n      }\n      return NextResponse.json({ status: 'resent' })\n    } catch (err) {\n      const message = (err as { errors?: Array<{ message?: string }>; message?: string; status?: number })?.errors?.[0]?.message || (err as { message?: string })?.message || 'Falha ao reenviar convite'\n      return NextResponse.json({ error: message }, { status: (err as { status?: number })?.status || 500 })\n    }\n  } catch (error) {\n    return NextResponse.json({ error: (error as { message?: string })?.message || 'Erro inesperado' }, { status: 500 })\n  }\n}\n","size_bytes":1849},"src/app/api/admin/users/invitations/[id]/revoke/route.ts":{"content":"import { auth } from \"@clerk/nextjs/server\"\nimport { NextResponse } from \"next/server\"\nimport { isAdmin } from \"@/lib/admin-utils\"\n\nexport const runtime = 'nodejs'\n\nexport async function POST(\n  _req: Request,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { userId } = await auth()\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Não autorizado\" }, { status: 401 })\n    }\n\n    const { id } = await params\n    try {\n      // Use Clerk Backend API per docs: POST /v1/invitations/{invitation_id}/revoke\n      const token = process.env.CLERK_SECRET_KEY\n      if (!token) return NextResponse.json({ error: 'CLERK_SECRET_KEY não configurado' }, { status: 501 })\n      const url = `https://api.clerk.com/v1/invitations/${encodeURIComponent(id)}/revoke`\n      const res = await fetch(url, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n      })\n      const text = await res.text()\n      if (!res.ok) {\n        let msg = text\n        try { const j = JSON.parse(text); msg = j?.message || j?.error || text } catch {}\n        return NextResponse.json({ error: msg || 'Falha ao revogar' }, { status: res.status })\n      }\n      return NextResponse.json({ status: 'revoked' })\n    } catch (err) {\n      const message = (err as { errors?: Array<{ message?: string }>; message?: string; status?: number })?.errors?.[0]?.message || (err as { message?: string })?.message || 'Falha ao revogar convite'\n      return NextResponse.json({ error: message }, { status: (err as { status?: number })?.status || 500 })\n    }\n  } catch (error) {\n    return NextResponse.json({ error: (error as { message?: string })?.message || 'Erro inesperado' }, { status: 500 })\n  }\n}\n","size_bytes":1850},"replit.md":{"content":"# Next.js SaaS Template - Replit Setup\n\n## Overview\nThis is a complete Next.js SaaS template with authentication (Clerk), PostgreSQL database, AI chat features, billing/subscription management, and admin panel. The project has been successfully configured to run in the Replit environment.\n\n## Recent Changes\n- **2024-09-24**: Initial project setup in Replit environment\n  - Created PostgreSQL database and configured connection\n  - Set up environment variables for Replit hosting\n  - Configured Next.js for Replit proxy environment\n  - Set up workflow to serve on port 5000\n  - Configured deployment settings for production\n\n- **2024-09-24**: FiiAI Platform Transformation\n  - Removed forced subscription redirects from protected layout\n  - Created FiiAI-specific agent pages: Avaliador de Carteiras and Direcionador de Aportes\n  - Implemented admin permission system with email-based access control\n  - Updated sidebar navigation with FiiAI agents and conditional admin access\n  - Configured environment variables for admin email management\n  - Fixed post-login flow to provide direct access to dashboard and agents\n\n- **2024-09-28**: Complete Credit System Removal & Manual Access Model\n  - Eliminated all credit validation from investment recommendations API\n  - Removed subscription-based billing and payment processing\n  - Fixed admin dashboard by removing credit-related metrics and imports\n  - Simplified user sync functionality to basic user management only\n  - Updated user invitation system to work without credit allocation\n  - Transformed platform to fully manual access control model\n  - All features now accessible without credit limitations\n\n## Project Architecture\n- **Frontend**: Next.js 15 with App Router\n- **Authentication**: Clerk (requires configuration)\n- **Database**: PostgreSQL with Prisma ORM\n- **Styling**: Tailwind CSS + Radix UI components\n- **AI Features**: Vercel AI SDK with multiple providers\n- **Deployment**: Configured for Replit autoscale deployment\n\n## Key Configuration Files\n- `next.config.ts`: Configured for Replit environment with cross-origin support\n- `.env.local`: Environment variables (Clerk keys need to be configured)\n- `prisma/schema.prisma`: Database schema\n- `package.json`: Dependencies and scripts\n\n## Environment Setup\nThe project is configured with:\n- Database URL: Auto-configured from Replit PostgreSQL\n- App URL: Auto-configured for Replit domain\n- Server binding: 0.0.0.0:5000 for Replit proxy\n\n## Required User Configuration\nTo fully use the application, users need to:\n\n1. **Clerk Authentication** (Required):\n   - Sign up at https://clerk.com\n   - Create a new application\n   - Add the following environment variables to `.env.local`:\n     - `NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY`\n     - `CLERK_SECRET_KEY`\n     - `CLERK_WEBHOOK_SECRET` (for webhooks)\n\n2. **Optional Integrations**:\n   - Stripe for payments (`STRIPE_SECRET_KEY`, etc.)\n   - AI providers (OpenAI, Anthropic, etc.)\n   - Vercel Blob for file uploads (`BLOB_READ_WRITE_TOKEN`)\n\n## Running the Application\n- The Next.js server runs automatically via the configured workflow\n- Access the application through Replit's web preview\n- Database migrations have been applied automatically\n\n## Features Available\n- Landing page with marketing content\n- User authentication (Clerk configured and working)\n- Protected dashboard area with direct access post-login\n- FiiAI Agents:\n  - Avaliador de Carteiras (Portfolio Evaluator)\n  - Direcionador de Aportes (Investment Director)\n- Admin-only features:\n  - Carteiras Recomendadas (Recommended Portfolios)\n- Excel file upload functionality for portfolio analysis\n- Billing and subscription management\n- User profile management\n\n## Development Notes\n- Uses `--legacy-peer-deps` for npm install due to zod version conflicts\n- Prisma client is generated automatically in the workflow\n- Database schema is ready and migrated\n- TypeScript configuration ignores build errors for faster development\n- Admin access controlled via NEXT_PUBLIC_ADMIN_EMAILS environment variable\n- FiiAI agents reuse existing portfolio upload and analysis components\n- Authentication flow bypasses subscription requirements for immediate agent access","size_bytes":4184},"src/app/admin/carteira-recomendada/page.tsx":{"content":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  MoreVertical,\n  Plus,\n  Edit,\n  Trash2,\n  Building2,\n  TrendingUp,\n  Percent,\n  Search,\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  useAdminRecommendedPortfolio,\n  useCreateRecommendedPortfolio,\n  useUpdateRecommendedPortfolio,\n  useDeleteRecommendedPortfolio,\n  type RecommendedPortfolio,\n  type CreatePortfolioData,\n  type UpdatePortfolioData,\n} from \"@/hooks/admin/use-admin-recommended-portfolio\";\nimport { FiiSector } from \"@prisma/client\";\n\nconst SECTOR_LABELS = {\n  LOGISTICO: \"Logístico\",\n  SHOPPING: \"Shopping\",\n  CORPORATIVO: \"Corporativo\",\n  RESIDENCIAL: \"Residencial\",\n  TIJOLO: \"Tijolo\",\n  PAPEL: \"Papel\",\n  FUNDOS: \"Fundos\",\n  HIBRIDO: \"Híbrido\",\n  OUTROS: \"Outros\",\n} as const;\n\nconst SECTOR_COLORS = {\n  LOGISTICO: \"bg-blue-100 text-blue-800\",\n  SHOPPING: \"bg-purple-100 text-purple-800\",\n  CORPORATIVO: \"bg-green-100 text-green-800\",\n  RESIDENCIAL: \"bg-yellow-100 text-yellow-800\",\n  TIJOLO: \"bg-orange-100 text-orange-800\",\n  PAPEL: \"bg-pink-100 text-pink-800\",\n  FUNDOS: \"bg-indigo-100 text-indigo-800\",\n  HIBRIDO: \"bg-cyan-100 text-cyan-800\",\n  OUTROS: \"bg-gray-100 text-gray-800\",\n} as const;\n\nexport default function CarteiraRecomendadaPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedSector, setSelectedSector] = useState<string>(\"\");\n  const [activeFilter, setActiveFilter] = useState<string>(\"all\");\n  const [page, setPage] = useState(1);\n  \n  // Create/Edit Dialog States\n  const [createOpen, setCreateOpen] = useState(false);\n  const [editOpen, setEditOpen] = useState(false);\n  const [editId, setEditId] = useState<string | null>(null);\n  const [deleteOpen, setDeleteOpen] = useState(false);\n  const [deleteId, setDeleteId] = useState<string | null>(null);\n\n  // Form States\n  const [formData, setFormData] = useState<CreatePortfolioData>({\n    fiiCode: \"\",\n    fiiName: \"\",\n    sector: FiiSector.LOGISTICO,\n    percentage: 0,\n    reasoning: \"\",\n    isActive: true,\n  });\n\n  // Hooks\n  const { data, loading, refetch } = useAdminRecommendedPortfolio(\n    page,\n    50,\n    searchTerm,\n    selectedSector || undefined,\n    activeFilter === \"all\" ? undefined : activeFilter\n  );\n  \n  const { createPortfolio, loading: createLoading } = useCreateRecommendedPortfolio();\n  const { updatePortfolio, loading: updateLoading } = useUpdateRecommendedPortfolio();\n  const { deletePortfolio, loading: deleteLoading } = useDeleteRecommendedPortfolio();\n\n  // Form handlers\n  const resetForm = () => {\n    setFormData({\n      fiiCode: \"\",\n      fiiName: \"\",\n      sector: FiiSector.LOGISTICO,\n      percentage: 0,\n      reasoning: \"\",\n      isActive: true,\n    });\n  };\n\n  const handleCreate = async () => {\n    const success = await createPortfolio(formData);\n    if (success) {\n      setCreateOpen(false);\n      resetForm();\n      refetch();\n    }\n  };\n\n  const handleEdit = (portfolio: RecommendedPortfolio) => {\n    setEditId(portfolio.id);\n    setFormData({\n      fiiCode: portfolio.fiiCode,\n      fiiName: portfolio.fiiName,\n      sector: portfolio.sector,\n      percentage: portfolio.percentage,\n      reasoning: portfolio.reasoning || \"\",\n      isActive: portfolio.isActive,\n    });\n    setEditOpen(true);\n  };\n\n  const handleUpdate = async () => {\n    if (!editId) return;\n    const success = await updatePortfolio(editId, formData);\n    if (success) {\n      setEditOpen(false);\n      setEditId(null);\n      resetForm();\n      refetch();\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!deleteId) return;\n    const success = await deletePortfolio(deleteId);\n    if (success) {\n      setDeleteOpen(false);\n      setDeleteId(null);\n      refetch();\n    }\n  };\n\n  // Table columns\n  const columns = [\n    {\n      header: \"Código FII\",\n      accessorKey: \"fiiCode\",\n      cell: ({ row }: { row: { original: RecommendedPortfolio } }) => (\n        <div className=\"font-mono font-semibold text-primary\">\n          {row.original.fiiCode}\n        </div>\n      ),\n    },\n    {\n      header: \"Nome\",\n      accessorKey: \"fiiName\",\n      cell: ({ row }: { row: { original: RecommendedPortfolio } }) => (\n        <div className=\"font-medium\">{row.original.fiiName}</div>\n      ),\n    },\n    {\n      header: \"Setor\",\n      accessorKey: \"sector\",\n      cell: ({ row }: { row: { original: RecommendedPortfolio } }) => (\n        <Badge \n          variant=\"secondary\" \n          className={`${SECTOR_COLORS[row.original.sector]} border-0`}\n        >\n          {SECTOR_LABELS[row.original.sector]}\n        </Badge>\n      ),\n    },\n    {\n      header: \"Percentual\",\n      accessorKey: \"percentage\",\n      cell: ({ row }: { row: { original: RecommendedPortfolio } }) => (\n        <div className=\"flex items-center gap-1 font-medium\">\n          <Percent className=\"h-3 w-3\" />\n          {row.original.percentage.toFixed(2)}%\n        </div>\n      ),\n    },\n    {\n      header: \"Status\",\n      accessorKey: \"isActive\",\n      cell: ({ row }: { row: { original: RecommendedPortfolio } }) => (\n        <Badge variant={row.original.isActive ? \"default\" : \"secondary\"}>\n          {row.original.isActive ? \"Ativo\" : \"Inativo\"}\n        </Badge>\n      ),\n    },\n    {\n      header: \"Ações\",\n      id: \"actions\",\n      cell: ({ row }: { row: { original: RecommendedPortfolio } }) => (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <MoreVertical className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onClick={() => handleEdit(row.original)}>\n              <Edit className=\"mr-2 h-4 w-4\" />\n              Editar\n            </DropdownMenuItem>\n            <DropdownMenuItem \n              className=\"text-destructive focus:text-destructive\"\n              onClick={() => {\n                setDeleteId(row.original.id);\n                setDeleteOpen(true);\n              }}\n            >\n              <Trash2 className=\"mr-2 h-4 w-4\" />\n              Remover\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Building2 className=\"h-6 w-6 text-primary\" />\n            Carteira Recomendada\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Gerencie os FIIs recomendados para usuários da plataforma FiiAI\n          </p>\n        </div>\n        <Dialog open={createOpen} onOpenChange={setCreateOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Adicionar FII\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Adicionar FII à Carteira Recomendada</DialogTitle>\n              <DialogDescription>\n                Configure os dados do fundo imobiliário a ser adicionado\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fiiCode\">Código FII *</Label>\n                  <Input\n                    id=\"fiiCode\"\n                    placeholder=\"HGLG11\"\n                    value={formData.fiiCode}\n                    onChange={(e) => setFormData({ ...formData, fiiCode: e.target.value.toUpperCase() })}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"percentage\">Percentual (%) *</Label>\n                  <Input\n                    id=\"percentage\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    step=\"0.01\"\n                    value={formData.percentage}\n                    onChange={(e) => setFormData({ ...formData, percentage: parseFloat(e.target.value) || 0 })}\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fiiName\">Nome do FII *</Label>\n                <Input\n                  id=\"fiiName\"\n                  placeholder=\"Nome completo do fundo\"\n                  value={formData.fiiName}\n                  onChange={(e) => setFormData({ ...formData, fiiName: e.target.value })}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"sector\">Setor *</Label>\n                <Select\n                  value={formData.sector}\n                  onValueChange={(value) => setFormData({ ...formData, sector: value as FiiSector })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(SECTOR_LABELS).map(([value, label]) => (\n                      <SelectItem key={value} value={value}>\n                        {label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reasoning\">Justificativa</Label>\n                <Textarea\n                  id=\"reasoning\"\n                  placeholder=\"Por que este FII está sendo recomendado?\"\n                  rows={3}\n                  value={formData.reasoning}\n                  onChange={(e) => setFormData({ ...formData, reasoning: e.target.value })}\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"isActive\"\n                  checked={formData.isActive}\n                  onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                />\n                <Label htmlFor=\"isActive\">Ativo na carteira recomendada</Label>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setCreateOpen(false);\n                  resetForm();\n                }}\n                disabled={createLoading}\n              >\n                Cancelar\n              </Button>\n              <Button onClick={handleCreate} disabled={createLoading}>\n                {createLoading ? \"Adicionando...\" : \"Adicionar FII\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats */}\n      {data && (\n        <div className=\"grid gap-4 md:grid-cols-4\">\n          <div className=\"bg-background border rounded-lg p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Building2 className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total FIIs</p>\n                <p className=\"text-xl font-semibold\">{data.pagination.total}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-background border rounded-lg p-4\">\n            <div className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Ativos</p>\n                <p className=\"text-xl font-semibold\">\n                  {data.portfolios.filter(p => p.isActive).length}\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-background border rounded-lg p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Percent className=\"h-5 w-5 text-primary\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Alocado</p>\n                <p className=\"text-xl font-semibold\">{data.totalPercentage.toFixed(2)}%</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-background border rounded-lg p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Percent className=\"h-5 w-5 text-orange-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Restante</p>\n                <p className=\"text-xl font-semibold\">\n                  {Math.max(0, 100 - data.totalPercentage).toFixed(2)}%\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Filters */}\n      <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Buscar por código ou nome do FII...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <Select value={selectedSector} onValueChange={setSelectedSector}>\n          <SelectTrigger className=\"w-[200px]\">\n            <SelectValue placeholder=\"Filtrar por setor\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"\">Todos os setores</SelectItem>\n            {Object.entries(SECTOR_LABELS).map(([value, label]) => (\n              <SelectItem key={value} value={value}>\n                {label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <Select value={activeFilter} onValueChange={setActiveFilter}>\n          <SelectTrigger className=\"w-[150px]\">\n            <SelectValue placeholder=\"Status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Todos</SelectItem>\n            <SelectItem value=\"true\">Ativos</SelectItem>\n            <SelectItem value=\"false\">Inativos</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Table */}\n      <DataTable \n        columns={columns} \n        data={data?.portfolios || []} \n        loading={loading}\n      />\n\n      {/* Edit Dialog */}\n      <Dialog open={editOpen} onOpenChange={setEditOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Editar FII</DialogTitle>\n            <DialogDescription>\n              Atualize as informações do fundo imobiliário\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-fiiCode\">Código FII *</Label>\n                <Input\n                  id=\"edit-fiiCode\"\n                  value={formData.fiiCode}\n                  onChange={(e) => setFormData({ ...formData, fiiCode: e.target.value.toUpperCase() })}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-percentage\">Percentual (%) *</Label>\n                <Input\n                  id=\"edit-percentage\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  step=\"0.01\"\n                  value={formData.percentage}\n                  onChange={(e) => setFormData({ ...formData, percentage: parseFloat(e.target.value) || 0 })}\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-fiiName\">Nome do FII *</Label>\n              <Input\n                id=\"edit-fiiName\"\n                value={formData.fiiName}\n                onChange={(e) => setFormData({ ...formData, fiiName: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-sector\">Setor *</Label>\n              <Select\n                value={formData.sector}\n                onValueChange={(value) => setFormData({ ...formData, sector: value as FiiSector })}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.entries(SECTOR_LABELS).map(([value, label]) => (\n                    <SelectItem key={value} value={value}>\n                      {label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-reasoning\">Justificativa</Label>\n              <Textarea\n                id=\"edit-reasoning\"\n                rows={3}\n                value={formData.reasoning}\n                onChange={(e) => setFormData({ ...formData, reasoning: e.target.value })}\n              />\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"edit-isActive\"\n                checked={formData.isActive}\n                onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n              />\n              <Label htmlFor=\"edit-isActive\">Ativo na carteira recomendada</Label>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setEditOpen(false);\n                setEditId(null);\n                resetForm();\n              }}\n              disabled={updateLoading}\n            >\n              Cancelar\n            </Button>\n            <Button onClick={handleUpdate} disabled={updateLoading}>\n              {updateLoading ? \"Salvando...\" : \"Salvar Alterações\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation */}\n      <AlertDialog open={deleteOpen} onOpenChange={setDeleteOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja remover este FII da carteira recomendada? \n              Esta ação não pode ser desfeita.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={() => {\n                setDeleteOpen(false);\n                setDeleteId(null);\n              }}\n              disabled={deleteLoading}\n            >\n              Cancelar\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={handleDelete}\n              disabled={deleteLoading}\n              className=\"bg-destructive hover:bg-destructive/90\"\n            >\n              {deleteLoading ? \"Removendo...\" : \"Remover\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":19996},"src/app/api/admin/recommended-portfolio/[id]/route.ts":{"content":"import { auth } from \"@clerk/nextjs/server\";\nimport { NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport { isAdmin } from \"@/lib/admin-utils\";\nimport { cache } from \"@/lib/cache\";\nimport { FiiSector } from \"@prisma/client\";\n\n// GET - Get single recommended portfolio entry\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const { userId } = await auth();\n\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const portfolio = await db.recommendedPortfolio.findUnique({\n      where: { id: params.id }\n    });\n\n    if (!portfolio) {\n      return NextResponse.json(\n        { error: \"Recommended portfolio entry not found\" },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(portfolio);\n  } catch (error) {\n    console.error(\"Error fetching recommended portfolio entry:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch recommended portfolio entry\" },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT - Update recommended portfolio entry\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const { userId } = await auth();\n\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { fiiCode, fiiName, sector, percentage, reasoning, isActive } = body;\n\n    // Check if entry exists\n    const existingEntry = await db.recommendedPortfolio.findUnique({\n      where: { id: params.id }\n    });\n\n    if (!existingEntry) {\n      return NextResponse.json(\n        { error: \"Recommended portfolio entry not found\" },\n        { status: 404 }\n      );\n    }\n\n    // Validation\n    if (percentage !== undefined && (percentage < 0 || percentage > 100)) {\n      return NextResponse.json(\n        { error: \"Percentage must be between 0 and 100\" },\n        { status: 400 }\n      );\n    }\n\n    if (sector && !Object.values(FiiSector).includes(sector)) {\n      return NextResponse.json(\n        { error: \"Invalid sector\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if fiiCode is changing to an existing one\n    if (fiiCode && fiiCode.toUpperCase() !== existingEntry.fiiCode) {\n      const existingFii = await db.recommendedPortfolio.findUnique({\n        where: { fiiCode: fiiCode.toUpperCase() }\n      });\n\n      if (existingFii) {\n        return NextResponse.json(\n          { error: \"FII code already exists in recommended portfolio\" },\n          { status: 409 }\n        );\n      }\n    }\n\n    // Prepare update data\n    const updateData: any = {};\n    if (fiiCode !== undefined) updateData.fiiCode = fiiCode.toUpperCase();\n    if (fiiName !== undefined) updateData.fiiName = fiiName;\n    if (sector !== undefined) updateData.sector = sector;\n    if (percentage !== undefined) updateData.percentage = parseFloat(percentage);\n    if (reasoning !== undefined) updateData.reasoning = reasoning;\n    if (isActive !== undefined) updateData.isActive = Boolean(isActive);\n\n    const updatedPortfolio = await db.recommendedPortfolio.update({\n      where: { id: params.id },\n      data: updateData\n    });\n\n    // Clear cache\n    cache.clear();\n\n    return NextResponse.json(updatedPortfolio);\n  } catch (error) {\n    console.error(\"Error updating recommended portfolio entry:\", error);\n    return NextResponse.json(\n      { error: \"Failed to update recommended portfolio entry\" },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE - Remove recommended portfolio entry\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const { userId } = await auth();\n\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    // Check if entry exists\n    const existingEntry = await db.recommendedPortfolio.findUnique({\n      where: { id: params.id }\n    });\n\n    if (!existingEntry) {\n      return NextResponse.json(\n        { error: \"Recommended portfolio entry not found\" },\n        { status: 404 }\n      );\n    }\n\n    await db.recommendedPortfolio.delete({\n      where: { id: params.id }\n    });\n\n    // Clear cache\n    cache.clear();\n\n    return NextResponse.json({ message: \"Recommended portfolio entry deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting recommended portfolio entry:\", error);\n    return NextResponse.json(\n      { error: \"Failed to delete recommended portfolio entry\" },\n      { status: 500 }\n    );\n  }\n}","size_bytes":4623},"src/app/api/admin/recommended-portfolio/route.ts":{"content":"import { auth } from \"@clerk/nextjs/server\";\nimport { NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport { isAdmin } from \"@/lib/admin-utils\";\nimport { cache, getCacheKey } from \"@/lib/cache\";\nimport { FiiSector } from \"@prisma/client\";\n\n// GET - List all recommended portfolio entries with pagination\nexport async function GET(request: Request) {\n  try {\n    const { userId } = await auth();\n\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const page = Math.max(1, Number(searchParams.get(\"page\") || 1));\n    const pageSize = Math.min(100, Math.max(1, Number(searchParams.get(\"pageSize\") || 50)));\n    const search = searchParams.get(\"search\")?.trim() || \"\";\n    const sector = searchParams.get(\"sector\") as FiiSector | null;\n    const isActive = searchParams.get(\"isActive\");\n\n    // Build where clause\n    const whereClause: any = {};\n    \n    if (search) {\n      whereClause.OR = [\n        { fiiCode: { contains: search, mode: 'insensitive' as const } },\n        { fiiName: { contains: search, mode: 'insensitive' as const } },\n      ];\n    }\n\n    if (sector && Object.values(FiiSector).includes(sector)) {\n      whereClause.sector = sector;\n    }\n\n    if (isActive !== null) {\n      whereClause.isActive = isActive === \"true\";\n    }\n\n    // Create cache key\n    const cacheKey = getCacheKey('admin:recommended-portfolio', page, pageSize, search, sector || '', isActive || '');\n\n    // Try cache for non-search queries\n    if (!search) {\n      const cached = cache.get(cacheKey);\n      if (cached) {\n        return NextResponse.json(cached);\n      }\n    }\n\n    // Get data\n    const [total, portfolios, totalPercentageResult] = await Promise.all([\n      db.recommendedPortfolio.count({ where: whereClause }),\n      db.recommendedPortfolio.findMany({\n        where: whereClause,\n        orderBy: [\n          { isActive: \"desc\" },\n          { percentage: \"desc\" },\n          { fiiCode: \"asc\" }\n        ],\n        skip: (page - 1) * pageSize,\n        take: pageSize,\n      }),\n      // Calculate total percentage over ALL active records, not just current page\n      db.recommendedPortfolio.aggregate({\n        where: {\n          ...whereClause,\n          isActive: true\n        },\n        _sum: {\n          percentage: true\n        }\n      })\n    ]);\n\n    const result = {\n      portfolios,\n      pagination: {\n        page,\n        pageSize,\n        total,\n        pages: Math.ceil(total / pageSize),\n      },\n      totalPercentage: totalPercentageResult._sum.percentage || 0\n    };\n\n    // Cache for 5 minutes if no search\n    if (!search) {\n      cache.set(cacheKey, result, 5 * 60 * 1000);\n    }\n\n    return NextResponse.json(result);\n  } catch (error) {\n    console.error(\"Error fetching recommended portfolio:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch recommended portfolio\" },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Add new FII to recommended portfolio\nexport async function POST(request: Request) {\n  try {\n    const { userId } = await auth();\n\n    if (!userId || !(await isAdmin(userId))) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { fiiCode, fiiName, sector, percentage, reasoning, isActive = true } = body;\n\n    // Validation\n    if (!fiiCode || !fiiName || !sector || percentage === undefined) {\n      return NextResponse.json(\n        { error: \"Missing required fields: fiiCode, fiiName, sector, percentage\" },\n        { status: 400 }\n      );\n    }\n\n    if (!Object.values(FiiSector).includes(sector)) {\n      return NextResponse.json(\n        { error: \"Invalid sector\" },\n        { status: 400 }\n      );\n    }\n\n    if (percentage < 0 || percentage > 100) {\n      return NextResponse.json(\n        { error: \"Percentage must be between 0 and 100\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if FII code already exists\n    const existingFii = await db.recommendedPortfolio.findUnique({\n      where: { fiiCode: fiiCode.toUpperCase() }\n    });\n\n    if (existingFii) {\n      return NextResponse.json(\n        { error: \"FII code already exists in recommended portfolio\" },\n        { status: 409 }\n      );\n    }\n\n    // Create new entry\n    const newPortfolio = await db.recommendedPortfolio.create({\n      data: {\n        fiiCode: fiiCode.toUpperCase(),\n        fiiName,\n        sector,\n        percentage: parseFloat(percentage),\n        reasoning,\n        isActive: Boolean(isActive)\n      }\n    });\n\n    // Clear cache\n    cache.clear();\n\n    return NextResponse.json(newPortfolio, { status: 201 });\n  } catch (error) {\n    console.error(\"Error creating recommended portfolio entry:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create recommended portfolio entry\" },\n      { status: 500 }\n    );\n  }\n}","size_bytes":4936},"src/app/api/portfolio/upload/route.ts":{"content":"import { auth } from \"@clerk/nextjs/server\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport * as XLSX from 'xlsx';\nimport { put } from '@vercel/blob';\n\n// Interface for portfolio position\ninterface PortfolioPosition {\n  fiiCode: string;\n  fiiName?: string;\n  quantity: number;\n  avgPrice: number;\n  currentPrice?: number;\n  currentValue: number;\n  sector?: string;\n  percentage?: number;\n}\n\n// Expected Excel columns (flexible mapping)\nconst COLUMN_MAPPINGS = {\n  fiiCode: ['codigo', 'código', 'fii', 'ticker', 'ativo', 'código do fii', 'code'],\n  fiiName: ['nome', 'name', 'fundo', 'fii name', 'denominação', 'denominacao'],\n  quantity: ['quantidade', 'qty', 'cotas', 'shares', 'qtd', 'quantidade de cotas'],\n  avgPrice: ['preço médio', 'preco medio', 'pm', 'preço', 'preco', 'avg price', 'average price'],\n  currentPrice: ['preço atual', 'preco atual', 'cotação', 'cotacao', 'current price', 'price'],\n  currentValue: ['valor atual', 'valor', 'value', 'current value', 'valor total', 'patrimônio', 'patrimonio'],\n  sector: ['setor', 'sector', 'categoria', 'category', 'segmento']\n};\n\nfunction normalizeColumnName(column: string): string {\n  return column.toLowerCase().trim().replace(/[^\\w\\s]/g, '');\n}\n\nfunction findColumnIndex(headers: string[], possibleNames: string[]): number {\n  const normalizedHeaders = headers.map(h => normalizeColumnName(h));\n  \n  for (const possibleName of possibleNames) {\n    const normalizedPossible = normalizeColumnName(possibleName);\n    const index = normalizedHeaders.findIndex(h => \n      h.includes(normalizedPossible) || normalizedPossible.includes(h)\n    );\n    if (index !== -1) return index;\n  }\n  return -1;\n}\n\nfunction parseNumber(value: any): number {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') {\n    // Remove currency symbols and whitespace\n    let cleaned = value.replace(/[R$\\s]/g, '');\n    \n    if (cleaned.includes(',')) {\n      // Comma present - likely Brazilian format\n      const lastCommaIndex = cleaned.lastIndexOf(',');\n      const lastDotIndex = cleaned.lastIndexOf('.');\n      \n      if (lastCommaIndex > lastDotIndex) {\n        // Brazilian format: 1.234.567,89 or 100,50\n        // Comma is decimal separator, dots are thousands separators\n        cleaned = cleaned.replace(/\\./g, '').replace(',', '.');\n      } else {\n        // Format like: 1,234.56 (American with comma thousands separator)\n        cleaned = cleaned.replace(/,/g, '');\n      }\n    } else if (cleaned.includes('.')) {\n      // Only dots, no comma\n      const dotCount = (cleaned.match(/\\./g) || []).length;\n      \n      if (dotCount === 1) {\n        // Single dot - could be decimal or thousands separator\n        const dotIndex = cleaned.indexOf('.');\n        const afterDot = cleaned.substring(dotIndex + 1);\n        \n        // If exactly 2 digits after dot, likely decimal (12.34)\n        // If 3+ digits or not exactly 2, likely thousands separator (1.234 or 1.2345)\n        if (afterDot.length === 2 && /^\\d{2}$/.test(afterDot)) {\n          // Keep as decimal: 12.34\n          // No change needed\n        } else {\n          // Treat as thousands separator: 1.234 -> 1234\n          cleaned = cleaned.replace('.', '');\n        }\n      } else {\n        // Multiple dots - all are thousands separators except possibly the last\n        // For Brazilian format without comma: 1.234.567 (all dots are thousands)\n        cleaned = cleaned.replace(/\\./g, '');\n      }\n    }\n    \n    const parsed = parseFloat(cleaned);\n    return isNaN(parsed) ? 0 : parsed;\n  }\n  return 0;\n}\n\nfunction validatePortfolioPosition(position: any): PortfolioPosition | null {\n  if (!position.fiiCode || !position.quantity || !position.avgPrice) {\n    return null;\n  }\n\n  // Clean and validate FII code\n  const fiiCode = String(position.fiiCode).trim().toUpperCase();\n  if (!/^[A-Z]{4}\\d{2}$/.test(fiiCode)) {\n    return null; // Invalid FII code format\n  }\n\n  const quantity = parseNumber(position.quantity);\n  const avgPrice = parseNumber(position.avgPrice);\n  const currentPrice = parseNumber(position.currentPrice);\n  \n  if (quantity <= 0 || avgPrice <= 0) {\n    return null;\n  }\n\n  const currentValue = currentPrice > 0 ? quantity * currentPrice : quantity * avgPrice;\n\n  return {\n    fiiCode,\n    fiiName: position.fiiName ? String(position.fiiName).trim() : undefined,\n    quantity,\n    avgPrice,\n    currentPrice: currentPrice > 0 ? currentPrice : undefined,\n    currentValue,\n    sector: position.sector ? String(position.sector).trim() : undefined\n  };\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { userId: clerkUserId } = await auth();\n    \n    if (!clerkUserId) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    // Find or create user in our database using Clerk ID\n    let user = await db.user.findUnique({\n      where: { clerkId: clerkUserId }\n    });\n\n    if (!user) {\n      // Create user if doesn't exist\n      user = await db.user.create({\n        data: {\n          clerkId: clerkUserId,\n          email: '', // Will be updated by webhook\n          isActive: true\n        }\n      });\n    }\n\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n    \n    if (!file) {\n      return NextResponse.json({ error: \"No file provided\" }, { status: 400 });\n    }\n\n    // Validate file type\n    const validTypes = [\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'application/vnd.ms-excel',\n      'text/csv'\n    ];\n    \n    if (!validTypes.includes(file.type)) {\n      return NextResponse.json(\n        { error: \"Invalid file type. Please upload Excel (.xlsx, .xls) or CSV files only.\" },\n        { status: 400 }\n      );\n    }\n\n    // Validate file size (10MB max)\n    if (file.size > 10 * 1024 * 1024) {\n      return NextResponse.json(\n        { error: \"File too large. Maximum size is 10MB.\" },\n        { status: 400 }\n      );\n    }\n\n    // Save file to Vercel Blob first\n    let blobUrl: string | undefined;\n    let blobPathname: string | undefined;\n    \n    try {\n      const ext = file.name?.split('.').pop()?.toLowerCase() || 'xlsx';\n      const safeName = file.name?.replace(/[^a-z0-9._-]/gi, '_') || `portfolio.${ext}`;\n      const key = `portfolios/${clerkUserId}/${Date.now()}-${safeName}`;\n      const token = process.env.BLOB_READ_WRITE_TOKEN;\n      \n      if (token) {\n        const uploaded = await put(key, file, { access: 'public', token });\n        blobUrl = uploaded.url;\n        blobPathname = uploaded.pathname;\n        \n        // Register in StorageObject table\n        await db.storageObject.create({\n          data: {\n            userId: user.id,\n            clerkUserId: clerkUserId,\n            provider: 'vercel_blob',\n            url: uploaded.url,\n            pathname: uploaded.pathname,\n            name: file.name || safeName,\n            contentType: file.type || 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n            size: file.size,\n          },\n        });\n      }\n    } catch (blobError) {\n      console.error('Failed to save file to blob storage:', blobError);\n      // Continue processing even if blob storage fails\n    }\n\n    // Read file\n    const arrayBuffer = await file.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n    \n    let workbook: XLSX.WorkBook;\n    \n    try {\n      if (file.type === 'text/csv') {\n        const csvText = buffer.toString('utf-8');\n        workbook = XLSX.read(csvText, { type: 'string' });\n      } else {\n        workbook = XLSX.read(buffer, { type: 'buffer' });\n      }\n    } catch (error) {\n      return NextResponse.json(\n        { error: \"Failed to parse file. Please ensure it's a valid Excel or CSV file.\" },\n        { status: 400 }\n      );\n    }\n\n    // Get first worksheet\n    const sheetName = workbook.SheetNames[0];\n    if (!sheetName) {\n      return NextResponse.json(\n        { error: \"No data found in the file.\" },\n        { status: 400 }\n      );\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];\n\n    if (jsonData.length < 2) {\n      return NextResponse.json(\n        { error: \"File must contain at least a header row and one data row.\" },\n        { status: 400 }\n      );\n    }\n\n    // Extract headers and find column mappings\n    const headers = jsonData[0].map((h: any) => String(h || '').trim());\n    const columnIndexes = {\n      fiiCode: findColumnIndex(headers, COLUMN_MAPPINGS.fiiCode),\n      fiiName: findColumnIndex(headers, COLUMN_MAPPINGS.fiiName),\n      quantity: findColumnIndex(headers, COLUMN_MAPPINGS.quantity),\n      avgPrice: findColumnIndex(headers, COLUMN_MAPPINGS.avgPrice),\n      currentPrice: findColumnIndex(headers, COLUMN_MAPPINGS.currentPrice),\n      currentValue: findColumnIndex(headers, COLUMN_MAPPINGS.currentValue),\n      sector: findColumnIndex(headers, COLUMN_MAPPINGS.sector),\n    };\n\n    // Validate required columns\n    if (columnIndexes.fiiCode === -1 || columnIndexes.quantity === -1 || columnIndexes.avgPrice === -1) {\n      return NextResponse.json(\n        { \n          error: \"Required columns not found. Please ensure your file contains columns for: FII Code, Quantity, and Average Price.\",\n          foundHeaders: headers,\n          requiredColumns: [\"FII Code/Código\", \"Quantity/Quantidade\", \"Average Price/Preço Médio\"]\n        },\n        { status: 400 }\n      );\n    }\n\n    // Process data rows\n    const positions: PortfolioPosition[] = [];\n    let skippedRows = 0;\n\n    for (let i = 1; i < jsonData.length; i++) {\n      const row = jsonData[i];\n      if (!row || row.length === 0) continue;\n\n      const rawPosition = {\n        fiiCode: columnIndexes.fiiCode !== -1 ? row[columnIndexes.fiiCode] : undefined,\n        fiiName: columnIndexes.fiiName !== -1 ? row[columnIndexes.fiiName] : undefined,\n        quantity: columnIndexes.quantity !== -1 ? row[columnIndexes.quantity] : undefined,\n        avgPrice: columnIndexes.avgPrice !== -1 ? row[columnIndexes.avgPrice] : undefined,\n        currentPrice: columnIndexes.currentPrice !== -1 ? row[columnIndexes.currentPrice] : undefined,\n        currentValue: columnIndexes.currentValue !== -1 ? row[columnIndexes.currentValue] : undefined,\n        sector: columnIndexes.sector !== -1 ? row[columnIndexes.sector] : undefined,\n      };\n\n      const validPosition = validatePortfolioPosition(rawPosition);\n      if (validPosition) {\n        positions.push(validPosition);\n      } else {\n        skippedRows++;\n      }\n    }\n\n    if (positions.length === 0) {\n      return NextResponse.json(\n        { error: \"No valid positions found in the file. Please check the data format.\" },\n        { status: 400 }\n      );\n    }\n\n    // Calculate total value and percentages\n    const totalValue = positions.reduce((sum, pos) => sum + pos.currentValue, 0);\n    const positionsWithPercentage = positions.map(pos => ({\n      ...pos,\n      percentage: (pos.currentValue / totalValue) * 100\n    }));\n\n    // Save to database\n    const userPortfolio = await db.userPortfolio.create({\n      data: {\n        userId: user.id, // Use our internal user ID, not Clerk ID\n        originalFileName: file.name,\n        positions: positionsWithPercentage,\n        totalValue,\n      }\n    });\n\n    // Return success response\n    return NextResponse.json({\n      success: true,\n      portfolio: {\n        id: userPortfolio.id,\n        totalValue,\n        positionsCount: positions.length,\n        skippedRows,\n        positions: positionsWithPercentage.slice(0, 5), // Preview only\n      },\n      storage: {\n        saved: !!blobUrl,\n        url: blobUrl,\n        pathname: blobPathname\n      },\n      message: `Portfolio uploaded successfully! ${positions.length} positions imported${skippedRows > 0 ? `, ${skippedRows} rows skipped due to invalid data.` : '.'}`\n    });\n\n  } catch (error) {\n    console.error(\"Portfolio upload error:\", error);\n    return NextResponse.json(\n      { \n        error: \"Internal server error while processing the file.\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      },\n      { status: 500 }\n    );\n  }\n}","size_bytes":12212},"src/components/fii/agent-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { Bot, TrendingUp, Target, Sparkles, ChevronRight } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport Link from \"next/link\"\n\ninterface AgentCardProps {\n  className?: string\n  title: string\n  description: string\n  features: string[]\n  creditsPerUse: number\n  icon: React.ReactNode\n  href: string\n  highlight?: boolean\n}\n\nexport function AgentCard({\n  className,\n  title,\n  description,\n  features,\n  creditsPerUse,\n  icon,\n  href,\n  highlight = false,\n}: AgentCardProps) {\n  return (\n    <div\n      className={cn(\n        \"relative group rounded-2xl border transition-all duration-300 hover:shadow-lg hover:-translate-y-1\",\n        highlight \n          ? \"border-primary/20 bg-gradient-to-b from-primary/5 to-primary/10\"\n          : \"border-border bg-card\",\n        className\n      )}\n    >\n      {highlight && (\n        <div className=\"absolute -top-3 left-1/2 -translate-x-1/2\">\n          <span className=\"px-3 py-1 text-xs font-medium bg-primary text-primary-foreground rounded-full\">\n            Mais Popular\n          </span>\n        </div>\n      )}\n      \n      <div className=\"p-6\">\n        {/* Ícone e Título */}\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className={cn(\n            \"p-3 rounded-xl transition-colors\",\n            highlight ? \"bg-primary/10\" : \"bg-muted\"\n          )}>\n            {icon}\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold\">{title}</h3>\n            <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n              <Sparkles className=\"h-3 w-3\" />\n              <span>{creditsPerUse} créditos por uso</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Descrição */}\n        <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n          {description}\n        </p>\n\n        {/* Features */}\n        <ul className=\"space-y-2 mb-6\">\n          {features.map((feature, index) => (\n            <li key={index} className=\"flex items-start gap-2 text-sm\">\n              <ChevronRight className=\"h-4 w-4 text-primary mt-0.5 flex-shrink-0\" />\n              <span>{feature}</span>\n            </li>\n          ))}\n        </ul>\n\n        {/* CTA Button */}\n        <Button \n          asChild \n          className={cn(\n            \"w-full group/btn\",\n            highlight && \"bg-primary hover:bg-primary/90\"\n          )}\n        >\n          <Link href={href}>\n            Usar Agente\n            <Bot className=\"h-4 w-4 ml-2 group-hover/btn:translate-x-1 transition-transform\" />\n          </Link>\n        </Button>\n      </div>\n    </div>\n  )\n}\n\n// Agentes específicos do FiiAI\nexport function FiiAgents() {\n  const agents = [\n    {\n      title: \"Avaliador de Carteiras\",\n      description: \"Analise sua carteira atual comparando com nossa carteira recomendada e receba sugestões personalizadas de otimização.\",\n      features: [\n        \"Análise detalhada de diversificação\",\n        \"Comparação com carteira modelo\",\n        \"Identificação de oportunidades\",\n        \"Sugestões de rebalanceamento\",\n        \"Relatório completo em PDF\"\n      ],\n      creditsPerUse: 10,\n      icon: <TrendingUp className=\"h-6 w-6 text-primary\" />,\n      href: \"/dashboard/avaliar-carteira\",\n      highlight: true,\n    },\n    {\n      title: \"Direcionador de Aportes\",\n      description: \"Receba recomendações inteligentes de como distribuir seus novos aportes para otimizar sua carteira de FIIs.\",\n      features: [\n        \"Cálculo automático de distribuição\",\n        \"Otimização baseada em metas\",\n        \"Consideração de liquidez e yields\",\n        \"Diversificação por setores\",\n        \"Simulação de cenários\"\n      ],\n      creditsPerUse: 5,\n      icon: <Target className=\"h-6 w-6 text-primary\" />,\n      href: \"/dashboard/direcionar-aportes\",\n    },\n  ]\n\n  return (\n    <section id=\"agentes\" className=\"container mx-auto px-4 mt-24\">\n      <div className=\"mx-auto max-w-2xl text-center mb-16\">\n        <h2 className=\"text-3xl md:text-4xl font-semibold tracking-tight mb-4\">\n          Agentes Especializados em FIIs\n        </h2>\n        <p className=\"text-muted-foreground text-lg\">\n          Dois agentes de IA especializados para otimizar sua carteira de fundos imobiliários\n        </p>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 max-w-5xl mx-auto\">\n        {agents.map((agent, index) => (\n          <AgentCard key={index} {...agent} />\n        ))}\n      </div>\n    </section>\n  )\n}","size_bytes":4589},"src/components/fii/features.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { \n  TrendingUp, \n  Target, \n  FileSpreadsheet, \n  BarChart3, \n  Shield, \n  Zap, \n  Building2, \n  PieChart, \n  Calculator,\n  TrendingDown,\n  Eye,\n  CheckCircle\n} from \"lucide-react\"\nimport { GlowingEffect } from \"@/components/ui/glowing-effect\"\n\nconst features = [\n  {\n    area: \"md:[grid-area:1/1/2/2]\",\n    icon: <FileSpreadsheet className=\"h-5 w-5 text-blue-500\" />,\n    title: \"Upload de Carteira\",\n    description: \"Importe sua carteira atual via Excel ou CSV e visualize sua posição de forma organizada.\"\n  },\n  {\n    area: \"md:[grid-area:1/2/2/3]\", \n    icon: <TrendingUp className=\"h-5 w-5 text-green-500\" />,\n    title: \"Análise Comparativa\",\n    description: \"Compare sua carteira com nossa carteira recomendada baseada em critérios técnicos.\"\n  },\n  {\n    area: \"md:[grid-area:1/3/2/4]\",\n    icon: <Target className=\"h-5 w-5 text-purple-500\" />,\n    title: \"Recomendação de Aportes\", \n    description: \"Receba sugestões inteligentes de como distribuir novos investimentos.\"\n  },\n  {\n    area: \"md:[grid-area:2/1/2/2]\",\n    icon: <BarChart3 className=\"h-5 w-5 text-orange-500\" />,\n    title: \"Análise de Setores\",\n    description: \"Diversificação por segmentos: shopping, logística, corporativo e mais.\"\n  },\n  {\n    area: \"md:[grid-area:2/2/2/3]\",\n    icon: <PieChart className=\"h-5 w-5 text-pink-500\" />,\n    title: \"Otimização de Yield\",\n    description: \"Maximize seus dividendos com base no histórico e projeções dos FIIs.\"\n  },\n  {\n    area: \"md:[grid-area:2/3/2/4]\",\n    icon: <Calculator className=\"h-5 w-5 text-indigo-500\" />,\n    title: \"Métricas Avançadas\",\n    description: \"P/VP, Dividend Yield, liquidez e análise fundamentalista completa.\"\n  },\n  {\n    area: \"md:[grid-area:3/1/3/2]\",\n    icon: <Shield className=\"h-5 w-5 text-emerald-500\" />,\n    title: \"Gestão de Risco\",\n    description: \"Identificação de concentração excessiva e sugestões de diversificação.\"\n  },\n  {\n    area: \"md:[grid-area:3/2/3/3]\",\n    icon: <Eye className=\"h-5 w-5 text-cyan-500\" />,\n    title: \"Monitoramento Contínuo\",\n    description: \"Acompanhe a performance da sua carteira e recomendações atualizadas.\"\n  },\n  {\n    area: \"md:[grid-area:3/3/3/4]\",\n    icon: <Zap className=\"h-5 w-5 text-yellow-500\" />,\n    title: \"Análise em Tempo Real\",\n    description: \"Processamento rápido com resultados em menos de 10 segundos.\"\n  }\n]\n\nfunction GridItem({ \n  area, \n  icon, \n  title, \n  description \n}: { \n  area: string\n  icon: React.ReactNode\n  title: string\n  description: string\n}) {\n  return (\n    <li className={cn(\"relative rounded-[1.25rem] border-[0.75px] border-border p-2 md:rounded-[1.5rem] md:p-3\", area)}>\n      <GlowingEffect \n        spread={40} \n        glow \n        disabled={false} \n        proximity={64} \n        inactiveZone={0.01} \n        borderWidth={3} \n      />\n      <div className=\"relative flex h-full flex-col justify-between gap-4 overflow-hidden rounded-xl border-[0.75px] bg-background p-6 shadow-sm\">\n        <span className=\"inline-flex size-8 items-center justify-center rounded-lg border-[0.75px] border-border bg-muted\">\n          {icon}\n        </span>\n        <div className=\"space-y-2\">\n          <h3 className=\"text-base font-semibold\">{title}</h3>\n          <p className=\"text-sm text-muted-foreground leading-relaxed\">{description}</p>\n        </div>\n      </div>\n    </li>\n  )\n}\n\nexport function FiiFeatures() {\n  return (\n    <section id=\"recursos\" className=\"container mx-auto px-4 mt-24\">\n      <div className=\"mx-auto max-w-2xl text-center\">\n        <h2 className=\"text-3xl md:text-4xl font-semibold tracking-tight\">\n          Recursos Completos para FIIs\n        </h2>\n        <p className=\"mt-3 text-muted-foreground\">\n          Tudo que você precisa para otimizar seus investimentos em fundos imobiliários\n        </p>\n      </div>\n      <div className=\"mt-10\">\n        <ul className=\"grid grid-cols-1 grid-rows-none gap-4 md:grid-cols-3 md:grid-rows-3 lg:gap-4\">\n          {features.map((feature, index) => (\n            <GridItem key={index} {...feature} />\n          ))}\n        </ul>\n      </div>\n    </section>\n  )\n}","size_bytes":4194},"src/components/fii/hero.tsx":{"content":"\"use client\";\n\nimport React from 'react'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport { ArrowRight, TrendingUp, Building2, BarChart3 } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { AnimatedGroup } from '@/components/ui/animated-group'\n\nexport function FiiHero() {\n  return (\n    <>\n      <main className=\"overflow-hidden\">\n        <div\n          aria-hidden\n          className=\"z-[2] absolute inset-0 pointer-events-none isolate opacity-30 contain-strict hidden lg:block\">\n          <div className=\"w-[35rem] h-[80rem] -translate-y-[350px] absolute left-0 top-0 -rotate-45 rounded-full bg-[radial-gradient(68.54%_68.72%_at_55.02%_31.46%,hsla(45,100%,60%,.12)_0,hsla(45,80%,50%,.06)_50%,hsla(45,60%,40%,0)_80%)]\" />\n          <div className=\"h-[80rem] absolute left-0 top-0 w-56 -rotate-45 rounded-full bg-[radial-gradient(50%_50%_at_50%_50%,hsla(45,100%,60%,.08)_0,hsla(45,60%,40%,.04)_80%,transparent_100%)] [translate:5%_-50%]\" />\n          <div className=\"h-[80rem] -translate-y-[350px] absolute left-0 top-0 w-56 -rotate-45 bg-[radial-gradient(50%_50%_at_50%_50%,hsla(45,90%,55%,.06)_0,hsla(45,50%,35%,.03)_80%,transparent_100%)]\" />\n        </div>\n\n        <section>\n          <div className=\"relative pt-24 md:pt-36\">\n            <AnimatedGroup\n              variants={{\n                container: {\n                  visible: {\n                    transition: {\n                      delayChildren: 0.3,\n                    },\n                  },\n                },\n                item: {\n                  hidden: {\n                    opacity: 0,\n                    y: 20,\n                  },\n                  visible: {\n                    opacity: 1,\n                    y: 0,\n                    transition: {\n                      type: 'spring' as const,\n                      bounce: 0.3,\n                      duration: 1.2,\n                    },\n                  },\n                },\n              }}\n              className=\"absolute inset-0 -z-20\">\n              <Image\n                src=\"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?q=80&w=1920&auto=format&fit=crop\"\n                alt=\"Edifícios comerciais modernos\"\n                fill\n                className=\"object-cover opacity-5\"\n                priority\n              />\n            </AnimatedGroup>\n            \n            <div className=\"container relative mx-auto max-w-7xl px-6 text-center\">\n              <AnimatedGroup\n                preset=\"slide\"\n                className=\"mx-auto max-w-4xl space-y-6\">\n                \n                {/* Badge */}\n                <div className=\"inline-flex items-center gap-2 rounded-full border border-primary/20 bg-primary/5 px-4 py-2 text-sm font-medium text-primary\">\n                  <Building2 className=\"h-4 w-4\" />\n                  Análise Inteligente de FIIs\n                </div>\n\n                {/* Título Principal */}\n                <h1 className=\"text-4xl font-bold tracking-tight sm:text-6xl lg:text-7xl\">\n                  <span className=\"bg-gradient-to-r from-foreground via-foreground to-primary bg-clip-text text-transparent\">\n                    Otimize seus\n                  </span>\n                  <br />\n                  <span className=\"bg-gradient-to-r from-primary to-yellow-500 bg-clip-text text-transparent\">\n                    Fundos Imobiliários\n                  </span>\n                  <br />\n                  <span className=\"text-foreground\">\n                    com Inteligência Artificial\n                  </span>\n                </h1>\n\n                {/* Subtítulo */}\n                <p className=\"mx-auto max-w-2xl text-lg text-muted-foreground sm:text-xl leading-relaxed\">\n                  Plataforma especializada com dois agentes de IA para análise de carteira e recomendações \n                  de aportes em fundos imobiliários brasileiros.\n                </p>\n\n                {/* CTAs */}\n                <div className=\"flex flex-col items-center justify-center gap-4 sm:flex-row sm:gap-6 pt-4\">\n                  <Button size=\"lg\" asChild className=\"group relative overflow-hidden\">\n                    <Link href=\"/dashboard\">\n                      <span className=\"relative z-10\">Começar Análise</span>\n                      <TrendingUp className=\"ml-2 h-5 w-5 transition-transform group-hover:translate-x-1\" />\n                    </Link>\n                  </Button>\n                  \n                  <Button variant=\"outline\" size=\"lg\" asChild className=\"group\">\n                    <Link href=\"#agentes\">\n                      Conhecer Agentes\n                      <ArrowRight className=\"ml-2 h-4 w-4 transition-transform group-hover:translate-x-1\" />\n                    </Link>\n                  </Button>\n                </div>\n\n                {/* Estatísticas */}\n                <div className=\"grid grid-cols-1 gap-6 pt-12 sm:grid-cols-3 max-w-2xl mx-auto\">\n                  <div className=\"flex flex-col items-center gap-2\">\n                    <div className=\"text-2xl font-bold text-primary\">500+</div>\n                    <div className=\"text-sm text-muted-foreground\">FIIs Analisados</div>\n                  </div>\n                  <div className=\"flex flex-col items-center gap-2\">\n                    <div className=\"text-2xl font-bold text-primary\">95%</div>\n                    <div className=\"text-sm text-muted-foreground\">Precisão nas Recomendações</div>\n                  </div>\n                  <div className=\"flex flex-col items-center gap-2\">\n                    <div className=\"text-2xl font-bold text-primary\">10s</div>\n                    <div className=\"text-sm text-muted-foreground\">Análise Completa</div>\n                  </div>\n                </div>\n              </AnimatedGroup>\n            </div>\n          </div>\n        </section>\n      </main>\n    </>\n  )\n}","size_bytes":5899},"src/components/fii/portfolio-upload-section.tsx":{"content":"\"use client\"\n\nimport React, { useState } from \"react\";\nimport { PortfolioUploader } from \"./portfolio-uploader\";\nimport { usePortfolioUpload } from \"@/hooks/use-portfolio-upload\";\nimport { usePortfolioAnalysis } from \"@/hooks/use-portfolio-analysis\";\nimport { PortfolioAnalysisSection } from \"./portfolio-analysis-section\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileSpreadsheet, TrendingUp, PieChart, Target, Brain } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\n\nexport function PortfolioUploadSection() {\n  const { uploading, uploadResult, uploadPortfolio, clearResult } = usePortfolioUpload();\n  const [showAnalysis, setShowAnalysis] = useState(false);\n  const { analyzePortfolio, isAnalyzing } = usePortfolioAnalysis(uploadResult?.id);\n\n  const handleUpload = async (file: File) => {\n    try {\n      await uploadPortfolio(file);\n      setShowAnalysis(false); // Reset analysis view when new upload\n    } catch (error) {\n      // Error is already handled in the hook\n      console.error(\"Upload failed:\", error);\n    }\n  };\n\n  const handleAnalyzePortfolio = () => {\n    if (uploadResult?.id) {\n      analyzePortfolio(uploadResult.id);\n      setShowAnalysis(true);\n    }\n  };\n\n  const handleViewRecommendations = () => {\n    setShowAnalysis(true);\n  };\n\n  if (uploadResult) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <FileSpreadsheet className=\"h-5 w-5 text-green-600\" />\n                <CardTitle>Carteira Carregada com Sucesso!</CardTitle>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={clearResult}\n              >\n                Carregar Nova Carteira\n              </Button>\n            </div>\n            <CardDescription>\n              Sua carteira foi processada e está pronta para análise pelos agentes de IA.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-4 md:grid-cols-3 mb-6\">\n              <div className=\"bg-background border rounded-lg p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Valor Total</p>\n                    <p className=\"text-lg font-semibold\">\n                      {formatCurrency(uploadResult.totalValue)}\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"bg-background border rounded-lg p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <PieChart className=\"h-5 w-5 text-green-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">FIIs na Carteira</p>\n                    <p className=\"text-lg font-semibold\">{uploadResult.positionsCount}</p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"bg-background border rounded-lg p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Target className=\"h-5 w-5 text-purple-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Linhas Processadas</p>\n                    <p className=\"text-lg font-semibold\">\n                      {uploadResult.positionsCount + uploadResult.skippedRows}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {uploadResult.positions.length > 0 && (\n              <div>\n                <h4 className=\"font-medium mb-3\">Posições Principais (Preview)</h4>\n                <div className=\"space-y-2\">\n                  {uploadResult.positions.map((position, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <Badge variant=\"outline\" className=\"font-mono\">\n                          {position.fiiCode}\n                        </Badge>\n                        {position.fiiName && (\n                          <span className=\"text-sm text-muted-foreground\">\n                            {position.fiiName}\n                          </span>\n                        )}\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-medium\">\n                          {formatCurrency(position.currentValue)}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {position.quantity.toLocaleString()} cotas\n                          {position.percentage && ` • ${position.percentage.toFixed(1)}%`}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                {uploadResult.positionsCount > 5 && (\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    E mais {uploadResult.positionsCount - 5} posições...\n                  </p>\n                )}\n              </div>\n            )}\n\n            {uploadResult.skippedRows > 0 && (\n              <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                <p className=\"text-sm text-yellow-800\">\n                  ⚠️ {uploadResult.skippedRows} linha(s) foram ignoradas devido a dados inválidos ou incompletos.\n                </p>\n              </div>\n            )}\n\n            <div className=\"mt-6 flex gap-3\">\n              <Button \n                className=\"flex-1\" \n                onClick={handleAnalyzePortfolio}\n                disabled={isAnalyzing || !uploadResult?.id}\n              >\n                {isAnalyzing ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                    Analisando...\n                  </>\n                ) : (\n                  <>\n                    <Brain className=\"mr-2 h-4 w-4\" />\n                    Analisar Carteira\n                  </>\n                )}\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={handleViewRecommendations}\n                disabled={!uploadResult?.id}\n              >\n                <TrendingUp className=\"mr-2 h-4 w-4\" />\n                Ver Recomendações\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Show analysis section when requested */}\n        {showAnalysis && uploadResult?.id && (\n          <PortfolioAnalysisSection \n            portfolioId={uploadResult.id}\n            portfolioName={\"Sua Carteira\"}\n          />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileSpreadsheet className=\"h-5 w-5 text-primary\" />\n            Upload da Sua Carteira\n          </CardTitle>\n          <CardDescription>\n            Envie um arquivo Excel ou CSV com suas posições atuais em FIIs para análise personalizada\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <PortfolioUploader onUpload={handleUpload} />\n          \n          <div className=\"mt-6 space-y-4\">\n            <h4 className=\"font-medium\">Formato do Arquivo</h4>\n            <div className=\"text-sm text-muted-foreground space-y-2\">\n              <p>\n                <strong>Colunas obrigatórias:</strong> Código do FII, Quantidade de Cotas, Preço Médio\n              </p>\n              <p>\n                <strong>Colunas opcionais:</strong> Nome do FII, Preço Atual, Valor Total, Setor\n              </p>\n              <p>\n                <strong>Formatos aceitos:</strong> .xlsx, .xls, .csv (máximo 10MB)\n              </p>\n              <p>\n                <strong>Exemplo de cabeçalhos:</strong> \"Código\", \"Quantidade\", \"Preço Médio\", \"Valor Total\"\n              </p>\n            </div>\n            \n            <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <p className=\"text-sm text-blue-800\">\n                💡 <strong>Dica:</strong> O sistema reconhece automaticamente colunas em português e inglês. \n                Não precisa se preocupar com o formato exato dos cabeçalhos.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8958},"src/components/fii/portfolio-uploader.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { useDropzone } from \"react-dropzone\"\nimport { cn } from \"@/lib/utils\"\nimport { Upload, FileSpreadsheet, X, Check, AlertCircle } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Progress } from \"@/components/ui/progress\"\n\ninterface PortfolioUploaderProps {\n  className?: string\n  onUpload?: (file: File) => Promise<void>\n  accept?: string[]\n  maxSizeMB?: number\n}\n\nexport function PortfolioUploader({\n  className,\n  onUpload,\n  accept = ['.xlsx', '.xls', '.csv'],\n  maxSizeMB = 10,\n}: PortfolioUploaderProps) {\n  const [uploadStatus, setUploadStatus] = React.useState<'idle' | 'uploading' | 'success' | 'error'>('idle')\n  const [uploadProgress, setUploadProgress] = React.useState(0)\n  const [errorMessage, setErrorMessage] = React.useState<string>('')\n  const [uploadedFile, setUploadedFile] = React.useState<File | null>(null)\n\n  const handleUpload = async (files: File[]) => {\n    const file = files[0]\n    if (!file) return\n\n    setUploadedFile(file)\n    setUploadStatus('uploading')\n    setUploadProgress(0)\n    setErrorMessage('')\n\n    try {\n      // Simulação de progresso\n      const progressInterval = setInterval(() => {\n        setUploadProgress(prev => {\n          if (prev >= 90) {\n            clearInterval(progressInterval)\n            return 90\n          }\n          return prev + 10\n        })\n      }, 200)\n\n      await onUpload?.(file)\n      \n      clearInterval(progressInterval)\n      setUploadProgress(100)\n      setUploadStatus('success')\n    } catch (error) {\n      setUploadStatus('error')\n      setErrorMessage(error instanceof Error ? error.message : 'Erro ao fazer upload do arquivo')\n      setUploadProgress(0)\n    }\n  }\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragReject,\n    fileRejections,\n  } = useDropzone({\n    onDrop: handleUpload,\n    accept: {\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],\n      'application/vnd.ms-excel': ['.xls'],\n      'text/csv': ['.csv'],\n    },\n    maxFiles: 1,\n    maxSize: maxSizeMB * 1024 * 1024,\n    disabled: uploadStatus === 'uploading',\n  })\n\n  const reset = () => {\n    setUploadStatus('idle')\n    setUploadProgress(0)\n    setErrorMessage('')\n    setUploadedFile(null)\n  }\n\n  return (\n    <div className={cn(\"w-full\", className)}>\n      <div\n        {...getRootProps()}\n        className={cn(\n          \"relative border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors\",\n          isDragActive && !isDragReject && \"border-primary bg-primary/5\",\n          isDragReject && \"border-destructive bg-destructive/5\",\n          uploadStatus === 'uploading' && \"cursor-not-allowed opacity-60\",\n          uploadStatus === 'success' && \"border-green-500 bg-green-50\",\n          uploadStatus === 'error' && \"border-destructive bg-destructive/5\",\n          uploadStatus === 'idle' && \"border-muted-foreground/25 hover:border-primary hover:bg-primary/5\"\n        )}\n      >\n        <input {...getInputProps()} />\n        \n        {uploadStatus === 'idle' && (\n          <div className=\"space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-muted rounded-full flex items-center justify-center\">\n              <Upload className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-medium\">\n                {isDragActive ? 'Solte o arquivo aqui' : 'Envie sua carteira atual'}\n              </h3>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Arraste e solte ou clique para selecionar um arquivo Excel (.xlsx, .xls) ou CSV\n              </p>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Máximo {maxSizeMB}MB\n              </p>\n            </div>\n          </div>\n        )}\n\n        {uploadStatus === 'uploading' && uploadedFile && (\n          <div className=\"space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n              <FileSpreadsheet className=\"h-8 w-8 text-primary animate-pulse\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-medium\">Processando carteira...</h3>\n              <p className=\"text-sm text-muted-foreground\">{uploadedFile.name}</p>\n              <Progress value={uploadProgress} className=\"mt-3 h-2\" />\n            </div>\n          </div>\n        )}\n\n        {uploadStatus === 'success' && uploadedFile && (\n          <div className=\"space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center\">\n              <Check className=\"h-8 w-8 text-green-600\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-medium text-green-700\">Carteira carregada com sucesso!</h3>\n              <p className=\"text-sm text-muted-foreground\">{uploadedFile.name}</p>\n              <Button\n                onClick={reset}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"mt-3\"\n              >\n                Carregar nova carteira\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {uploadStatus === 'error' && (\n          <div className=\"space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-destructive/10 rounded-full flex items-center justify-center\">\n              <AlertCircle className=\"h-8 w-8 text-destructive\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-medium text-destructive\">Erro no upload</h3>\n              <p className=\"text-sm text-muted-foreground\">{errorMessage}</p>\n              <Button\n                onClick={reset}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"mt-3\"\n              >\n                Tentar novamente\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {fileRejections.length > 0 && (\n          <div className=\"absolute top-2 right-2\">\n            <div className=\"bg-destructive/10 text-destructive text-xs px-2 py-1 rounded\">\n              Arquivo inválido\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {fileRejections.length > 0 && (\n        <div className=\"mt-2 text-sm text-destructive\">\n          {fileRejections[0].errors[0].message}\n        </div>\n      )}\n    </div>\n  )\n}","size_bytes":6397},"src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":789},"src/hooks/admin/use-admin-recommended-portfolio.ts":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { toast } from \"sonner\";\nimport { FiiSector } from \"@prisma/client\";\n\nexport type RecommendedPortfolio = {\n  id: string;\n  fiiCode: string;\n  fiiName: string;\n  sector: FiiSector;\n  percentage: number;\n  reasoning?: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport type CreatePortfolioData = {\n  fiiCode: string;\n  fiiName: string;\n  sector: FiiSector;\n  percentage: number;\n  reasoning?: string;\n  isActive?: boolean;\n};\n\nexport type UpdatePortfolioData = Partial<CreatePortfolioData>;\n\nexport function useAdminRecommendedPortfolio(\n  page: number = 1,\n  pageSize: number = 50,\n  search: string = \"\",\n  sector?: string,\n  isActive?: string\n) {\n  const [data, setData] = useState<{\n    portfolios: RecommendedPortfolio[];\n    pagination: {\n      page: number;\n      pageSize: number;\n      total: number;\n      pages: number;\n    };\n    totalPercentage: number;\n  } | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        pageSize: pageSize.toString(),\n        ...(search && { search }),\n        ...(sector && { sector }),\n        ...(isActive && { isActive }),\n      });\n\n      const response = await fetch(`/api/admin/recommended-portfolio?${params}`);\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      setData(result);\n    } catch (err) {\n      console.error(\"Failed to fetch recommended portfolio:\", err);\n      setError(err instanceof Error ? err.message : \"Unknown error\");\n      toast.error(\"Falha ao carregar carteira recomendada\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [page, pageSize, search, sector, isActive]);\n\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchData,\n  };\n}\n\nexport function useCreateRecommendedPortfolio() {\n  const [loading, setLoading] = useState(false);\n\n  const createPortfolio = async (data: CreatePortfolioData): Promise<boolean> => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/admin/recommended-portfolio', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `Error: ${response.status} ${response.statusText}`);\n      }\n\n      toast.success(\"FII adicionado à carteira recomendada com sucesso!\");\n      return true;\n    } catch (err) {\n      console.error(\"Failed to create portfolio entry:\", err);\n      const message = err instanceof Error ? err.message : \"Erro desconhecido\";\n      toast.error(`Falha ao adicionar FII: ${message}`);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    createPortfolio,\n    loading,\n  };\n}\n\nexport function useUpdateRecommendedPortfolio() {\n  const [loading, setLoading] = useState(false);\n\n  const updatePortfolio = async (id: string, data: UpdatePortfolioData): Promise<boolean> => {\n    setLoading(true);\n    try {\n      const response = await fetch(`/api/admin/recommended-portfolio/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `Error: ${response.status} ${response.statusText}`);\n      }\n\n      toast.success(\"FII atualizado com sucesso!\");\n      return true;\n    } catch (err) {\n      console.error(\"Failed to update portfolio entry:\", err);\n      const message = err instanceof Error ? err.message : \"Erro desconhecido\";\n      toast.error(`Falha ao atualizar FII: ${message}`);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    updatePortfolio,\n    loading,\n  };\n}\n\nexport function useDeleteRecommendedPortfolio() {\n  const [loading, setLoading] = useState(false);\n\n  const deletePortfolio = async (id: string): Promise<boolean> => {\n    setLoading(true);\n    try {\n      const response = await fetch(`/api/admin/recommended-portfolio/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `Error: ${response.status} ${response.statusText}`);\n      }\n\n      toast.success(\"FII removido da carteira recomendada com sucesso!\");\n      return true;\n    } catch (err) {\n      console.error(\"Failed to delete portfolio entry:\", err);\n      const message = err instanceof Error ? err.message : \"Erro desconhecido\";\n      toast.error(`Falha ao remover FII: ${message}`);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    deletePortfolio,\n    loading,\n  };\n}","size_bytes":5192},"src/hooks/use-portfolio-upload.ts":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport { toast } from \"sonner\";\n\nexport interface PortfolioPosition {\n  fiiCode: string;\n  fiiName?: string;\n  quantity: number;\n  avgPrice: number;\n  currentPrice?: number;\n  currentValue: number;\n  sector?: string;\n  percentage?: number;\n}\n\nexport interface UploadResult {\n  id: string;\n  totalValue: number;\n  positionsCount: number;\n  skippedRows: number;\n  positions: PortfolioPosition[];\n}\n\nexport interface UploadResponse {\n  success: boolean;\n  portfolio?: UploadResult;\n  message?: string;\n  error?: string;\n  details?: string;\n  foundHeaders?: string[];\n  requiredColumns?: string[];\n}\n\nexport function usePortfolioUpload() {\n  const [uploading, setUploading] = useState(false);\n  const [uploadResult, setUploadResult] = useState<UploadResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const uploadPortfolio = async (file: File): Promise<UploadResult | null> => {\n    if (!file) {\n      throw new Error(\"Nenhum arquivo selecionado\");\n    }\n\n    setUploading(true);\n    setError(null);\n    setUploadResult(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await fetch('/api/portfolio/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      const data: UploadResponse = await response.json();\n\n      if (!response.ok) {\n        // Handle specific error types\n        if (data.foundHeaders && data.requiredColumns) {\n          const errorMsg = `${data.error}\\n\\nColunas encontradas: ${data.foundHeaders.join(', ')}\\nColunas obrigatórias: ${data.requiredColumns.join(', ')}`;\n          throw new Error(errorMsg);\n        }\n        throw new Error(data.error || `Erro HTTP ${response.status}`);\n      }\n\n      if (!data.success || !data.portfolio) {\n        throw new Error(data.error || \"Erro desconhecido no upload\");\n      }\n\n      setUploadResult(data.portfolio);\n      \n      // Show success message with details\n      const message = data.message || `Portfolio carregado: ${data.portfolio.positionsCount} posições, valor total R$ ${data.portfolio.totalValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`;\n      toast.success(message);\n\n      return data.portfolio;\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Erro desconhecido durante o upload';\n      setError(errorMessage);\n      toast.error(`Erro no upload: ${errorMessage}`);\n      throw err;\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const clearResult = () => {\n    setUploadResult(null);\n    setError(null);\n  };\n\n  return {\n    uploading,\n    uploadResult,\n    error,\n    uploadPortfolio,\n    clearResult,\n  };\n}","size_bytes":2721},"src/app/api/portfolio/analysis/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { db } from '@/lib/db';\nimport { analyzeFIIPortfolio, type PortfolioData, type FIIAnalysisResult } from '@/lib/openai';\nimport { NotificationService } from '@/lib/notification-service';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { portfolioId } = await request.json();\n\n    if (!portfolioId) {\n      return NextResponse.json({ error: 'Portfolio ID is required' }, { status: 400 });\n    }\n\n    // Find the internal user by Clerk ID\n    const internalUser = await db.user.findUnique({\n      where: { clerkId: userId }\n    });\n\n    if (!internalUser) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // Get the portfolio\n    const portfolio = await db.userPortfolio.findUnique({\n      where: { id: portfolioId }\n    });\n\n    if (!portfolio || portfolio.userId !== internalUser.id) {\n      return NextResponse.json({ error: 'Portfolio not found' }, { status: 404 });\n    }\n\n    // Extract positions from JSON field\n    const positions = Array.isArray(portfolio.positions) ? portfolio.positions : [];\n    \n    if (positions.length === 0) {\n      return NextResponse.json({ \n        error: 'No positions found in portfolio' \n      }, { status: 400 });\n    }\n\n    // Calculate total value and percentages\n    const totalValue = portfolio.totalValue;\n    \n    const portfolioData: PortfolioData = {\n      positions: positions.map((pos: any) => ({\n        fiiCode: pos.fiiCode,\n        quantity: pos.quantity,\n        avgPrice: pos.avgPrice,\n        currentValue: pos.currentValue,\n        percentage: (pos.currentValue / totalValue) * 100\n      })),\n      totalValue\n    };\n\n    // Analyze portfolio using OpenAI\n    const analysis: FIIAnalysisResult = await analyzeFIIPortfolio(portfolioData);\n\n    // Save analysis to database\n    const analysisReport = await db.analysisReport.create({\n      data: {\n        userId: internalUser.id,\n        userPortfolioId: portfolioId,\n        analysisType: 'PORTFOLIO_EVALUATION',\n        summary: analysis.summary,\n        currentAllocation: {\n          distribution: analysis.sectorAnalysis.distribution,\n          sectorRecommendations: analysis.sectorAnalysis.recommendations\n        },\n        riskAssessment: {\n          overallScore: analysis.overallScore,\n          riskLevel: analysis.riskLevel,\n          diversificationScore: analysis.diversificationScore,\n          concentrationRisk: analysis.concentrationRisk\n        },\n        performanceMetrics: analysis.performanceAnalysis,\n        recommendations: analysis.recommendations,\n        creditsUsed: 15\n      }\n    });\n\n    // Create notification for completed analysis\n    try {\n      await NotificationService.notifyAnalysisComplete(\n        internalUser.id,\n        'PORTFOLIO_EVALUATION',\n        portfolio.originalFileName\n      );\n    } catch (notificationError) {\n      console.error('Failed to create notification:', notificationError);\n      // Continue without failing the main request\n    }\n\n    return NextResponse.json({\n      success: true,\n      analysis,\n      reportId: analysisReport.id\n    });\n\n  } catch (error) {\n    console.error('Error analyzing portfolio:', error);\n    return NextResponse.json(\n      { error: 'Failed to analyze portfolio' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const portfolioId = searchParams.get('portfolioId');\n\n    if (!portfolioId) {\n      return NextResponse.json({ error: 'Portfolio ID is required' }, { status: 400 });\n    }\n\n    // Find the internal user by Clerk ID\n    const internalUser = await db.user.findUnique({\n      where: { clerkId: userId }\n    });\n\n    if (!internalUser) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // Verify portfolio ownership\n    const portfolio = await db.userPortfolio.findUnique({\n      where: { id: portfolioId }\n    });\n\n    if (!portfolio || portfolio.userId !== internalUser.id) {\n      return NextResponse.json({ error: 'Portfolio not found' }, { status: 404 });\n    }\n\n    // Get latest analysis report\n    const latestReport = await db.analysisReport.findFirst({\n      where: { userPortfolioId: portfolioId },\n      orderBy: { generatedAt: 'desc' }\n    });\n\n    if (!latestReport) {\n      return NextResponse.json({ \n        error: 'No analysis found for this portfolio' \n      }, { status: 404 });\n    }\n\n    // Reconstruct analysis from stored data\n    const currentAllocation = latestReport.currentAllocation as any;\n    const analysis: FIIAnalysisResult = {\n      overallScore: (latestReport.riskAssessment as any).overallScore,\n      riskLevel: (latestReport.riskAssessment as any).riskLevel,\n      diversificationScore: (latestReport.riskAssessment as any).diversificationScore,\n      concentrationRisk: (latestReport.riskAssessment as any).concentrationRisk,\n      sectorAnalysis: {\n        distribution: currentAllocation.distribution || currentAllocation,\n        recommendations: currentAllocation.sectorRecommendations || []\n      },\n      performanceAnalysis: latestReport.performanceMetrics as any,\n      recommendations: latestReport.recommendations as string[],\n      summary: latestReport.summary\n    };\n\n    return NextResponse.json({\n      success: true,\n      analysis,\n      reportId: latestReport.id,\n      createdAt: latestReport.generatedAt\n    });\n\n  } catch (error) {\n    console.error('Error fetching analysis:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch analysis' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":5962},"src/lib/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// Using the javascript_openai blueprint integration\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface FIIAnalysisResult {\n  overallScore: number;\n  riskLevel: 'BAIXO' | 'MODERADO' | 'ALTO';\n  diversificationScore: number;\n  concentrationRisk: number;\n  sectorAnalysis: {\n    distribution: Record<string, number>;\n    recommendations: string[];\n  };\n  performanceAnalysis: {\n    totalValue: number;\n    strongPositions: string[];\n    weakPositions: string[];\n  };\n  recommendations: string[];\n  summary: string;\n}\n\nexport interface PortfolioData {\n  positions: {\n    fiiCode: string;\n    quantity: number;\n    avgPrice: number;\n    currentValue: number;\n    percentage: number;\n  }[];\n  totalValue: number;\n}\n\nexport async function analyzeFIIPortfolio(portfolioData: PortfolioData): Promise<FIIAnalysisResult> {\n  try {\n    const prompt = `\nVocê é um especialista em análise de Fundos de Investimento Imobiliário (FII) brasileiro. \nAnalise a carteira abaixo e forneça uma avaliação completa.\n\nDADOS DA CARTEIRA:\n${JSON.stringify(portfolioData, null, 2)}\n\nAnalise considerando:\n\n1. DIVERSIFICAÇÃO:\n- Número de FIIs na carteira\n- Distribuição percentual entre os ativos\n- Concentração em poucos ativos\n\n2. TIPOS DE FII:\n- FIIs de tijolo (imóveis físicos)\n- FIIs de papel (CRI, LCI, etc.)\n- FIIs de fundos (FOF)\n- FIIs híbridos\n\n3. SETORES:\n- Logístico\n- Corporativo\n- Shopping Centers\n- Residencial\n- Hospitalar/Educacional\n- Outros\n\n4. ANÁLISE DE RISCO:\n- Concentração por ativo\n- Diversificação setorial\n- Qualidade dos gestores\n\nResponda APENAS em formato JSON com a seguinte estrutura:\n{\n  \"overallScore\": [nota de 0 a 100],\n  \"riskLevel\": \"BAIXO\" | \"MODERADO\" | \"ALTO\",\n  \"diversificationScore\": [nota de 0 a 100],\n  \"concentrationRisk\": [percentual do maior ativo],\n  \"sectorAnalysis\": {\n    \"distribution\": {\n      \"Logístico\": [percentual],\n      \"Corporativo\": [percentual],\n      \"Shopping\": [percentual],\n      \"Residencial\": [percentual],\n      \"Papel\": [percentual],\n      \"Outros\": [percentual]\n    },\n    \"recommendations\": [\"recomendação 1\", \"recomendação 2\"]\n  },\n  \"performanceAnalysis\": {\n    \"totalValue\": [valor total da carteira],\n    \"strongPositions\": [\"FII1\", \"FII2\"],\n    \"weakPositions\": [\"FII3\", \"FII4\"]\n  },\n  \"recommendations\": [\n    \"Recomendação específica 1\",\n    \"Recomendação específica 2\", \n    \"Recomendação específica 3\"\n  ],\n  \"summary\": \"Resumo executivo da análise em 2-3 frases\"\n}\n`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"Você é um especialista em análise de Fundos de Investimento Imobiliário (FII) brasileiro. Responda sempre em formato JSON válido.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" }\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return result as FIIAnalysisResult;\n  } catch (error) {\n    console.error('Erro na análise FII:', error);\n    throw new Error(`Falha na análise da carteira: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);\n  }\n}\n\nexport async function generateInvestmentRecommendations(\n  portfolioData: PortfolioData,\n  userProfile: {\n    investmentGoal: 'RENDA' | 'CRESCIMENTO' | 'BALANCEADO';\n    riskTolerance: 'CONSERVADOR' | 'MODERADO' | 'ARROJADO';\n    monthlyInvestment: number;\n    preferences?: string;\n  }\n): Promise<{\n  recommendations: Array<{\n    fiiCode: string;\n    suggestedAmount: number;\n    reason: string;\n    priority: 'ALTA' | 'MÉDIA' | 'BAIXA';\n  }>;\n  strategy: string;\n  expectedYield: number;\n}> {\n  try {\n    const prompt = `\nVocê é um consultor especialista em FII brasileiro. Com base na carteira atual e perfil do investidor, \nsugira os próximos aportes.\n\nCARTEIRA ATUAL:\n${JSON.stringify(portfolioData, null, 2)}\n\nPERFIL DO INVESTIDOR:\n- Objetivo: ${userProfile.investmentGoal}\n- Tolerância ao risco: ${userProfile.riskTolerance}\n- Aporte mensal: R$ ${userProfile.monthlyInvestment.toFixed(2)}\n${userProfile.preferences ? `- Preferências específicas: ${userProfile.preferences}` : ''}\n\nConsidere:\n1. Diversificação setorial\n2. Rebalanceamento da carteira\n3. Potencial de crescimento\n4. Yield histórico\n5. Qualidade da gestão\n${userProfile.preferences ? '6. As preferências específicas do investidor mencionadas acima' : ''}\n\nResponda APENAS em formato JSON:\n{\n  \"recommendations\": [\n    {\n      \"fiiCode\": \"CODIGO11\",\n      \"suggestedAmount\": [valor em R$],\n      \"reason\": \"Motivo da recomendação\",\n      \"priority\": \"ALTA\" | \"MÉDIA\" | \"BAIXA\"\n    }\n  ],\n  \"strategy\": \"Estratégia geral para os próximos aportes\",\n  \"expectedYield\": [yield esperado em %]\n}\n`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"Você é um consultor especialista em FII brasileiro. Responda sempre em formato JSON válido.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" }\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return result;\n  } catch (error) {\n    console.error('Erro na geração de recomendações:', error);\n    throw new Error(`Falha na geração de recomendações: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);\n  }\n}","size_bytes":5706},"src/components/fii/portfolio-analysis-section.tsx":{"content":"'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Separator } from '@/components/ui/separator';\nimport { usePortfolioAnalysis, type FIIAnalysisResult } from '@/hooks/use-portfolio-analysis';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\nimport { TrendingUp, AlertTriangle, CheckCircle, Brain, Target, PieChart as PieChartIcon } from 'lucide-react';\nimport { formatCurrency } from '@/lib/utils';\n\ninterface PortfolioAnalysisSectionProps {\n  portfolioId: string;\n  portfolioName?: string;\n}\n\nconst COLORS = ['#D4AF37', '#B8860B', '#DAA520', '#FFD700', '#F4E87C', '#FFF8DC'];\n\nconst getRiskColor = (riskLevel: string) => {\n  switch (riskLevel) {\n    case 'BAIXO': return 'bg-green-100 text-green-800';\n    case 'MODERADO': return 'bg-yellow-100 text-yellow-800';\n    case 'ALTO': return 'bg-red-100 text-red-800';\n    default: return 'bg-gray-100 text-gray-800';\n  }\n};\n\nconst getScoreColor = (score: number) => {\n  if (score >= 80) return 'text-green-600';\n  if (score >= 60) return 'text-yellow-600';\n  return 'text-red-600';\n};\n\nexport function PortfolioAnalysisSection({ portfolioId, portfolioName }: PortfolioAnalysisSectionProps) {\n  const {\n    analysis,\n    isAnalyzing,\n    isLoadingAnalysis,\n    analysisError,\n    analyzePortfolio,\n    hasAnalysis,\n    canAnalyze,\n    createdAt\n  } = usePortfolioAnalysis(portfolioId);\n\n  const handleAnalyze = () => {\n    analyzePortfolio(portfolioId);\n  };\n\n  if (isLoadingAnalysis) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5 text-primary\" />\n            Análise Inteligente\n          </CardTitle>\n          <CardDescription>\n            Carregando análise da carteira...\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (analysisError && !hasAnalysis) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5 text-primary\" />\n            Análise Inteligente\n          </CardTitle>\n          <CardDescription>\n            Análise avançada da sua carteira de FIIs\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <AlertTriangle className=\"h-12 w-12 text-yellow-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Análise não encontrada</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Nenhuma análise foi encontrada para esta carteira.\n            </p>\n            <Button \n              onClick={handleAnalyze}\n              disabled={!canAnalyze}\n              className=\"bg-primary hover:bg-primary/90\"\n            >\n              {isAnalyzing ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                  Analisando...\n                </>\n              ) : (\n                <>\n                  <Brain className=\"h-4 w-4 mr-2\" />\n                  Analisar Carteira\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!analysis) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5 text-primary\" />\n            Análise Inteligente\n          </CardTitle>\n          <CardDescription>\n            Use nossa IA para analisar sua carteira de FIIs\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <Brain className=\"h-12 w-12 text-primary/60 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Análise Inteligente</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Nossa IA analisará diversificação, riscos, setores e dará recomendações personalizadas.\n            </p>\n            <Button \n              onClick={handleAnalyze}\n              disabled={!canAnalyze}\n              className=\"bg-primary hover:bg-primary/90\"\n            >\n              {isAnalyzing ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                  Analisando...\n                </>\n              ) : (\n                <>\n                  <Brain className=\"h-4 w-4 mr-2\" />\n                  Analisar Carteira\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Prepare sector data for charts\n  const sectorData = Object.entries(analysis.sectorAnalysis.distribution).map(([sector, percentage]) => ({\n    sector,\n    percentage: Number(percentage.toFixed(1))\n  }));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"h-5 w-5 text-primary\" />\n                Análise Inteligente\n              </CardTitle>\n              <CardDescription>\n                {portfolioName && `${portfolioName} • `}\n                {createdAt && `Análise de ${new Date(createdAt).toLocaleDateString('pt-BR')}`}\n              </CardDescription>\n            </div>\n            <Button \n              variant=\"outline\" \n              onClick={handleAnalyze}\n              disabled={!canAnalyze}\n              size=\"sm\"\n            >\n              {isAnalyzing ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary mr-2\" />\n                  Analisando...\n                </>\n              ) : (\n                'Nova Análise'\n              )}\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {/* Overall Score */}\n            <div className=\"text-center\">\n              <div className={`text-3xl font-bold ${getScoreColor(analysis.overallScore)}`}>\n                {analysis.overallScore}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Nota Geral</div>\n              <Progress value={analysis.overallScore} className=\"mt-2\" />\n            </div>\n\n            {/* Risk Level */}\n            <div className=\"text-center\">\n              <Badge className={getRiskColor(analysis.riskLevel)}>\n                {analysis.riskLevel}\n              </Badge>\n              <div className=\"text-sm text-muted-foreground mt-2\">Nível de Risco</div>\n            </div>\n\n            {/* Diversification */}\n            <div className=\"text-center\">\n              <div className={`text-2xl font-bold ${getScoreColor(analysis.diversificationScore)}`}>\n                {analysis.diversificationScore}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Diversificação</div>\n              <Progress value={analysis.diversificationScore} className=\"mt-2\" />\n            </div>\n\n            {/* Concentration Risk */}\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {analysis.concentrationRisk}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Concentração</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-5 w-5 text-green-600\" />\n            Resumo Executivo\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground leading-relaxed\">\n            {analysis.summary}\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Sector Analysis */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <PieChartIcon className=\"h-5 w-5 text-primary\" />\n              Distribuição por Setor\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={sectorData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ sector, percentage }) => `${sector}: ${percentage}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"percentage\"\n                >\n                  {sectorData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5 text-green-600\" />\n              Performance\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium\">Valor Total</span>\n                <span className=\"text-lg font-bold text-primary\">\n                  {formatCurrency(analysis.performanceAnalysis.totalValue)}\n                </span>\n              </div>\n            </div>\n\n            <Separator />\n\n            {analysis.performanceAnalysis.strongPositions?.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-medium text-green-600 mb-2\">Posições Fortes</h4>\n                <div className=\"flex flex-wrap gap-1\">\n                  {analysis.performanceAnalysis.strongPositions.map((fii) => (\n                    <Badge key={fii} variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                      {fii}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {analysis.performanceAnalysis.weakPositions?.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-medium text-orange-600 mb-2\">Posições a Melhorar</h4>\n                <div className=\"flex flex-wrap gap-1\">\n                  {analysis.performanceAnalysis.weakPositions.map((fii) => (\n                    <Badge key={fii} variant=\"secondary\" className=\"bg-orange-100 text-orange-800\">\n                      {fii}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recommendations */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"h-5 w-5 text-primary\" />\n            Recomendações\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {analysis.recommendations.map((recommendation, index) => (\n              <div key={index} className=\"flex items-start gap-3 p-3 bg-muted/50 rounded-lg\">\n                <div className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-medium flex-shrink-0\">\n                  {index + 1}\n                </div>\n                <p className=\"text-sm leading-relaxed\">{recommendation}</p>\n              </div>\n            ))}\n          </div>\n\n          {analysis.sectorAnalysis.recommendations?.length > 0 && (\n            <>\n              <Separator className=\"my-4\" />\n              <div>\n                <h4 className=\"text-sm font-medium mb-3\">Recomendações Setoriais</h4>\n                <div className=\"space-y-2\">\n                  {analysis.sectorAnalysis.recommendations.map((rec, index) => (\n                    <div key={index} className=\"flex items-start gap-2 text-sm text-muted-foreground\">\n                      <span className=\"text-primary\">•</span>\n                      <span>{rec}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13007},"src/hooks/use-portfolio-analysis.ts":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\n\nexport interface FIIAnalysisResult {\n  overallScore: number;\n  riskLevel: 'BAIXO' | 'MODERADO' | 'ALTO';\n  diversificationScore: number;\n  concentrationRisk: number;\n  sectorAnalysis: {\n    distribution: Record<string, number>;\n    recommendations: string[];\n  };\n  performanceAnalysis: {\n    totalValue: number;\n    strongPositions: string[];\n    weakPositions: string[];\n  };\n  recommendations: string[];\n  summary: string;\n}\n\ninterface AnalysisResponse {\n  success: boolean;\n  analysis: FIIAnalysisResult;\n  reportId: string;\n  createdAt?: string;\n}\n\nexport function usePortfolioAnalysis(portfolioId?: string) {\n  const queryClient = useQueryClient();\n\n  // Mutation to create new analysis\n  const analyzePortfolioMutation = useMutation({\n    mutationFn: async (portfolioId: string): Promise<AnalysisResponse> => {\n      const response = await fetch('/api/portfolio/analysis', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ portfolioId }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to analyze portfolio');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast.success('Análise da carteira concluída com sucesso!');\n      queryClient.invalidateQueries({ queryKey: ['portfolio-analysis'] });\n    },\n    onError: (error) => {\n      console.error('Analysis error:', error);\n      toast.error(`Erro na análise: ${error.message}`);\n    },\n  });\n\n  // Query to get existing analysis\n  const analysisQuery = useQuery({\n    queryKey: ['portfolio-analysis', portfolioId],\n    queryFn: async (): Promise<AnalysisResponse> => {\n      if (!portfolioId) throw new Error('Portfolio ID required');\n      \n      const response = await fetch(`/api/portfolio/analysis?portfolioId=${portfolioId}`);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch analysis');\n      }\n\n      return response.json();\n    },\n    enabled: !!portfolioId,\n    retry: false,\n  });\n\n  return {\n    // Analysis data\n    analysis: analysisQuery.data?.analysis,\n    reportId: analysisQuery.data?.reportId,\n    createdAt: analysisQuery.data?.createdAt,\n    \n    // Loading states\n    isAnalyzing: analyzePortfolioMutation.isPending,\n    isLoadingAnalysis: analysisQuery.isPending,\n    \n    // Error states\n    analysisError: analysisQuery.error?.message,\n    \n    // Actions\n    analyzePortfolio: (portfolioId: string) => analyzePortfolioMutation.mutate(portfolioId),\n    \n    // Computed states\n    hasAnalysis: !!analysisQuery.data?.analysis,\n    canAnalyze: !analyzePortfolioMutation.isPending,\n  };\n}\n\nexport function usePortfolioAnalysisList(userId?: string) {\n  return useQuery({\n    queryKey: ['portfolio-analyses', userId],\n    queryFn: async () => {\n      const response = await fetch('/api/portfolio/analysis/list');\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch analysis list');\n      }\n\n      return response.json();\n    },\n    enabled: !!userId,\n  });\n}","size_bytes":3299},"src/app/(protected)/dashboard/avaliar-carteira/page.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { useSetPageMetadata } from \"@/contexts/page-metadata\";\nimport { PortfolioUploadSection } from \"@/components/fii/portfolio-upload-section\";\nimport { PortfolioAnalysisSection } from \"@/components/fii/portfolio-analysis-section\";\nimport { usePortfolioUpload } from \"@/hooks/use-portfolio-upload\";\nimport { TrendingUp, Brain, Target } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function AvaliarCarteiraPage() {\n  const { uploadResult } = usePortfolioUpload();\n\n  useSetPageMetadata({\n    title: \"Avaliador de Carteiras FII\",\n    description: \"Analise sua carteira de FIIs com inteligência artificial\",\n    breadcrumbs: [\n      { label: \"Dashboard\", href: \"/dashboard\" },\n      { label: \"Avaliador de Carteiras\" }\n    ]\n  });\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <Card className=\"border-primary/20\">\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-primary/10\">\n              <TrendingUp className=\"h-6 w-6 text-primary\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl\">Avaliador de Carteiras FII</CardTitle>\n              <CardDescription className=\"text-base\">\n                Faça upload da sua carteira e receba uma análise completa com sugestões de otimização\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            <div className=\"flex items-center gap-3 p-4 rounded-lg bg-background border\">\n              <Brain className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"font-medium\">Análise com IA</p>\n                <p className=\"text-sm text-muted-foreground\">OpenAI GPT-5</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3 p-4 rounded-lg bg-background border\">\n              <Target className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"font-medium\">Diversificação</p>\n                <p className=\"text-sm text-muted-foreground\">Por setores</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3 p-4 rounded-lg bg-background border\">\n              <TrendingUp className=\"h-5 w-5 text-purple-600\" />\n              <div>\n                <p className=\"font-medium\">Recomendações</p>\n                <p className=\"text-sm text-muted-foreground\">Personalizadas</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Upload Section */}\n      <PortfolioUploadSection />\n\n      {/* Analysis Section - Only show if there's an uploaded portfolio */}\n      {uploadResult && (\n        <PortfolioAnalysisSection \n          portfolioId={uploadResult.portfolioId} \n          portfolioName={uploadResult.name}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":3059},"src/app/(protected)/dashboard/direcionar-aportes/page.tsx":{"content":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { useSetPageMetadata } from \"@/contexts/page-metadata\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useInvestmentRecommendations } from \"@/hooks/use-investment-recommendations\";\nimport { Target, DollarSign, TrendingUp, PieChart, Calculator, Brain, AlertCircle } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nexport default function DirecionarAportesPage() {\n  const [aporteValue, setAporteValue] = useState(\"\");\n  const [preferences, setPreferences] = useState(\"\");\n  const [riskTolerance, setRiskTolerance] = useState<'CONSERVADOR' | 'MODERADO' | 'ARROJADO'>('MODERADO');\n  const [investmentGoal, setInvestmentGoal] = useState<'RENDA' | 'CRESCIMENTO' | 'BALANCEADO'>('BALANCEADO');\n  const [analysis, setAnalysis] = useState<any>(null);\n  \n  const investmentMutation = useInvestmentRecommendations();\n\n  useSetPageMetadata({\n    title: \"Direcionador de Aportes FII\",\n    description: \"Receba recomendações inteligentes para seus próximos aportes\",\n    breadcrumbs: [\n      { label: \"Dashboard\", href: \"/dashboard\" },\n      { label: \"Direcionador de Aportes\" }\n    ]\n  });\n\n  const handleAnalyze = async () => {\n    if (!aporteValue) {\n      toast.error('Digite o valor do aporte');\n      return;\n    }\n    \n    const investmentAmount = parseFloat(aporteValue.replace(/[^\\d,]/g, '').replace(',', '.'));\n    \n    if (investmentAmount <= 0) {\n      toast.error('O valor do aporte deve ser maior que zero');\n      return;\n    }\n    \n    try {\n      const result = await investmentMutation.mutateAsync({\n        investmentAmount,\n        preferences,\n        riskTolerance,\n        investmentGoal\n      });\n      \n      setAnalysis({\n        totalAporte: result.investmentAmount,\n        recommendations: result.recommendations.map(rec => ({\n          codigo: rec.fiiCode,\n          nome: rec.fiiCode, // We'll improve this with a FII name lookup\n          valor: rec.suggestedAmount,\n          percentual: (rec.suggestedAmount / result.investmentAmount) * 100,\n          setor: 'N/A', // Can be improved with sector mapping\n          justificativa: rec.reason,\n          priority: rec.priority\n        })),\n        reasoning: result.strategy,\n        expectedYield: result.expectedYield,\n        hasExistingPortfolio: result.hasExistingPortfolio\n      });\n      \n      toast.success('Recomendações geradas com sucesso!');\n    } catch (error) {\n      console.error('Error:', error);\n      toast.error(error instanceof Error ? error.message : 'Erro ao gerar recomendações');\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <Card className=\"border-primary/20\">\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-primary/10\">\n              <Target className=\"h-6 w-6 text-primary\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl\">Direcionador de Aportes FII</CardTitle>\n              <CardDescription className=\"text-base\">\n                Receba sugestões inteligentes de como distribuir seus novos aportes\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-4\">\n            <div className=\"flex items-center gap-3 p-4 rounded-lg bg-background border\">\n              <Calculator className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"font-medium\">Cálculo Automático</p>\n                <p className=\"text-sm text-muted-foreground\">Distribuição otimizada</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3 p-4 rounded-lg bg-background border\">\n              <PieChart className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"font-medium\">Diversificação</p>\n                <p className=\"text-sm text-muted-foreground\">Por setores</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3 p-4 rounded-lg bg-background border\">\n              <TrendingUp className=\"h-5 w-5 text-purple-600\" />\n              <div>\n                <p className=\"font-medium\">Yields e Liquidez</p>\n                <p className=\"text-sm text-muted-foreground\">Considerados</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3 p-4 rounded-lg bg-background border\">\n              <Brain className=\"h-5 w-5 text-orange-600\" />\n              <div>\n                <p className=\"font-medium\">IA OpenAI</p>\n                <p className=\"text-sm text-muted-foreground\">GPT-5</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Input Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"h-5 w-5 text-green-600\" />\n            Configurar Aporte\n          </CardTitle>\n          <CardDescription>\n            Informe o valor que deseja aportar e suas preferências\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"aporte-value\">Valor do Aporte</Label>\n              <Input\n                id=\"aporte-value\"\n                placeholder=\"R$ 1.000,00\"\n                value={aporteValue}\n                onChange={(e) => setAporteValue(e.target.value)}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"risk-tolerance\">Tolerância ao Risco</Label>\n              <Select value={riskTolerance} onValueChange={(value: any) => setRiskTolerance(value)}>\n                <SelectTrigger id=\"risk-tolerance\">\n                  <SelectValue placeholder=\"Selecione sua tolerância ao risco\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"CONSERVADOR\">Conservador</SelectItem>\n                  <SelectItem value=\"MODERADO\">Moderado</SelectItem>\n                  <SelectItem value=\"ARROJADO\">Arrojado</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"investment-goal\">Objetivo de Investimento</Label>\n            <Select value={investmentGoal} onValueChange={(value: any) => setInvestmentGoal(value)}>\n              <SelectTrigger id=\"investment-goal\">\n                <SelectValue placeholder=\"Selecione seu objetivo\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"RENDA\">Foco em Renda</SelectItem>\n                <SelectItem value=\"CRESCIMENTO\">Foco em Crescimento</SelectItem>\n                <SelectItem value=\"BALANCEADO\">Balanceado</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"preferences\">Preferências e Objetivos (Opcional)</Label>\n            <Textarea\n              id=\"preferences\"\n              placeholder=\"Ex: Prefiro FIIs de tijolo, busco dividend yield acima de 10%, evitar shopping centers...\"\n              value={preferences}\n              onChange={(e) => setPreferences(e.target.value)}\n              rows={4}\n            />\n          </div>\n\n          <Button \n            onClick={handleAnalyze} \n            disabled={!aporteValue || investmentMutation.isPending}\n            className=\"w-full md:w-auto\"\n          >\n            {investmentMutation.isPending ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                Analisando com IA...\n              </>\n            ) : (\n              <>\n                <Brain className=\"h-4 w-4 mr-2\" />\n                Gerar Recomendações\n              </>\n            )}\n          </Button>\n          \n          {investmentMutation.error && (\n            <div className=\"flex items-center gap-2 p-3 rounded-lg bg-red-50 text-red-700 border border-red-200\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <p className=\"text-sm\">{investmentMutation.error.message}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Analysis Results */}\n      {analysis && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5 text-primary\" />\n              Recomendações de Distribuição\n            </CardTitle>\n            <CardDescription>\n              Sugestões personalizadas para seu aporte de {formatCurrency(analysis.totalAporte)}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {/* Reasoning */}\n              <div className=\"p-4 rounded-lg bg-muted/50\">\n                <p className=\"text-sm font-medium mb-2\">Estratégia Recomendada:</p>\n                <p className=\"text-sm text-muted-foreground\">{analysis.reasoning}</p>\n              </div>\n\n              {/* Portfolio Status */}\n              {analysis.hasExistingPortfolio && (\n                <div className=\"p-4 rounded-lg bg-blue-50 border border-blue-200\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <PieChart className=\"h-4 w-4 text-blue-600\" />\n                    <p className=\"text-sm font-medium text-blue-900\">Carteira Atual Considerada</p>\n                  </div>\n                  <p className=\"text-sm text-blue-700\">\n                    Analisamos sua carteira atual para sugerir aportes que otimizem sua diversificação.\n                  </p>\n                </div>\n              )}\n              \n              {/* Expected Yield */}\n              {analysis.expectedYield && (\n                <div className=\"p-4 rounded-lg bg-green-50 border border-green-200\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                    <p className=\"text-sm font-medium text-green-900\">Yield Esperado</p>\n                  </div>\n                  <p className=\"text-lg font-semibold text-green-700\">{analysis.expectedYield.toFixed(2)}% ao ano</p>\n                </div>\n              )}\n\n              {/* Recommendations */}\n              <div className=\"space-y-4\">\n                {analysis.recommendations.map((rec: any, index: number) => (\n                  <div key={index} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <div>\n                          <h4 className=\"font-semibold\">{rec.codigo}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{rec.nome}</p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {rec.priority && (\n                            <Badge variant={rec.priority === 'ALTA' ? 'default' : rec.priority === 'MÉDIA' ? 'secondary' : 'outline'}>\n                              {rec.priority}\n                            </Badge>\n                          )}\n                          {rec.setor !== 'N/A' && <Badge variant=\"secondary\">{rec.setor}</Badge>}\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-lg\">{rec.percentual.toFixed(1)}%</p>\n                        <p className=\"text-sm text-muted-foreground\">{formatCurrency(rec.valor)}</p>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{rec.justificativa}</p>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" className=\"flex-1\">\n                  <PieChart className=\"h-4 w-4 mr-2\" />\n                  Ver Gráfico de Distribuição\n                </Button>\n                <Button className=\"flex-1\">\n                  <DollarSign className=\"h-4 w-4 mr-2\" />\n                  Simular Novo Aporte\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":13086},"src/hooks/use-admin.ts":{"content":"\"use client\";\n\nimport { useUser } from \"@clerk/nextjs\";\nimport { useMemo } from \"react\";\n\nconst ADMIN_EMAILS = process.env.NEXT_PUBLIC_ADMIN_EMAILS?.split(\",\") || [];\n\nexport function useAdmin() {\n  const { user, isLoaded } = useUser();\n\n  const isAdmin = useMemo(() => {\n    if (!isLoaded || !user) return false;\n    \n    const userEmail = user.emailAddresses[0]?.emailAddress;\n    if (!userEmail) return false;\n    \n    return ADMIN_EMAILS.includes(userEmail);\n  }, [isLoaded, user]);\n\n  return {\n    isAdmin,\n    isLoaded,\n  };\n}","size_bytes":532},"src/app/api/investment/recommendations/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { db } from '@/lib/db';\nimport { generateInvestmentRecommendations, type PortfolioData } from '@/lib/openai';\nimport { NotificationService } from '@/lib/notification-service';\n\ninterface InvestmentRequest {\n  investmentAmount: number;\n  preferences?: string;\n  riskTolerance?: 'CONSERVADOR' | 'MODERADO' | 'ARROJADO';\n  investmentGoal?: 'RENDA' | 'CRESCIMENTO' | 'BALANCEADO';\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Find the internal user by Clerk ID\n    const internalUser = await db.user.findUnique({\n      where: { clerkId: userId }\n    });\n\n    if (!internalUser) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    const { investmentAmount, preferences, riskTolerance, investmentGoal }: InvestmentRequest = await request.json();\n\n    if (!investmentAmount || investmentAmount <= 0) {\n      return NextResponse.json({ error: 'Investment amount is required and must be positive' }, { status: 400 });\n    }\n\n    // Get user's current portfolio (latest one)\n    const userPortfolio = await db.userPortfolio.findFirst({\n      where: { userId: internalUser.id },\n      orderBy: { uploadedAt: 'desc' }\n    });\n\n    let portfolioData: PortfolioData;\n\n    if (userPortfolio && userPortfolio.positions) {\n      // User has existing portfolio - use it for analysis\n      const positions = Array.isArray(userPortfolio.positions) ? userPortfolio.positions : [];\n      \n      portfolioData = {\n        positions: positions.map((pos: any) => ({\n          fiiCode: pos.fiiCode,\n          quantity: pos.quantity,\n          avgPrice: pos.avgPrice,\n          currentValue: pos.currentValue,\n          percentage: (pos.currentValue / userPortfolio.totalValue) * 100\n        })),\n        totalValue: userPortfolio.totalValue\n      };\n    } else {\n      // No existing portfolio - create empty one for new investor\n      portfolioData = {\n        positions: [],\n        totalValue: 0\n      };\n    }\n\n    // Create user profile from request data and preferences\n    const userProfile = {\n      investmentGoal: investmentGoal || 'BALANCEADO',\n      riskTolerance: riskTolerance || 'MODERADO', \n      monthlyInvestment: investmentAmount,\n      preferences: preferences || '' // Add preferences to profile\n    };\n\n    // Generate investment recommendations using OpenAI\n    const recommendations = await generateInvestmentRecommendations(portfolioData, userProfile);\n\n    // Save investment consultation to database for future reference\n    const consultation = await db.analysisReport.create({\n      data: {\n        userId: internalUser.id,\n        userPortfolioId: userPortfolio?.id || null,\n        analysisType: 'INVESTMENT_RECOMMENDATION',\n        summary: recommendations.strategy,\n        currentAllocation: {\n          investmentAmount,\n          preferences: preferences || '',\n          userProfile\n        },\n        riskAssessment: {\n          overallScore: 0, // Not applicable for investment recommendations\n          riskLevel: riskTolerance || 'MODERADO',\n          diversificationScore: 0,\n          concentrationRisk: 0\n        },\n        performanceMetrics: {\n          expectedYield: recommendations.expectedYield,\n          recommendations: recommendations.recommendations\n        },\n        recommendations: recommendations.recommendations.map(rec => `${rec.fiiCode}: ${rec.reason}`)\n      }\n    });\n\n    // Create notification for completed investment recommendation\n    try {\n      await NotificationService.notifyAnalysisComplete(\n        internalUser.id,\n        'INVESTMENT_RECOMMENDATION',\n        userPortfolio?.originalFileName\n      );\n    } catch (notificationError) {\n      console.error('Failed to create notification:', notificationError);\n      // Continue without failing the main request\n    }\n\n    return NextResponse.json({\n      success: true,\n      investmentAmount,\n      recommendations: recommendations.recommendations,\n      strategy: recommendations.strategy,\n      expectedYield: recommendations.expectedYield,\n      consultationId: consultation.id,\n      hasExistingPortfolio: !!userPortfolio\n    });\n\n  } catch (error) {\n    console.error('Error generating investment recommendations:', error);\n    return NextResponse.json(\n      { error: 'Failed to generate investment recommendations' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":4571},"src/hooks/use-investment-recommendations.ts":{"content":"import { useMutation } from '@tanstack/react-query';\n\ninterface InvestmentRequest {\n  investmentAmount: number;\n  preferences?: string;\n  riskTolerance?: 'CONSERVADOR' | 'MODERADO' | 'ARROJADO';\n  investmentGoal?: 'RENDA' | 'CRESCIMENTO' | 'BALANCEADO';\n}\n\ninterface InvestmentRecommendation {\n  fiiCode: string;\n  suggestedAmount: number;\n  reason: string;\n  priority: 'ALTA' | 'MÉDIA' | 'BAIXA';\n}\n\ninterface InvestmentResponse {\n  success: boolean;\n  investmentAmount: number;\n  recommendations: InvestmentRecommendation[];\n  strategy: string;\n  expectedYield: number;\n  consultationId: string;\n  hasExistingPortfolio: boolean;\n}\n\nexport function useInvestmentRecommendations() {\n  return useMutation({\n    mutationFn: async (data: InvestmentRequest): Promise<InvestmentResponse> => {\n      const response = await fetch('/api/investment/recommendations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to generate recommendations');\n      }\n\n      return response.json();\n    },\n  });\n}","size_bytes":1218},"src/app/api/dashboard/portfolio-summary/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { db } from '@/lib/db';\n\nconst SECTOR_COLORS = {\n  'Logístico': '#0088FE',\n  'Corporativo': '#00C49F', \n  'Shopping': '#FFBB28',\n  'Residencial': '#FF8042',\n  'Papel': '#8884D8',\n  'Fundos': '#82CA9D',\n  'Outros': '#FFC658'\n};\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Find the internal user by Clerk ID\n    const internalUser = await db.user.findUnique({\n      where: { clerkId: userId }\n    });\n\n    if (!internalUser) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // Get user's latest portfolio\n    const userPortfolio = await db.userPortfolio.findFirst({\n      where: { userId: internalUser.id },\n      orderBy: { uploadedAt: 'desc' }\n    });\n\n    if (!userPortfolio || !userPortfolio.positions) {\n      return NextResponse.json({\n        hasPortfolio: false,\n        totalValue: 0,\n        totalPositions: 0,\n        sectorDistribution: [],\n        topPositions: []\n      });\n    }\n\n    const positions = Array.isArray(userPortfolio.positions) ? userPortfolio.positions : [];\n    \n    // Calculate sector distribution\n    const sectorMap = new Map<string, number>();\n    \n    positions.forEach((pos: any) => {\n      const sector = pos.sector || 'Outros';\n      const currentValue = pos.currentValue || 0;\n      sectorMap.set(sector, (sectorMap.get(sector) || 0) + currentValue);\n    });\n\n    const sectorDistribution = Array.from(sectorMap.entries()).map(([sector, value]) => ({\n      sector,\n      value,\n      percentage: (value / userPortfolio.totalValue) * 100,\n      color: SECTOR_COLORS[sector as keyof typeof SECTOR_COLORS] || '#666666'\n    })).sort((a, b) => b.value - a.value);\n\n    // Get top positions\n    const topPositions = positions\n      .map((pos: any) => ({\n        fiiCode: pos.fiiCode,\n        fiiName: pos.fiiName || pos.fiiCode,\n        value: pos.currentValue || 0,\n        percentage: ((pos.currentValue || 0) / userPortfolio.totalValue) * 100,\n        trend: 'neutral' as const // Could be enhanced with price comparison\n      }))\n      .sort((a, b) => b.value - a.value);\n\n    // Get latest analysis if available\n    const latestAnalysis = await db.analysisReport.findFirst({\n      where: { \n        userId: internalUser.id,\n        analysisType: 'PORTFOLIO_EVALUATION'\n      },\n      orderBy: { generatedAt: 'desc' },\n      select: {\n        riskAssessment: true,\n        generatedAt: true\n      }\n    });\n\n    let recentAnalysis = null;\n    if (latestAnalysis && latestAnalysis.riskAssessment) {\n      const riskData = latestAnalysis.riskAssessment as any;\n      recentAnalysis = {\n        overallScore: riskData.overallScore || 0,\n        riskLevel: riskData.riskLevel || 'MODERADO',\n        createdAt: latestAnalysis.generatedAt.toISOString()\n      };\n    }\n\n    return NextResponse.json({\n      hasPortfolio: true,\n      totalValue: userPortfolio.totalValue,\n      totalPositions: positions.length,\n      lastUpdated: userPortfolio.uploadedAt.toISOString(),\n      sectorDistribution,\n      topPositions,\n      recentAnalysis\n    });\n\n  } catch (error) {\n    console.error('Error fetching portfolio summary:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch portfolio summary' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":3489},"src/app/api/dashboard/recent-analysis/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { db } from '@/lib/db';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Find the internal user by Clerk ID\n    const internalUser = await db.user.findUnique({\n      where: { clerkId: userId }\n    });\n\n    if (!internalUser) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // Get recent analysis reports\n    const analyses = await db.analysisReport.findMany({\n      where: { userId: internalUser.id },\n      orderBy: { generatedAt: 'desc' },\n      take: 5, // Get last 5 analyses\n      include: {\n        userPortfolio: {\n          select: {\n            originalFileName: true\n          }\n        }\n      }\n    });\n\n    if (analyses.length === 0) {\n      return NextResponse.json({\n        hasAnalysis: false,\n        analyses: []\n      });\n    }\n\n    const analysisData = analyses.map(analysis => {\n      let score = null;\n      let riskLevel = null;\n\n      // Extract score and risk level from riskAssessment JSON\n      if (analysis.riskAssessment) {\n        const riskData = analysis.riskAssessment as any;\n        score = riskData.overallScore;\n        riskLevel = riskData.riskLevel;\n      }\n\n      return {\n        id: analysis.id,\n        type: analysis.analysisType,\n        createdAt: analysis.generatedAt.toISOString(),\n        summary: analysis.summary || 'Análise realizada com sucesso',\n        score,\n        riskLevel,\n        portfolioName: analysis.userPortfolio?.originalFileName\n      };\n    });\n\n    return NextResponse.json({\n      hasAnalysis: true,\n      analyses: analysisData\n    });\n\n  } catch (error) {\n    console.error('Error fetching recent analysis:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch recent analysis' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":2016},"src/components/dashboard/portfolio-summary.tsx":{"content":"\"use client\";\n\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport { TrendingUp, TrendingDown, PieChart as PieIcon, BarChart3, Target, Upload } from \"lucide-react\";\nimport Link from \"next/link\";\n\ninterface PortfolioSummaryData {\n  hasPortfolio: boolean;\n  totalValue: number;\n  totalPositions: number;\n  lastUpdated?: string;\n  sectorDistribution: Array<{\n    sector: string;\n    value: number;\n    percentage: number;\n    color: string;\n  }>;\n  topPositions: Array<{\n    fiiCode: string;\n    fiiName: string;\n    value: number;\n    percentage: number;\n    trend: 'up' | 'down' | 'neutral';\n  }>;\n  recentAnalysis?: {\n    overallScore: number;\n    riskLevel: string;\n    createdAt: string;\n  };\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];\n\nconst formatCurrency = (value: number) => {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(value);\n};\n\nfunction usePortfolioSummary() {\n  return useQuery<PortfolioSummaryData>({\n    queryKey: ['portfolio-summary'],\n    queryFn: async () => {\n      const response = await fetch('/api/dashboard/portfolio-summary');\n      if (!response.ok) {\n        if (response.status === 404) {\n          return {\n            hasPortfolio: false,\n            totalValue: 0,\n            totalPositions: 0,\n            sectorDistribution: [],\n            topPositions: []\n          };\n        }\n        throw new Error('Failed to fetch portfolio summary');\n      }\n      return response.json();\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function PortfolioSummary() {\n  const { data, isLoading, error } = usePortfolioSummary();\n\n  if (isLoading) {\n    return (\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {Array.from({ length: 3 }).map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardHeader className=\"space-y-2\">\n              <div className=\"h-4 bg-muted rounded w-3/4\" />\n              <div className=\"h-3 bg-muted rounded w-1/2\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-20 bg-muted rounded\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (error || !data) {\n    return (\n      <Card className=\"md:col-span-2 lg:col-span-3\">\n        <CardContent className=\"flex items-center justify-center h-40\">\n          <p className=\"text-muted-foreground\">Erro ao carregar dados da carteira</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!data.hasPortfolio) {\n    return (\n      <Card className=\"md:col-span-2 lg:col-span-3\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Upload className=\"h-5 w-5\" />\n            Sua Carteira de FIIs\n          </CardTitle>\n          <CardDescription>\n            Para começar, faça upload da sua carteira e obtenha análises personalizadas\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <PieIcon className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground mb-4\">\n              Você ainda não possui uma carteira cadastrada\n            </p>\n            <Button asChild>\n              <Link href=\"/dashboard/avaliar-carteira\">\n                Carregar Carteira\n              </Link>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      {/* Portfolio Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <PieIcon className=\"h-5 w-5\" />\n            Resumo da Carteira\n          </CardTitle>\n          <CardDescription>\n            Visão geral dos seus investimentos\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <p className=\"text-2xl font-bold\">{formatCurrency(data.totalValue)}</p>\n              <p className=\"text-sm text-muted-foreground\">\n                {data.totalPositions} FIIs • Atualizado {new Date(data.lastUpdated || '').toLocaleDateString('pt-BR')}\n              </p>\n            </div>\n            \n            {data.recentAnalysis && (\n              <div className=\"border-t pt-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium\">Última Análise</p>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <span className=\"text-lg font-semibold\">{data.recentAnalysis.overallScore}/100</span>\n                      <Badge variant={\n                        data.recentAnalysis.riskLevel === 'BAIXO' ? 'default' :\n                        data.recentAnalysis.riskLevel === 'MODERADO' ? 'secondary' : 'destructive'\n                      }>\n                        {data.recentAnalysis.riskLevel}\n                      </Badge>\n                    </div>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" asChild>\n                    <Link href=\"/dashboard/avaliar-carteira\">\n                      Nova Análise\n                    </Link>\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Sector Distribution */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <PieIcon className=\"h-5 w-5\" />\n            Distribuição por Setores\n          </CardTitle>\n          <CardDescription>\n            Diversificação da sua carteira\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-40\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={data.sectorDistribution}\n                  dataKey=\"value\"\n                  nameKey=\"sector\"\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={60}\n                  fill=\"#8884d8\"\n                >\n                  {data.sectorDistribution.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip formatter={(value: any) => formatCurrency(value)} />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n          <div className=\"space-y-2 mt-4\">\n            {data.sectorDistribution.slice(0, 3).map((sector, index) => (\n              <div key={sector.sector} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div \n                    className=\"w-3 h-3 rounded-sm\" \n                    style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                  />\n                  <span className=\"text-sm\">{sector.sector}</span>\n                </div>\n                <span className=\"text-sm font-medium\">{sector.percentage.toFixed(1)}%</span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Top Positions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            Principais Posições\n          </CardTitle>\n          <CardDescription>\n            Seus maiores investimentos\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {data.topPositions.slice(0, 5).map((position) => (\n              <div key={position.fiiCode} className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">{position.fiiCode}</p>\n                  <p className=\"text-sm text-muted-foreground truncate\">\n                    {position.fiiName}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"flex items-center gap-1\">\n                    <span className=\"text-sm font-medium\">{position.percentage.toFixed(1)}%</span>\n                    {position.trend === 'up' && <TrendingUp className=\"h-3 w-3 text-green-500\" />}\n                    {position.trend === 'down' && <TrendingDown className=\"h-3 w-3 text-red-500\" />}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {formatCurrency(position.value)}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n          <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-4\" asChild>\n            <Link href=\"/dashboard/avaliar-carteira\">\n              Ver Carteira Completa\n            </Link>\n          </Button>\n        </CardContent>\n      </Card>\n    </>\n  );\n}","size_bytes":9243},"src/components/dashboard/quick-actions.tsx":{"content":"\"use client\";\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Target, TrendingUp, Upload, Brain, Zap, PieChart } from \"lucide-react\";\nimport Link from \"next/link\";\n\ninterface QuickAction {\n  title: string;\n  description: string;\n  href: string;\n  icon: React.ReactNode;\n  credits: number;\n  highlight?: boolean;\n  badge?: string;\n}\n\nconst QUICK_ACTIONS: QuickAction[] = [\n  {\n    title: \"Avaliar Carteira\",\n    description: \"Análise completa da sua carteira atual com IA\",\n    href: \"/dashboard/avaliar-carteira\",\n    icon: <TrendingUp className=\"h-5 w-5\" />,\n    credits: 15,\n    highlight: true,\n    badge: \"Popular\"\n  },\n  {\n    title: \"Direcionador de Aportes\", \n    description: \"Recomendações para seus próximos investimentos\",\n    href: \"/dashboard/direcionar-aportes\",\n    icon: <Target className=\"h-5 w-5\" />,\n    credits: 8,\n    badge: \"Novo\"\n  },\n  {\n    title: \"Carregar Nova Carteira\",\n    description: \"Faça upload de uma planilha atualizada\",\n    href: \"/dashboard/avaliar-carteira#upload\",\n    icon: <Upload className=\"h-5 w-5\" />,\n    credits: 0\n  }\n];\n\nexport function QuickActions() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Zap className=\"h-5 w-5\" />\n          Ações Rápidas\n        </CardTitle>\n        <CardDescription>\n          Acesse rapidamente os agentes de IA da FiiAI\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {QUICK_ACTIONS.map((action, index) => (\n            <div \n              key={index} \n              className={`p-4 rounded-lg border transition-colors hover:bg-muted/50 ${\n                action.highlight ? 'border-primary/20 bg-primary/5' : ''\n              }`}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start gap-3 flex-1\">\n                  <div className=\"p-2 rounded-lg bg-background border\">\n                    {action.icon}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <h4 className=\"font-medium\">{action.title}</h4>\n                      {action.badge && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {action.badge}\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      {action.description}\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-muted-foreground\">\n                        {action.credits > 0 ? `${action.credits} créditos` : 'Gratuito'}\n                      </span>\n                      <Button \n                        size=\"sm\" \n                        variant={action.highlight ? \"default\" : \"outline\"}\n                        asChild\n                      >\n                        <Link href={action.href}>\n                          {action.credits > 0 ? (\n                            <>\n                              <Brain className=\"h-3 w-3 mr-1\" />\n                              Usar IA\n                            </>\n                          ) : (\n                            'Acessar'\n                          )}\n                        </Link>\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3809},"src/components/dashboard/recent-analysis.tsx":{"content":"\"use client\";\n\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { BarChart3, Target, Calendar, TrendingUp, AlertCircle } from \"lucide-react\";\nimport Link from \"next/link\";\n\ninterface RecentAnalysisData {\n  hasAnalysis: boolean;\n  analyses: Array<{\n    id: string;\n    type: 'PORTFOLIO_EVALUATION' | 'INVESTMENT_RECOMMENDATION';\n    createdAt: string;\n    summary: string;\n    score?: number;\n    riskLevel?: string;\n    portfolioName?: string;\n  }>;\n}\n\nconst ANALYSIS_TYPES = {\n  PORTFOLIO_EVALUATION: {\n    label: 'Avaliação de Carteira',\n    icon: <BarChart3 className=\"h-4 w-4\" />,\n    color: 'bg-blue-100 text-blue-800'\n  },\n  INVESTMENT_RECOMMENDATION: {\n    label: 'Recomendação de Aportes',\n    icon: <Target className=\"h-4 w-4\" />,\n    color: 'bg-green-100 text-green-800'\n  }\n};\n\nconst RISK_COLORS = {\n  'BAIXO': 'bg-green-100 text-green-800',\n  'MODERADO': 'bg-yellow-100 text-yellow-800', \n  'ALTO': 'bg-red-100 text-red-800'\n};\n\nfunction useRecentAnalysis() {\n  return useQuery<RecentAnalysisData>({\n    queryKey: ['recent-analysis'],\n    queryFn: async () => {\n      const response = await fetch('/api/dashboard/recent-analysis');\n      if (!response.ok) {\n        if (response.status === 404) {\n          return {\n            hasAnalysis: false,\n            analyses: []\n          };\n        }\n        throw new Error('Failed to fetch recent analysis');\n      }\n      return response.json();\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function RecentAnalysis() {\n  const { data, isLoading, error } = useRecentAnalysis();\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader className=\"space-y-2\">\n          <div className=\"h-4 bg-muted rounded w-3/4 animate-pulse\" />\n          <div className=\"h-3 bg-muted rounded w-1/2 animate-pulse\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"p-3 border rounded-lg animate-pulse\">\n                <div className=\"h-4 bg-muted rounded w-2/3 mb-2\" />\n                <div className=\"h-3 bg-muted rounded w-1/2\" />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-40\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n            <p className=\"text-muted-foreground\">Erro ao carregar análises</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!data?.hasAnalysis || data.analyses.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Análises Recentes\n          </CardTitle>\n          <CardDescription>\n            Histórico das suas análises com IA\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <BarChart3 className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground mb-4\">\n              Nenhuma análise realizada ainda\n            </p>\n            <Button asChild>\n              <Link href=\"/dashboard/avaliar-carteira\">\n                Fazer Primeira Análise\n              </Link>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Calendar className=\"h-5 w-5\" />\n          Análises Recentes\n        </CardTitle>\n        <CardDescription>\n          Últimas {data.analyses.length} análises realizadas\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {data.analyses.map((analysis) => {\n            const typeInfo = ANALYSIS_TYPES[analysis.type];\n            \n            return (\n              <div key={analysis.id} className=\"p-3 border rounded-lg hover:bg-muted/50 transition-colors\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"secondary\" className={typeInfo.color}>\n                      <span className=\"mr-1\">{typeInfo.icon}</span>\n                      {typeInfo.label}\n                    </Badge>\n                    {analysis.score && (\n                      <div className=\"flex items-center gap-1\">\n                        <TrendingUp className=\"h-3 w-3\" />\n                        <span className=\"text-sm font-medium\">{analysis.score}/100</span>\n                      </div>\n                    )}\n                    {analysis.riskLevel && (\n                      <Badge variant=\"outline\" className={RISK_COLORS[analysis.riskLevel as keyof typeof RISK_COLORS]}>\n                        {analysis.riskLevel}\n                      </Badge>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {new Date(analysis.createdAt).toLocaleDateString('pt-BR')}\n                  </span>\n                </div>\n                \n                <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">\n                  {analysis.summary}\n                </p>\n                \n                {analysis.portfolioName && (\n                  <p className=\"text-xs text-muted-foreground\">\n                    Carteira: {analysis.portfolioName}\n                  </p>\n                )}\n              </div>\n            );\n          })}\n        </div>\n        \n        <div className=\"mt-4 pt-4 border-t\">\n          <div className=\"grid grid-cols-2 gap-2\">\n            <Button variant=\"outline\" size=\"sm\" asChild>\n              <Link href=\"/dashboard/avaliar-carteira\">\n                Nova Avaliação\n              </Link>\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" asChild>\n              <Link href=\"/dashboard/direcionar-aportes\">\n                Novos Aportes\n              </Link>\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6478},"src/app/api/notifications/[id]/read/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { db } from '@/lib/db';\n\n// PATCH /api/notifications/[id]/read - Mark notification as read\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Find the internal user by Clerk ID\n    const internalUser = await db.user.findUnique({\n      where: { clerkId: userId }\n    });\n\n    if (!internalUser) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    const notificationId = params.id;\n\n    // Verify the notification belongs to the user\n    const notification = await db.notification.findFirst({\n      where: {\n        id: notificationId,\n        userId: internalUser.id\n      }\n    });\n\n    if (!notification) {\n      return NextResponse.json({ error: 'Notification not found' }, { status: 404 });\n    }\n\n    // Mark as read\n    const updatedNotification = await db.notification.update({\n      where: { id: notificationId },\n      data: {\n        read: true,\n        readAt: new Date()\n      }\n    });\n\n    return NextResponse.json(updatedNotification);\n\n  } catch (error) {\n    console.error('Error marking notification as read:', error);\n    return NextResponse.json(\n      { error: 'Failed to mark notification as read' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1505},"src/app/api/notifications/mark-all-read/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { db } from '@/lib/db';\n\n// PATCH /api/notifications/mark-all-read - Mark all notifications as read\nexport async function PATCH(request: NextRequest) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Find the internal user by Clerk ID\n    const internalUser = await db.user.findUnique({\n      where: { clerkId: userId }\n    });\n\n    if (!internalUser) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // Mark all unread notifications as read\n    const result = await db.notification.updateMany({\n      where: {\n        userId: internalUser.id,\n        read: false\n      },\n      data: {\n        read: true,\n        readAt: new Date()\n      }\n    });\n\n    return NextResponse.json({ \n      message: 'All notifications marked as read',\n      updatedCount: result.count\n    });\n\n  } catch (error) {\n    console.error('Error marking all notifications as read:', error);\n    return NextResponse.json(\n      { error: 'Failed to mark notifications as read' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1244},"src/app/api/notifications/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { db } from '@/lib/db';\n\n// GET /api/notifications - Get user notifications\nexport async function GET(request: NextRequest) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Find the internal user by Clerk ID\n    const internalUser = await db.user.findUnique({\n      where: { clerkId: userId }\n    });\n\n    if (!internalUser) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const limit = parseInt(searchParams.get('limit') || '10');\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const unreadOnly = searchParams.get('unread') === 'true';\n\n    const where = {\n      userId: internalUser.id,\n      ...(unreadOnly && { read: false }),\n      // Filter out expired notifications\n      OR: [\n        { expiresAt: null },\n        { expiresAt: { gt: new Date() } }\n      ]\n    };\n\n    const notifications = await db.notification.findMany({\n      where,\n      orderBy: [\n        { priority: 'desc' },\n        { createdAt: 'desc' }\n      ],\n      take: limit,\n      skip: offset\n    });\n\n    // Get unread count\n    const unreadCount = await db.notification.count({\n      where: {\n        userId: internalUser.id,\n        read: false,\n        OR: [\n          { expiresAt: null },\n          { expiresAt: { gt: new Date() } }\n        ]\n      }\n    });\n\n    return NextResponse.json({\n      notifications,\n      unreadCount,\n      hasMore: notifications.length === limit\n    });\n\n  } catch (error) {\n    console.error('Error fetching notifications:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch notifications' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/notifications - Create notification (admin only or internal system use)\nexport async function POST(request: NextRequest) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Find the current user to check admin permissions\n    const currentUser = await db.user.findUnique({\n      where: { clerkId: userId }\n    });\n\n    if (!currentUser) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // Check if user is admin (based on email in environment variable)\n    const adminEmails = process.env.NEXT_PUBLIC_ADMIN_EMAILS?.split(',').map(email => email.trim()) || [];\n    const isAdmin = adminEmails.includes(currentUser.email || '');\n\n    if (!isAdmin) {\n      return NextResponse.json({ \n        error: 'Forbidden - Admin access required' \n      }, { status: 403 });\n    }\n\n    const body = await request.json();\n    const { \n      targetUserId, \n      type, \n      priority = 'NORMAL',\n      title, \n      message, \n      data = null,\n      expiresAt = null\n    } = body;\n\n    // Find the internal user for the target\n    const targetUser = await db.user.findUnique({\n      where: { id: targetUserId }\n    });\n\n    if (!targetUser) {\n      return NextResponse.json({ error: 'Target user not found' }, { status: 404 });\n    }\n\n    const notification = await db.notification.create({\n      data: {\n        userId: targetUserId,\n        type,\n        priority,\n        title,\n        message,\n        data,\n        expiresAt: expiresAt ? new Date(expiresAt) : null\n      }\n    });\n\n    return NextResponse.json(notification, { status: 201 });\n\n  } catch (error) {\n    console.error('Error creating notification:', error);\n    return NextResponse.json(\n      { error: 'Failed to create notification' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":3779},"src/components/notifications/notification-bell.tsx":{"content":"\"use client\";\n\nimport { useState } from 'react';\nimport { Bell, Check, CheckCheck } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { \n  useNotifications,\n  useUnreadNotificationsCount,\n  useMarkNotificationRead,\n  useMarkAllNotificationsRead,\n  type Notification\n} from '@/hooks/use-notifications';\nimport { formatDistanceToNow } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\nconst PRIORITY_COLORS = {\n  LOW: 'bg-gray-100 border-gray-200',\n  NORMAL: 'bg-blue-50 border-blue-200', \n  HIGH: 'bg-orange-50 border-orange-200',\n  URGENT: 'bg-red-50 border-red-200'\n};\n\nconst TYPE_ICONS = {\n  ANALYSIS_COMPLETE: '📊',\n  CREDIT_LOW: '⚠️',\n  CREDIT_DEPLETED: '🚨',\n  MARKET_ALERT: '📈',\n  SYSTEM_UPDATE: '🔄',\n  PORTFOLIO_ALERT: '💼',\n  RECOMMENDATION_READY: '💡'\n};\n\nfunction NotificationItem({ notification }: { notification: Notification }) {\n  const markAsRead = useMarkNotificationRead();\n  \n  const handleMarkAsRead = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (!notification.read) {\n      markAsRead.mutate(notification.id);\n    }\n  };\n\n  const timeAgo = formatDistanceToNow(new Date(notification.createdAt), {\n    addSuffix: true,\n    locale: ptBR\n  });\n\n  return (\n    <div \n      className={`p-3 border-l-4 rounded-r-lg transition-all hover:bg-muted/50 ${\n        notification.read ? 'opacity-60' : ''\n      } ${PRIORITY_COLORS[notification.priority]}`}\n    >\n      <div className=\"flex items-start justify-between gap-2\">\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <span className=\"text-sm\">\n              {TYPE_ICONS[notification.type as keyof typeof TYPE_ICONS] || '📋'}\n            </span>\n            <h4 className=\"font-medium text-sm truncate\">\n              {notification.title}\n            </h4>\n            {!notification.read && (\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full flex-shrink-0\" />\n            )}\n          </div>\n          <p className=\"text-xs text-muted-foreground line-clamp-2 mb-2\">\n            {notification.message}\n          </p>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-xs text-muted-foreground\">\n              {timeAgo}\n            </span>\n            {!notification.read && (\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={handleMarkAsRead}\n                className=\"h-6 px-2 text-xs\"\n                disabled={markAsRead.isPending}\n              >\n                <Check className=\"h-3 w-3\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function NotificationBell() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { data: unreadCount = 0 } = useUnreadNotificationsCount();\n  const { data: notificationsData, isLoading } = useNotifications({\n    limit: 10,\n    enabled: isOpen\n  });\n  const markAllAsRead = useMarkAllNotificationsRead();\n\n  const notifications = notificationsData?.notifications || [];\n  const hasUnread = Number(unreadCount) > 0;\n\n  const handleMarkAllAsRead = () => {\n    if (hasUnread) {\n      markAllAsRead.mutate();\n    }\n  };\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"relative p-2\">\n          <Bell className=\"h-5 w-5\" />\n          {hasUnread && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-1 -right-1 h-5 w-5 p-0 text-xs flex items-center justify-center min-w-[20px]\"\n            >\n              {Number(unreadCount) > 9 ? '9+' : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent \n        className=\"w-80 p-0\" \n        align=\"end\"\n        sideOffset={8}\n      >\n        <div className=\"p-4 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-semibold\">Notificações</h3>\n            {hasUnread && (\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={handleMarkAllAsRead}\n                disabled={markAllAsRead.isPending}\n                className=\"text-xs h-7\"\n              >\n                <CheckCheck className=\"h-3 w-3 mr-1\" />\n                Marcar todas\n              </Button>\n            )}\n          </div>\n          {hasUnread && (\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {unreadCount} nova{Number(unreadCount) !== 1 ? 's' : ''}\n            </p>\n          )}\n        </div>\n\n        <ScrollArea className=\"h-80\">\n          {isLoading ? (\n            <div className=\"p-4\">\n              <div className=\"space-y-3\">\n                {Array.from({ length: 3 }).map((_, i) => (\n                  <div key={i} className=\"p-3 border rounded-lg animate-pulse\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-2\" />\n                    <div className=\"h-3 bg-muted rounded w-full mb-1\" />\n                    <div className=\"h-3 bg-muted rounded w-1/2\" />\n                  </div>\n                ))}\n              </div>\n            </div>\n          ) : notifications.length === 0 ? (\n            <div className=\"p-8 text-center\">\n              <Bell className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">\n                Nenhuma notificação\n              </p>\n            </div>\n          ) : (\n            <div className=\"p-2 space-y-1\">\n              {notifications.map((notification) => (\n                <NotificationItem\n                  key={notification.id}\n                  notification={notification}\n                />\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n\n        {notifications.length > 0 && notificationsData?.hasMore && (\n          <div className=\"p-3 border-t bg-muted/30\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"w-full text-xs\"\n              onClick={() => {\n                setIsOpen(false);\n              }}\n            >\n              Ver todas as notificações\n            </Button>\n          </div>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":6588},"src/hooks/use-notifications.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\n\nexport interface Notification {\n  id: string;\n  type: string;\n  priority: 'LOW' | 'NORMAL' | 'HIGH' | 'URGENT';\n  title: string;\n  message: string;\n  data?: any;\n  read: boolean;\n  readAt?: string;\n  createdAt: string;\n  expiresAt?: string;\n}\n\ninterface NotificationsResponse {\n  notifications: Notification[];\n  unreadCount: number;\n  hasMore: boolean;\n}\n\n// Hook for fetching notifications\nexport function useNotifications(\n  options: {\n    limit?: number;\n    offset?: number;\n    unreadOnly?: boolean;\n    enabled?: boolean;\n  } = {}\n) {\n  const { limit = 10, offset = 0, unreadOnly = false, enabled = true } = options;\n  \n  return useQuery<NotificationsResponse>({\n    queryKey: ['notifications', { limit, offset, unreadOnly }],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        limit: limit.toString(),\n        offset: offset.toString(),\n        ...(unreadOnly && { unread: 'true' })\n      });\n      \n      const response = await fetch(`/api/notifications?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch notifications');\n      }\n      return response.json();\n    },\n    enabled,\n    staleTime: 30000, // 30 seconds\n    refetchInterval: 60000, // Refetch every minute\n  });\n}\n\n// Hook for unread count only\nexport function useUnreadNotificationsCount() {\n  return useQuery<number>({\n    queryKey: ['notifications', 'unread-count'],\n    queryFn: async () => {\n      const response = await fetch('/api/notifications?unread=true&limit=0');\n      if (!response.ok) {\n        throw new Error('Failed to fetch unread count');\n      }\n      const data = await response.json();\n      return data.unreadCount;\n    },\n    staleTime: 15000, // 15 seconds\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n}\n\n// Hook for marking notification as read\nexport function useMarkNotificationRead() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (notificationId: string) => {\n      const response = await fetch(`/api/notifications/${notificationId}/read`, {\n        method: 'PATCH',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to mark notification as read');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate notifications queries to refetch\n      queryClient.invalidateQueries({ queryKey: ['notifications'] });\n    },\n    onError: (error: Error) => {\n      toast.error('Erro ao marcar notificação como lida');\n      console.error('Error marking notification as read:', error);\n    }\n  });\n}\n\n// Hook for marking all notifications as read\nexport function useMarkAllNotificationsRead() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/notifications/mark-all-read', {\n        method: 'PATCH',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to mark all notifications as read');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Invalidate notifications queries to refetch\n      queryClient.invalidateQueries({ queryKey: ['notifications'] });\n      toast.success(`${data.updatedCount} notificações marcadas como lidas`);\n    },\n    onError: (error: Error) => {\n      toast.error('Erro ao marcar notificações como lidas');\n      console.error('Error marking all notifications as read:', error);\n    }\n  });\n}","size_bytes":3554},"src/lib/notification-service.ts":{"content":"import { db } from '@/lib/db';\n\nexport type NotificationType = \n  | 'ANALYSIS_COMPLETE'\n  | 'CREDIT_LOW'\n  | 'CREDIT_DEPLETED'\n  | 'MARKET_ALERT'\n  | 'SYSTEM_UPDATE'\n  | 'PORTFOLIO_ALERT'\n  | 'RECOMMENDATION_READY';\n\nexport type NotificationPriority = 'LOW' | 'NORMAL' | 'HIGH' | 'URGENT';\n\ninterface CreateNotificationData {\n  userId: string;\n  type: NotificationType;\n  priority?: NotificationPriority;\n  title: string;\n  message: string;\n  data?: any;\n  expiresAt?: Date;\n}\n\nexport class NotificationService {\n  \n  static async createNotification(data: CreateNotificationData) {\n    try {\n      const notification = await db.notification.create({\n        data: {\n          userId: data.userId,\n          type: data.type,\n          priority: data.priority || 'NORMAL',\n          title: data.title,\n          message: data.message,\n          data: data.data,\n          expiresAt: data.expiresAt\n        }\n      });\n      \n      console.log(`Notification created for user ${data.userId}: ${data.title}`);\n      return notification;\n    } catch (error) {\n      console.error('Error creating notification:', error);\n      throw error;\n    }\n  }\n\n  // Analysis completed notification\n  static async notifyAnalysisComplete(\n    userId: string, \n    analysisType: 'PORTFOLIO_EVALUATION' | 'INVESTMENT_RECOMMENDATION',\n    portfolioName?: string\n  ) {\n    const typeLabels = {\n      PORTFOLIO_EVALUATION: 'Avaliação de Carteira',\n      INVESTMENT_RECOMMENDATION: 'Recomendação de Aportes'\n    };\n\n    const title = `${typeLabels[analysisType]} Concluída`;\n    let message = `Sua análise foi concluída com sucesso e está pronta para visualização.`;\n    \n    if (portfolioName) {\n      message += ` Carteira analisada: ${portfolioName}`;\n    }\n\n    return this.createNotification({\n      userId,\n      type: 'ANALYSIS_COMPLETE',\n      priority: 'NORMAL',\n      title,\n      message,\n      data: {\n        analysisType,\n        portfolioName\n      }\n    });\n  }\n\n  // Credit balance warnings\n  static async notifyCreditLow(userId: string, remainingCredits: number) {\n    return this.createNotification({\n      userId,\n      type: 'CREDIT_LOW',\n      priority: 'HIGH',\n      title: 'Créditos Baixos',\n      message: `Você tem apenas ${remainingCredits} créditos restantes. Considere recarregar para continuar usando os agentes de IA.`,\n      data: { remainingCredits }\n    });\n  }\n\n  static async notifyCreditDepleted(userId: string) {\n    return this.createNotification({\n      userId,\n      type: 'CREDIT_DEPLETED',\n      priority: 'URGENT',\n      title: 'Créditos Esgotados',\n      message: 'Seus créditos se esgotaram. Recarregue agora para continuar usando as análises de IA da FiiAI.',\n      data: { needsTopUp: true }\n    });\n  }\n\n  // Portfolio alerts\n  static async notifyPortfolioAlert(\n    userId: string, \n    alertType: 'HIGH_CONCENTRATION' | 'SECTOR_IMBALANCE' | 'PERFORMANCE_CONCERN',\n    details: string\n  ) {\n    const alertTitles = {\n      HIGH_CONCENTRATION: 'Concentração Alta Detectada',\n      SECTOR_IMBALANCE: 'Desequilíbrio Setorial',\n      PERFORMANCE_CONCERN: 'Alerta de Performance'\n    };\n\n    return this.createNotification({\n      userId,\n      type: 'PORTFOLIO_ALERT',\n      priority: 'HIGH',\n      title: alertTitles[alertType],\n      message: details,\n      data: { alertType }\n    });\n  }\n\n  // Market alerts\n  static async notifyMarketAlert(\n    userId: string,\n    title: string,\n    message: string,\n    priority: NotificationPriority = 'NORMAL'\n  ) {\n    return this.createNotification({\n      userId,\n      type: 'MARKET_ALERT',\n      priority,\n      title,\n      message,\n      data: { source: 'market_analysis' }\n    });\n  }\n\n  // System updates\n  static async notifySystemUpdate(\n    userId: string,\n    updateType: 'NEW_FEATURE' | 'MAINTENANCE' | 'IMPROVEMENT',\n    title: string,\n    message: string\n  ) {\n    const priorities = {\n      NEW_FEATURE: 'NORMAL' as NotificationPriority,\n      MAINTENANCE: 'HIGH' as NotificationPriority,\n      IMPROVEMENT: 'LOW' as NotificationPriority\n    };\n\n    return this.createNotification({\n      userId,\n      type: 'SYSTEM_UPDATE',\n      priority: priorities[updateType],\n      title,\n      message,\n      data: { updateType }\n    });\n  }\n\n  // Broadcast notification to all users\n  static async broadcastToAllUsers(\n    type: NotificationType,\n    title: string,\n    message: string,\n    priority: NotificationPriority = 'NORMAL',\n    data?: any\n  ) {\n    try {\n      // Get all active users\n      const users = await db.user.findMany({\n        where: { isActive: true },\n        select: { id: true }\n      });\n\n      const notifications = users.map(user => ({\n        userId: user.id,\n        type,\n        priority,\n        title,\n        message,\n        data\n      }));\n\n      // Create notifications in batch\n      await db.notification.createMany({\n        data: notifications\n      });\n\n      console.log(`Broadcast notification sent to ${users.length} users: ${title}`);\n      return { sentTo: users.length };\n    } catch (error) {\n      console.error('Error broadcasting notification:', error);\n      throw error;\n    }\n  }\n\n  // Clean up expired notifications\n  static async cleanupExpiredNotifications() {\n    try {\n      const result = await db.notification.deleteMany({\n        where: {\n          expiresAt: {\n            lt: new Date()\n          }\n        }\n      });\n\n      console.log(`Cleaned up ${result.count} expired notifications`);\n      return result;\n    } catch (error) {\n      console.error('Error cleaning up notifications:', error);\n      throw error;\n    }\n  }\n}","size_bytes":5585},"src/components/marketing/access-info.tsx":{"content":"\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Instagram, MessageCircle } from \"lucide-react\"\n\nexport function AccessInfo() {\n  return (\n    <section id=\"access\" className=\"container mx-auto px-4 py-16\">\n      <div className=\"text-center mb-12\">\n        <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n          Acesso Exclusivo à Plataforma FiiAI\n        </h2>\n        <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n          Nossa plataforma opera com acesso controlado. Entre em contato conosco para solicitar acesso e começar a usar nossos agentes de análise de FIIs.\n        </p>\n      </div>\n      \n      <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n        <Card className=\"border-border/40 bg-card/30\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-3\">\n              <Instagram className=\"h-6 w-6 text-pink-500\" />\n              Instagram\n            </CardTitle>\n            <CardDescription>\n              Siga-nos e envie uma mensagem direta para solicitar acesso\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button \n              asChild \n              className=\"w-full bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700\"\n            >\n              <a \n                href=\"https://instagram.com/fiiai\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"flex items-center justify-center gap-2\"\n              >\n                <Instagram className=\"h-4 w-4\" />\n                Seguir no Instagram\n              </a>\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-border/40 bg-card/30\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-3\">\n              <MessageCircle className=\"h-6 w-6 text-green-500\" />\n              WhatsApp\n            </CardTitle>\n            <CardDescription>\n              Entre em contato direto via WhatsApp para suporte e acesso\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button \n              asChild \n              className=\"w-full bg-green-600 hover:bg-green-700\"\n            >\n              <a \n                href=\"https://wa.me/5511999999999\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"flex items-center justify-center gap-2\"\n              >\n                <MessageCircle className=\"h-4 w-4\" />\n                Falar no WhatsApp\n              </a>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"text-center mt-12\">\n        <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-blue-500/10 border border-blue-500/20 rounded-full text-blue-400 text-sm\">\n          <span className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></span>\n          Acesso controlado via convite • Análise profissional de FIIs\n        </div>\n      </div>\n    </section>\n  )\n}","size_bytes":3187}},"version":1}