// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String?  @unique
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creditBalance      CreditBalance?
  usageHistory       UsageHistory[]
  storageObjects     StorageObject[]
  subscriptionEvents SubscriptionEvent[]
  // FII related relations
  userPortfolios     UserPortfolio[]
  analysisReports    AnalysisReport[]

  @@index([email])
  @@index([name])
  @@index([createdAt])
  @@index([isActive])
}


// Workspace features and linkage to projects
model Feature {
  id          String     @id @default(cuid())
  workspaceId String
  name        String
  description String?
  tags        String[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([workspaceId])
}

model CreditBalance {
  id                String   @id @default(cuid())
  userId            String   @unique
  clerkUserId       String   @unique
  creditsRemaining  Int      @default(100)  // Cached from Clerk
  lastSyncedAt      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id])
  usageHistory      UsageHistory[]

  @@index([userId])
  @@index([clerkUserId])
  @@index([creditsRemaining])
  @@index([lastSyncedAt])
}

// Track individual usage events
model UsageHistory {
  id              String   @id @default(cuid())
  userId          String
  creditBalanceId String
  operationType   OperationType
  creditsUsed     Int
  details         Json?
  timestamp       DateTime @default(now())

  user            User     @relation(fields: [userId], references: [id])
  creditBalance   CreditBalance @relation(fields: [creditBalanceId], references: [id])

  @@index([userId])
  @@index([creditBalanceId])
  @@index([timestamp])
  @@index([operationType])
  @@index([userId, timestamp])
  @@index([operationType, timestamp])
}

enum OperationType {
  AI_TEXT_CHAT
  AI_IMAGE_GENERATION
  FII_PORTFOLIO_ANALYSIS
  FII_INVESTMENT_RECOMMENDATION
}

enum AnalysisType {
  PORTFOLIO_EVALUATION
  INVESTMENT_RECOMMENDATION
}

enum FiiSector {
  LOGISTICO
  SHOPPING
  CORPORATIVO
  RESIDENCIAL
  TIJOLO
  PAPEL
  FUNDOS
  HIBRIDO
  OUTROS
}

enum RecommendationType {
  STRONG_BUY
  BUY
  HOLD
  SELL
  STRONG_SELL
}

// Singleton row storing admin-configurable credit settings
model AdminSettings {
  id           String   @id @default("singleton")
  featureCosts Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Subscription plans sourced from Clerk and configured credits
model Plan {
  id        String   @id @default(cuid())
  clerkId   String?  @unique // Clerk plan ID (e.g., cplan_*)
  clerkName String?
  name      String
  credits   Int
  active    Boolean  @default(true)
  sortOrder Int      @default(0)
  // Pricing synced from Clerk (amounts in cents)
  currency           String?
  priceMonthlyCents  Int?
  priceYearlyCents   Int?
  description        String?  @db.Text
  features           Json?
  badge              String?
  highlight          Boolean  @default(false)
  ctaType            String?  @default("checkout")
  ctaLabel           String?
  ctaUrl             String?
  billingSource      String   @default("clerk")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([active])
  @@index([sortOrder])
}

// File/object uploads tracked for admin management
model StorageObject {
  id           String   @id @default(cuid())
  userId       String
  clerkUserId  String
  provider     String   @default("vercel_blob")
  url          String
  pathname     String
  name         String
  contentType  String?
  size         Int
  deletedAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([clerkUserId])
  @@index([contentType])
  @@index([deletedAt])
  @@index([name])
}

// Track subscription lifecycle events for revenue analytics
model SubscriptionEvent {
  id           String   @id @default(cuid())
  userId       String?
  clerkUserId  String
  planKey      String?
  status       String
  eventType    String
  occurredAt   DateTime @default(now())
  metadata     Json?
  createdAt    DateTime @default(now())

  user         User?    @relation(fields: [userId], references: [id])

  @@index([clerkUserId, occurredAt])
  @@index([userId, occurredAt])
}

// Admin-configured recommended portfolio for FIIs
model RecommendedPortfolio {
  id           String     @id @default(cuid())
  fiiCode      String     @unique  // HGLG11, BTLG11, etc.
  fiiName      String                // Nome do FII
  sector       FiiSector
  percentage   Float                 // Percentual recomendado na carteira
  reasoning    String?    @db.Text   // Justificativa da recomendação
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([isActive])
  @@index([sector])
  @@index([percentage])
}

// User portfolios uploaded via Excel
model UserPortfolio {
  id               String     @id @default(cuid())
  userId           String
  originalFileName String                  // Nome original do Excel
  uploadedAt       DateTime   @default(now())
  positions        Json                    // Array de posições: [{ fiiCode, quantity, avgPrice, currentValue, etc. }]
  totalValue       Float                   // Valor total da carteira
  lastAnalyzedAt   DateTime?
  
  user             User       @relation(fields: [userId], references: [id])
  analysisReports  AnalysisReport[]

  @@index([userId])
  @@index([uploadedAt])
  @@index([totalValue])
}

// Analysis reports generated by AI agents
model AnalysisReport {
  id                String     @id @default(cuid())
  userId            String
  userPortfolioId   String?                 // Portfolio que foi analisado
  analysisType      AnalysisType
  aiAgentVersion    String     @default("v1.0")
  
  // Dados da análise
  summary           String     @db.Text     // Resumo executivo
  currentAllocation Json                    // Alocação atual por setor
  riskAssessment    Json                    // Avaliação de riscos
  performanceMetrics Json                   // Métricas de performance
  recommendations   Json                    // Array de recomendações detalhadas
  
  // Metadados
  processingTime    Int?                    // Tempo em milissegundos
  creditsUsed       Int        @default(10)
  generatedAt       DateTime   @default(now())
  
  user              User       @relation(fields: [userId], references: [id])
  userPortfolio     UserPortfolio? @relation(fields: [userPortfolioId], references: [id])
  investmentRecommendations InvestmentRecommendation[]

  @@index([userId])
  @@index([analysisType])
  @@index([generatedAt])
  @@index([userPortfolioId])
}

// Investment recommendations generated by AI
model InvestmentRecommendation {
  id              String             @id @default(cuid())
  analysisReportId String
  fiiCode         String
  fiiName         String
  recommendation  RecommendationType
  targetPercentage Float?             // % recomendado na carteira
  investmentAmount Float?             // Valor em R$ a investir
  reasoning       String    @db.Text  // Justificativa da IA
  confidence      Float               // 0-1, confiança na recomendação
  priority        Int       @default(1) // 1-5, prioridade de investimento
  
  analysisReport  AnalysisReport @relation(fields: [analysisReportId], references: [id])
  
  @@index([analysisReportId])
  @@index([fiiCode])
  @@index([recommendation])
  @@index([priority])
}
