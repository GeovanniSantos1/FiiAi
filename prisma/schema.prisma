generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                      @id @default(cuid())
  clerkId             String                      @unique
  email               String?                     @unique
  name                String?
  isActive            Boolean                     @default(true)
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  analysisReports     AnalysisReport[]
  creditBalance       CreditBalance?
  notifications       Notification[]
  storageObjects      StorageObject[]
  subscriptionEvents  SubscriptionEvent[]
  usageHistory        UsageHistory[]
  userPortfolios      UserPortfolio[]
  aporteRecomendacoes AporteRecomendacao[]
  createdRuleSets     RecommendationRuleSet[]     @relation("RuleSetCreator")
  createdRuleVersions RecommendationRuleVersion[] @relation("RuleVersionCreator")

  @@index([email])
  @@index([name])
  @@index([createdAt])
  @@index([isActive])
  // NOVOS ÍNDICES COMPOSTOS - PLAN-006
  @@index([isActive, createdAt(sort: Desc)])
  @@index([email, isActive])
}

model Feature {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  description String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([workspaceId])
}

model CreditBalance {
  id               String         @id @default(cuid())
  userId           String         @unique
  clerkUserId      String         @unique
  creditsRemaining Int            @default(100)
  lastSyncedAt     DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation(fields: [userId], references: [id])
  usageHistory     UsageHistory[]

  @@index([userId])
  @@index([clerkUserId])
  @@index([creditsRemaining])
  @@index([lastSyncedAt])
  // NOVOS ÍNDICES COMPOSTOS - PLAN-006
  @@index([creditsRemaining(sort: Asc), lastSyncedAt])
}

model UsageHistory {
  id              String        @id @default(cuid())
  userId          String
  creditBalanceId String
  operationType   OperationType
  creditsUsed     Int
  details         Json?
  timestamp       DateTime      @default(now())
  creditBalance   CreditBalance @relation(fields: [creditBalanceId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([creditBalanceId])
  @@index([operationType])
  // NOVOS ÍNDICES COMPOSTOS - PLAN-006 (substituem índices simples)
  @@index([userId, operationType, timestamp(sort: Desc)])
  @@index([operationType, timestamp(sort: Desc)])
  @@index([timestamp(sort: Desc)], map: "UsageHistory_timestamp_desc_idx")
}

model AdminSettings {
  id           String   @id @default("singleton")
  featureCosts Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Plan {
  id                String   @id @default(cuid())
  clerkId           String?  @unique
  clerkName         String?
  name              String
  credits           Int
  active            Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  currency          String?
  priceMonthlyCents Int?
  priceYearlyCents  Int?
  badge             String?
  ctaLabel          String?
  ctaType           String?  @default("checkout")
  ctaUrl            String?
  description       String?
  features          Json?
  highlight         Boolean  @default(false)
  billingSource     String   @default("clerk")
  sortOrder         Int      @default(0)

  @@index([active])
  @@index([sortOrder])
}

model StorageObject {
  id          String    @id @default(cuid())
  userId      String
  clerkUserId String
  provider    String    @default("vercel_blob")
  url         String
  pathname    String
  name        String
  contentType String?
  size        Int
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([clerkUserId])
  @@index([contentType])
  @@index([deletedAt])
  @@index([name])
  // NOVOS ÍNDICES COMPOSTOS - PLAN-006
  @@index([userId, deletedAt, createdAt(sort: Desc)])
  @@index([contentType, size(sort: Desc)])
}

model SubscriptionEvent {
  id          String   @id @default(cuid())
  userId      String?
  clerkUserId String
  planKey     String?
  status      String
  eventType   String
  occurredAt  DateTime @default(now())
  metadata    Json?
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])

  @@index([clerkUserId, occurredAt])
  @@index([userId, occurredAt])
}

model RecommendedPortfolio {
  id          String            @id @default(cuid())
  name        String
  description String?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   String
  funds       RecommendedFund[]

  @@index([isActive])
  @@index([createdAt])
  @@map("recommended_portfolios")
}

model RecommendedFund {
  id             String               @id @default(cuid())
  portfolioId    String
  ticker         String
  name           String
  segment        String
  currentPrice   Decimal              @db.Decimal(10, 2)
  averagePrice   Decimal              @db.Decimal(10, 2)
  ceilingPrice   Decimal              @db.Decimal(10, 2)
  allocation     Decimal              @db.Decimal(5, 2)
  recommendation FundRecommendation
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  portfolio      RecommendedPortfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
  @@index([ticker])
  @@index([recommendation])
  // NOVOS ÍNDICES COMPOSTOS - PLAN-006
  @@index([recommendation, allocation(sort: Desc)])
  @@index([ticker, currentPrice])
  @@map("recommended_funds")
}

model UserPortfolio {
  id                  String               @id @default(cuid())
  userId              String
  originalFileName    String
  uploadedAt          DateTime             @default(now())
  positions           Json
  totalValue          Float
  lastAnalyzedAt      DateTime?
  analysisReports     AnalysisReport[]
  user                User                 @relation(fields: [userId], references: [id])
  aporteRecomendacoes AporteRecomendacao[]

  @@index([userId])
  @@index([uploadedAt])
  @@index([totalValue])
  // NOVOS ÍNDICES COMPOSTOS - PLAN-006
  @@index([userId, uploadedAt(sort: Desc)])
  @@index([userId, lastAnalyzedAt])
}

model AnalysisReport {
  id                        String                     @id @default(cuid())
  userId                    String
  userPortfolioId           String?
  analysisType              AnalysisType
  aiAgentVersion            String                     @default("v1.0")
  summary                   String
  currentAllocation         Json
  riskAssessment            Json
  performanceMetrics        Json
  recommendations           Json
  processingTime            Int?
  creditsUsed               Int                        @default(10)
  generatedAt               DateTime                   @default(now())
  ruleSetId                 String?
  ruleSetVersion            Int?
  ruleSet                   RecommendationRuleSet?     @relation("AnalysisRuleSet", fields: [ruleSetId], references: [id])
  user                      User                       @relation(fields: [userId], references: [id])
  userPortfolio             UserPortfolio?             @relation(fields: [userPortfolioId], references: [id])
  investmentRecommendations InvestmentRecommendation[]

  @@index([userId])
  @@index([analysisType])
  @@index([generatedAt])
  @@index([userPortfolioId])
  @@index([ruleSetId])
  // NOVOS ÍNDICES COMPOSTOS - PLAN-006
  @@index([userId, generatedAt(sort: Desc)])
  @@index([userId, analysisType, generatedAt(sort: Desc)])
  @@index([userPortfolioId, generatedAt(sort: Desc)])
}

model InvestmentRecommendation {
  id               String             @id @default(cuid())
  analysisReportId String
  fiiCode          String
  fiiName          String
  recommendation   RecommendationType
  targetPercentage Float?
  investmentAmount Float?
  reasoning        String
  confidence       Float
  priority         Int                @default(1)
  analysisReport   AnalysisReport     @relation(fields: [analysisReportId], references: [id])

  @@index([analysisReportId])
  @@index([fiiCode])
  @@index([recommendation])
  @@index([priority])
  // NOVOS ÍNDICES COMPOSTOS - PLAN-006
  @@index([fiiCode, recommendation])
  @@index([recommendation, confidence(sort: Desc)])
  @@index([analysisReportId, priority(sort: Asc)])
}

model Notification {
  id        String               @id @default(cuid())
  userId    String
  type      NotificationType
  priority  NotificationPriority @default(NORMAL)
  title     String
  message   String
  data      Json?
  read      Boolean              @default(false)
  readAt    DateTime?
  createdAt DateTime             @default(now())
  expiresAt DateTime?
  user      User                 @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([priority])
  @@index([read])
  @@index([createdAt])
  @@index([expiresAt])
  @@index([userId, read])
  @@index([userId, createdAt])
}

model RecommendationRuleSet {
  id        String                      @id @default(cuid())
  name      String
  version   Int                         @default(1)
  isActive  Boolean                     @default(false)
  rules     Json
  metadata  Json
  createdBy String
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
  analyses  AnalysisReport[]            @relation("AnalysisRuleSet")
  creator   User                        @relation("RuleSetCreator", fields: [createdBy], references: [id])
  versions  RecommendationRuleVersion[]

  @@index([isActive])
  @@index([createdBy])
  @@map("recommendation_rule_sets")
}

model RecommendationRuleVersion {
  id             String                @id @default(cuid())
  ruleSetId      String
  version        Int
  rules          Json
  changesSummary String
  createdBy      String
  createdAt      DateTime              @default(now())
  creator        User                  @relation("RuleVersionCreator", fields: [createdBy], references: [id])
  ruleSet        RecommendationRuleSet @relation(fields: [ruleSetId], references: [id], onDelete: Cascade)

  @@unique([ruleSetId, version])
  @@index([ruleSetId])
  @@index([createdAt])
  @@map("recommendation_rule_versions")
}

model RegrasAporte {
  id                         String   @id @default(cuid())
  nome                       String   @db.VarChar(255)
  descricao                  String?
  ativo                      Boolean  @default(true)
  descontoMinimoAceitavel    Float    @default(0.0)
  permitirSemDesconto        Boolean  @default(true)
  toleranciaDesbalanceamento Float    @default(2.0)
  pesoDesbalanceamento       Int      @default(60)
  pesoDesconto               Int      @default(40)
  limiteMaximoFundos         Int      @default(5)
  alocacaoSequencial         Boolean  @default(true)
  criadoPor                  String
  criadoEm                   DateTime @default(now())
  atualizadoEm               DateTime @updatedAt

  @@index([ativo])
  @@index([criadoPor])
  @@map("regras_aporte")
}

model AporteRecomendacao {
  id               String        @id @default(cuid())
  userId           String
  userPortfolioId  String
  valorDisponivel  Float
  recomendacao     Json
  regrasUtilizadas Json
  criadoEm         DateTime      @default(now())
  user             User          @relation(fields: [userId], references: [id])
  portfolio        UserPortfolio @relation(fields: [userPortfolioId], references: [id])

  @@index([userPortfolioId])
  // NOVOS ÍNDICES COMPOSTOS - PLAN-006 (substituem índices simples)
  @@index([userId, criadoEm(sort: Desc)])
  @@index([userPortfolioId, criadoEm(sort: Desc)])
  @@map("aporte_recomendacoes")
}

model FiiPrecoTeto {
  id           String   @id @default(cuid())
  fiiCode      String   @unique @db.VarChar(10)
  valorTeto    Float
  fonte        String?
  atualizadoEm DateTime @updatedAt
  criadoEm     DateTime @default(now())

  @@index([fiiCode])
  @@map("fii_preco_teto")
}

enum OperationType {
  AI_TEXT_CHAT
  AI_IMAGE_GENERATION
  FII_PORTFOLIO_ANALYSIS
  FII_INVESTMENT_RECOMMENDATION
  APORTE_RECOMENDACAO
}

enum AnalysisType {
  PORTFOLIO_EVALUATION
  INVESTMENT_RECOMMENDATION
}

enum FiiSector {
  LAJES
  LOGISTICA
  SHOPPING
  VAREJO_RENDA_URBANA
  PAPEL
  HEDGE_FUNDS
  EDUCACIONAL
  HIBRIDOS
  AGRO
  INFRA
  DESENVOLVIMENTO
  HOSPITAIS
  HOTEIS
  AGENCIAS
  RESIDENCIAL
  OUTROS
}

enum RecommendationType {
  STRONG_BUY
  BUY
  HOLD
  SELL
  STRONG_SELL
}

enum FundRecommendation {
  BUY
  SELL
  HOLD
}

enum NotificationType {
  ANALYSIS_COMPLETE
  CREDIT_LOW
  CREDIT_DEPLETED
  MARKET_ALERT
  SYSTEM_UPDATE
  PORTFOLIO_ALERT
  RECOMMENDATION_READY
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
